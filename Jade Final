{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting CFEDemands>=0.4.1\n",
      "  Using cached CFEDemands-0.4.1-py2.py3-none-any.whl (39 kB)\n",
      "Collecting ConsumerDemands\n",
      "  Using cached ConsumerDemands-0.3.dev0-py2.py3-none-any.whl (12 kB)\n",
      "Requirement already satisfied: gspread>=4.0.1 in /opt/conda/lib/python3.9/site-packages (from -r requirements.txt (line 10)) (4.0.1)\n",
      "Requirement already satisfied: matplotlib>=3.3.4 in /opt/conda/lib/python3.9/site-packages (from -r requirements.txt (line 13)) (3.4.3)\n",
      "Requirement already satisfied: numpy>=1.21.5 in /opt/conda/lib/python3.9/site-packages (from -r requirements.txt (line 17)) (1.21.5)\n",
      "Collecting oauth2client>=4.1.3\n",
      "  Using cached oauth2client-4.1.3-py2.py3-none-any.whl (98 kB)\n",
      "Requirement already satisfied: pandas>=1.3.5 in /opt/conda/lib/python3.9/site-packages (from -r requirements.txt (line 25)) (1.3.5)\n",
      "Requirement already satisfied: plotly>=5.1.0 in /opt/conda/lib/python3.9/site-packages (from -r requirements.txt (line 28)) (5.2.1)\n",
      "Collecting eep153_tools>=0.11\n",
      "  Using cached eep153_tools-0.11-py2.py3-none-any.whl (4.4 kB)\n",
      "Processing /home/jovyan/.cache/pip/wheels/20/7e/30/7d702acd6a1e89911301cd9dbf9cb9870ca80c0e64bc2cde23/gnupg-2.3.1-py3-none-any.whl\n",
      "Requirement already satisfied: google-auth-oauthlib>=0.4.1 in /opt/conda/lib/python3.9/site-packages (from gspread>=4.0.1->-r requirements.txt (line 10)) (0.4.5)\n",
      "Requirement already satisfied: google-auth>=1.12.0 in /opt/conda/lib/python3.9/site-packages (from gspread>=4.0.1->-r requirements.txt (line 10)) (2.6.2)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=3.3.4->-r requirements.txt (line 13)) (3.0.7)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=3.3.4->-r requirements.txt (line 13)) (2.8.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=3.3.4->-r requirements.txt (line 13)) (0.11.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=3.3.4->-r requirements.txt (line 13)) (1.4.2)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=3.3.4->-r requirements.txt (line 13)) (8.3.2)\n",
      "Requirement already satisfied: rsa>=3.1.4 in /opt/conda/lib/python3.9/site-packages (from oauth2client>=4.1.3->-r requirements.txt (line 20)) (4.8)\n",
      "Requirement already satisfied: six>=1.6.1 in /opt/conda/lib/python3.9/site-packages (from oauth2client>=4.1.3->-r requirements.txt (line 20)) (1.16.0)\n",
      "Requirement already satisfied: pyasn1>=0.1.7 in /opt/conda/lib/python3.9/site-packages (from oauth2client>=4.1.3->-r requirements.txt (line 20)) (0.4.8)\n",
      "Requirement already satisfied: pyasn1-modules>=0.0.5 in /opt/conda/lib/python3.9/site-packages (from oauth2client>=4.1.3->-r requirements.txt (line 20)) (0.2.8)\n",
      "Requirement already satisfied: httplib2>=0.9.1 in /opt/conda/lib/python3.9/site-packages (from oauth2client>=4.1.3->-r requirements.txt (line 20)) (0.20.4)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.9/site-packages (from pandas>=1.3.5->-r requirements.txt (line 25)) (2021.1)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.9/site-packages (from plotly>=5.1.0->-r requirements.txt (line 28)) (8.0.1)\n",
      "Requirement already satisfied: psutil>=1.2.1 in /opt/conda/lib/python3.9/site-packages (from gnupg->-r requirements.txt (line 31)) (5.9.0)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.9/site-packages (from google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (1.3.1)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.9/site-packages (from google-auth>=1.12.0->gspread>=4.0.1->-r requirements.txt (line 10)) (5.0.0)\n",
      "Requirement already satisfied: requests>=2.0.0 in /opt/conda/lib/python3.9/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (2.26.0)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.9/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (3.2.0)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0; python_version >= \"3\" in /opt/conda/lib/python3.9/site-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (2.0.0)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.9/site-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (1.25.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.9/site-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (2019.11.28)\n",
      "Requirement already satisfied: idna<4,>=2.5; python_version >= \"3\" in /opt/conda/lib/python3.9/site-packages (from requests>=2.0.0->requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread>=4.0.1->-r requirements.txt (line 10)) (2.8)\n",
      "Installing collected packages: CFEDemands, ConsumerDemands, oauth2client, eep153-tools, gnupg\n",
      "Successfully installed CFEDemands-0.4.1 ConsumerDemands-0.3.dev0 eep153-tools-0.11 gnupg-2.3.1 oauth2client-4.1.3\n"
     ]
    }
   ],
   "source": [
    "!pip install -r requirements.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From Sheet to DataFrame\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by defining a dictionary that contains the spreadsheet key."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "nigeria_data = '17L5cDhXRLNAckP3JvBLTLSYIguFqP2ebMvQLH96c0n4'\n",
    "nigeria_production = '1kG_fVBmj9EEF9LOwxN30HBxkQENOoWeQjVPYzMJe3b4-8DA'\n",
    "nigeria_consumption = '1kG_fVBmj9EEF9LOwxN30HBxkQENOoWeQjVPYzMJe3b4'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the spreadsheet defined, grab it and define a couple of\n",
    "dataframes.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key available for students@eep153.iam.gserviceaccount.com.\n",
      "Key available for students@eep153.iam.gserviceaccount.com.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sys\n",
    "from eep153_tools.sheets import read_sheets\n",
    "\n",
    "expend = read_sheets(nigeria_data,sheet='Expenditures')\n",
    "expend.columns.name = 'i'\n",
    "                 \n",
    "# Change 'ICRISAT' to key of your own sheet in Sheets, above\n",
    "hh_char = read_sheets(nigeria_data,sheet=\"HH Characteristics\")\n",
    "hh_char.columns.name = 'k'\n",
    "\n",
    "# Assume a single market: (Comment this out to make each village its own market)\n",
    "hh_char['m'] = 1\n",
    "expend['m'] = 1\n",
    "\n",
    "# x may have duplicate columns\n",
    "expend = expend.groupby('i',axis=1).sum()\n",
    "expend = expend.apply(lambda x: pd.to_numeric(x,errors='coerce'))\n",
    "expend = expend.replace(0,np.nan)\n",
    "\n",
    "# Take logs of expenditures; call this y\n",
    "log_expend = np.log(expend.set_index(['j','t','m']))\n",
    "           \n",
    "hh_char.set_index(['j','t','m'],inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sort the new Data Frame in order to group by year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>540.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>700.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>900.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>200.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>950.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2500.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19141 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1                      NaN              280.0         NaN     NaN   \n",
       "     10002  1                      NaN              280.0         NaN     NaN   \n",
       "     10003  1                      NaN              180.0         NaN     NaN   \n",
       "     10004  1                      NaN              180.0         NaN     NaN   \n",
       "     10006  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379146 1                      NaN             1100.0         NaN     NaN   \n",
       "     379148 1                    100.0                NaN         NaN     NaN   \n",
       "     379151 1                      NaN              900.0         NaN     NaN   \n",
       "     379154 1                    200.0             1200.0         NaN     NaN   \n",
       "     379155 1                    100.0              950.0         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder  Bananas    Beef  \\\n",
       "t    j      m                                                    \n",
       "2010 10001  1           NaN               NaN    200.0   500.0   \n",
       "     10002  1           NaN               NaN    180.0  1200.0   \n",
       "     10003  1           NaN               NaN    100.0   500.0   \n",
       "     10004  1           NaN               NaN    100.0   500.0   \n",
       "     10006  1           NaN               NaN    300.0   300.0   \n",
       "...                     ...               ...      ...     ...   \n",
       "2018 379146 1           NaN               NaN      NaN     NaN   \n",
       "     379148 1           NaN               NaN      NaN   700.0   \n",
       "     379151 1           NaN               NaN    500.0     NaN   \n",
       "     379154 1           NaN               NaN      NaN  1300.0   \n",
       "     379155 1           NaN               NaN      NaN  1400.0   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Sweet Potatoes  \\\n",
       "t    j      m                                       ...                   \n",
       "2010 10001  1                      540.0       NaN  ...           150.0   \n",
       "     10002  1                     2000.0       NaN  ...           200.0   \n",
       "     10003  1                        NaN       NaN  ...           200.0   \n",
       "     10004  1                        NaN       NaN  ...             NaN   \n",
       "     10006  1                        NaN       NaN  ...             NaN   \n",
       "...                                  ...       ...  ...             ...   \n",
       "2018 379146 1                        NaN       NaN  ...             NaN   \n",
       "     379148 1                        NaN       NaN  ...             NaN   \n",
       "     379151 1                        NaN       NaN  ...             NaN   \n",
       "     379154 1                        NaN       NaN  ...             NaN   \n",
       "     379155 1                        NaN       NaN  ...             NaN   \n",
       "\n",
       "i                Tea  Tomato puree(canned)  Tomatoes  Watermelon  Wheat flour  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1    NaN                 150.0     150.0         NaN          NaN   \n",
       "     10002  1  140.0                 240.0     120.0         NaN          NaN   \n",
       "     10003  1   60.0                  90.0     100.0         NaN          NaN   \n",
       "     10004  1   30.0                  60.0     100.0         NaN          NaN   \n",
       "     10006  1  650.0                   NaN     400.0         NaN          NaN   \n",
       "...              ...                   ...       ...         ...          ...   \n",
       "2018 379146 1    NaN                   NaN       NaN       500.0          NaN   \n",
       "     379148 1    NaN                  60.0     200.0       150.0          NaN   \n",
       "     379151 1    NaN                 150.0     600.0       600.0        750.0   \n",
       "     379154 1    NaN                   NaN     100.0       200.0          NaN   \n",
       "     379155 1    NaN                   NaN     300.0       200.0          NaN   \n",
       "\n",
       "i              White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                     \n",
       "2010 10001  1        600.0             NaN        NaN     1500.0  \n",
       "     10002  1        400.0             NaN        NaN     1200.0  \n",
       "     10003  1        100.0             NaN        NaN      400.0  \n",
       "     10004  1        100.0             NaN        NaN      400.0  \n",
       "     10006  1          NaN             NaN        NaN      400.0  \n",
       "...                    ...             ...        ...        ...  \n",
       "2018 379146 1          NaN             NaN        NaN     1800.0  \n",
       "     379148 1          NaN             NaN        NaN     1600.0  \n",
       "     379151 1       1600.0             NaN        NaN     3500.0  \n",
       "     379154 1          NaN             NaN        NaN      650.0  \n",
       "     379155 1          NaN             NaN        NaN     2500.0  \n",
       "\n",
       "[19141 rows x 124 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expend = expend.set_index(['t','j','m']).sort_index()\n",
    "expend = expend.replace(0.0,np.nan) # Replace zeroes with np.nan\n",
    "expend"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# People per Household, Total Expenditures, and Expenditures per Capita"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the household data to calculate the number of people per household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>People per HH</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19249 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               People per HH\n",
       "t    j      m               \n",
       "2010 10001  1              7\n",
       "     10002  1              7\n",
       "     10003  1              6\n",
       "     10004  1              3\n",
       "     10006  1              3\n",
       "...                      ...\n",
       "2018 379146 1              4\n",
       "     379148 1              1\n",
       "     379151 1              5\n",
       "     379154 1              2\n",
       "     379155 1              4\n",
       "\n",
       "[19249 rows x 1 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "people = hh_char.sum(axis=1)\n",
    "num_people = pd.DataFrame(people)\n",
    "num_people = num_people.rename(columns={0:'People per HH'})\n",
    "num_people = num_people.reset_index().set_index(['t','j','m']).sort_index()\n",
    "num_people"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aggregate the expenditure data to find the total expenditures for each household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Total Expenditures</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>20225.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>15365.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>4675.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>4465.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>7565.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>31100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>6410.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>20540.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>22650.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>7550.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19141 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Total Expenditures\n",
       "t    j      m                    \n",
       "2010 10001  1             20225.0\n",
       "     10002  1             15365.0\n",
       "     10003  1              4675.0\n",
       "     10004  1              4465.0\n",
       "     10006  1              7565.0\n",
       "...                           ...\n",
       "2018 379146 1             31100.0\n",
       "     379148 1              6410.0\n",
       "     379151 1             20540.0\n",
       "     379154 1             22650.0\n",
       "     379155 1              7550.0\n",
       "\n",
       "[19141 rows x 1 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_expend = expend.iloc[:, 0:124].sum(axis=1)\n",
    "total = pd.DataFrame(total_expend)\n",
    "total = total.rename(columns={0:'Total Expenditures'})\n",
    "total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add the total expenditures and people per household information to the dataframe. Then, use these columns to add an expenditures per capita column as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "      <th>Total Expenditures</th>\n",
       "      <th>People per HH</th>\n",
       "      <th>Expenditures per capita</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>540.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>20225.0</td>\n",
       "      <td>7</td>\n",
       "      <td>2889.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>15365.0</td>\n",
       "      <td>7</td>\n",
       "      <td>2195.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>4675.0</td>\n",
       "      <td>6</td>\n",
       "      <td>779.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>4465.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1488.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>7565.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2521.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>31100.0</td>\n",
       "      <td>4</td>\n",
       "      <td>7775.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>700.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>6410.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6410.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>900.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>600.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>20540.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4108.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>200.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650.0</td>\n",
       "      <td>22650.0</td>\n",
       "      <td>2</td>\n",
       "      <td>11325.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>950.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>300.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>7550.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1887.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19141 rows × 127 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1                      NaN              280.0         NaN     NaN   \n",
       "     10002  1                      NaN              280.0         NaN     NaN   \n",
       "     10003  1                      NaN              180.0         NaN     NaN   \n",
       "     10004  1                      NaN              180.0         NaN     NaN   \n",
       "     10006  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379146 1                      NaN             1100.0         NaN     NaN   \n",
       "     379148 1                    100.0                NaN         NaN     NaN   \n",
       "     379151 1                      NaN              900.0         NaN     NaN   \n",
       "     379154 1                    200.0             1200.0         NaN     NaN   \n",
       "     379155 1                    100.0              950.0         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder  Bananas    Beef  \\\n",
       "t    j      m                                                    \n",
       "2010 10001  1           NaN               NaN    200.0   500.0   \n",
       "     10002  1           NaN               NaN    180.0  1200.0   \n",
       "     10003  1           NaN               NaN    100.0   500.0   \n",
       "     10004  1           NaN               NaN    100.0   500.0   \n",
       "     10006  1           NaN               NaN    300.0   300.0   \n",
       "...                     ...               ...      ...     ...   \n",
       "2018 379146 1           NaN               NaN      NaN     NaN   \n",
       "     379148 1           NaN               NaN      NaN   700.0   \n",
       "     379151 1           NaN               NaN    500.0     NaN   \n",
       "     379154 1           NaN               NaN      NaN  1300.0   \n",
       "     379155 1           NaN               NaN      NaN  1400.0   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Tomatoes  Watermelon  \\\n",
       "t    j      m                                       ...                         \n",
       "2010 10001  1                      540.0       NaN  ...     150.0         NaN   \n",
       "     10002  1                     2000.0       NaN  ...     120.0         NaN   \n",
       "     10003  1                        NaN       NaN  ...     100.0         NaN   \n",
       "     10004  1                        NaN       NaN  ...     100.0         NaN   \n",
       "     10006  1                        NaN       NaN  ...     400.0         NaN   \n",
       "...                                  ...       ...  ...       ...         ...   \n",
       "2018 379146 1                        NaN       NaN  ...       NaN       500.0   \n",
       "     379148 1                        NaN       NaN  ...     200.0       150.0   \n",
       "     379151 1                        NaN       NaN  ...     600.0       600.0   \n",
       "     379154 1                        NaN       NaN  ...     100.0       200.0   \n",
       "     379155 1                        NaN       NaN  ...     300.0       200.0   \n",
       "\n",
       "i              Wheat flour  White beans  Wild game meat  Yam flour  Yam-roots  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1          NaN        600.0             NaN        NaN     1500.0   \n",
       "     10002  1          NaN        400.0             NaN        NaN     1200.0   \n",
       "     10003  1          NaN        100.0             NaN        NaN      400.0   \n",
       "     10004  1          NaN        100.0             NaN        NaN      400.0   \n",
       "     10006  1          NaN          NaN             NaN        NaN      400.0   \n",
       "...                    ...          ...             ...        ...        ...   \n",
       "2018 379146 1          NaN          NaN             NaN        NaN     1800.0   \n",
       "     379148 1          NaN          NaN             NaN        NaN     1600.0   \n",
       "     379151 1        750.0       1600.0             NaN        NaN     3500.0   \n",
       "     379154 1          NaN          NaN             NaN        NaN      650.0   \n",
       "     379155 1          NaN          NaN             NaN        NaN     2500.0   \n",
       "\n",
       "i              Total Expenditures  People per HH  Expenditures per capita  \n",
       "t    j      m                                                              \n",
       "2010 10001  1             20225.0              7              2889.285714  \n",
       "     10002  1             15365.0              7              2195.000000  \n",
       "     10003  1              4675.0              6               779.166667  \n",
       "     10004  1              4465.0              3              1488.333333  \n",
       "     10006  1              7565.0              3              2521.666667  \n",
       "...                           ...            ...                      ...  \n",
       "2018 379146 1             31100.0              4              7775.000000  \n",
       "     379148 1              6410.0              1              6410.000000  \n",
       "     379151 1             20540.0              5              4108.000000  \n",
       "     379154 1             22650.0              2             11325.000000  \n",
       "     379155 1              7550.0              4              1887.500000  \n",
       "\n",
       "[19141 rows x 127 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expend['Total Expenditures'] = total['Total Expenditures']\n",
    "expend['People per HH'] = num_people['People per HH']\n",
    "expend['Expenditures per capita'] = expend['Total Expenditures'] / expend['People per HH']\n",
    "expend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 19141 entries, (2010, 10001, 1) to (2018, 379155, 1)\n",
      "Columns: 127 entries, (Cocoyam, Spinach, etc) to Expenditures per capita\n",
      "dtypes: float64(126), int64(1)\n",
      "memory usage: 18.9 MB\n"
     ]
    }
   ],
   "source": [
    "expend.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Putting into Quartiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def one_year(df, year):\n",
    "    new_df = df.loc[[year]]\n",
    "    return new_df\n",
    "\n",
    "def quartiles_by_te(df, year, quartile):\n",
    "    # Selecting out one year, sorting by total expenditures, then filtering out the households that spent nothing\n",
    "    one_year_df = one_year(df, year)\n",
    "    one_year_df = one_year_df.reset_index().sort_values('Total Expenditures', axis=0).replace(0,np.nan)\n",
    "    one_year_df = one_year_df.dropna(axis=0, how='any', subset=['Total Expenditures'])\n",
    "    \n",
    "    # Number of rows for each quartile\n",
    "    total_rows = len(one_year_df)\n",
    "    rows_per_qtr = round(total_rows / 4)\n",
    "    \n",
    "    # Selecting the necessary rows for each quartile\n",
    "    if quartile == 1:\n",
    "        return one_year_df.iloc[0:rows_per_qtr-1]\n",
    "    else:\n",
    "        first_row = (quartile-1) * rows_per_qtr\n",
    "        last_row = (quartile * rows_per_qtr) - 1\n",
    "        return one_year_df.iloc[first_row:last_row]\n",
    "    \n",
    "def quartiles_by_epc(df, year, quartile):\n",
    "    # Selecting out one year, sorting by expenditures per capita, then filtering out the households that spent nothing\n",
    "    one_year_df = one_year(df, year)\n",
    "    one_year_df = one_year_df.reset_index().sort_values('Expenditures per capita', axis=0).replace(0,np.nan)\n",
    "    one_year_df = one_year_df.dropna(axis=0, how='any', subset=['Expenditures per capita'])\n",
    "    \n",
    "    # Number of rows for each quartile\n",
    "    total_rows = len(one_year_df)\n",
    "    rows_per_qtr = round(total_rows / 4)\n",
    "    \n",
    "    # Selecting the necessary rows for each quartile\n",
    "    if quartile == 1:\n",
    "        return one_year_df.iloc[0:rows_per_qtr-1]\n",
    "    else:\n",
    "        first_row = (quartile-1) * rows_per_qtr\n",
    "        last_row = (quartile * rows_per_qtr) - 1\n",
    "        return one_year_df.iloc[first_row:last_row]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "      <th>Total Expenditures</th>\n",
       "      <th>People per HH</th>\n",
       "      <th>Expenditures per capita</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"11\" valign=\"top\">2018</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>...</td>\n",
       "      <td>400.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>700.0</td>\n",
       "      <td>13200.0</td>\n",
       "      <td>6</td>\n",
       "      <td>2200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>...</td>\n",
       "      <td>400.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20260.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4052.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>2200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>400.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1750.0</td>\n",
       "      <td>36950.0</td>\n",
       "      <td>6</td>\n",
       "      <td>6158.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>18890.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4722.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10005</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>6</td>\n",
       "      <td>266.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>31100.0</td>\n",
       "      <td>4</td>\n",
       "      <td>7775.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>700.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>6410.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6410.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>900.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>600.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>20540.0</td>\n",
       "      <td>5</td>\n",
       "      <td>4108.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>200.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650.0</td>\n",
       "      <td>22650.0</td>\n",
       "      <td>2</td>\n",
       "      <td>11325.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>950.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>300.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>7550.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1887.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4976 rows × 127 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2018 10001  1                      NaN              300.0         NaN     NaN   \n",
       "     10002  1                      NaN                NaN         NaN     NaN   \n",
       "     10003  1                      NaN              300.0         NaN   400.0   \n",
       "     10004  1                      NaN              300.0         NaN     NaN   \n",
       "     10005  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "     379146 1                      NaN             1100.0         NaN     NaN   \n",
       "     379148 1                    100.0                NaN         NaN     NaN   \n",
       "     379151 1                      NaN              900.0         NaN     NaN   \n",
       "     379154 1                    200.0             1200.0         NaN     NaN   \n",
       "     379155 1                    100.0              950.0         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder  Bananas    Beef  \\\n",
       "t    j      m                                                    \n",
       "2018 10001  1           NaN               NaN    300.0  1200.0   \n",
       "     10002  1           NaN               NaN      NaN  1200.0   \n",
       "     10003  1           NaN               NaN    300.0  2200.0   \n",
       "     10004  1           NaN               NaN    100.0  1000.0   \n",
       "     10005  1           NaN               NaN      NaN  1000.0   \n",
       "...                     ...               ...      ...     ...   \n",
       "     379146 1           NaN               NaN      NaN     NaN   \n",
       "     379148 1           NaN               NaN      NaN   700.0   \n",
       "     379151 1           NaN               NaN    500.0     NaN   \n",
       "     379154 1           NaN               NaN      NaN  1300.0   \n",
       "     379155 1           NaN               NaN      NaN  1400.0   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Tomatoes  Watermelon  \\\n",
       "t    j      m                                       ...                         \n",
       "2018 10001  1                        NaN     150.0  ...     400.0       300.0   \n",
       "     10002  1                        NaN     150.0  ...     400.0       500.0   \n",
       "     10003  1                        NaN       NaN  ...     400.0       300.0   \n",
       "     10004  1                        NaN     100.0  ...     200.0         NaN   \n",
       "     10005  1                        NaN       NaN  ...     100.0         NaN   \n",
       "...                                  ...       ...  ...       ...         ...   \n",
       "     379146 1                        NaN       NaN  ...       NaN       500.0   \n",
       "     379148 1                        NaN       NaN  ...     200.0       150.0   \n",
       "     379151 1                        NaN       NaN  ...     600.0       600.0   \n",
       "     379154 1                        NaN       NaN  ...     100.0       200.0   \n",
       "     379155 1                        NaN       NaN  ...     300.0       200.0   \n",
       "\n",
       "i              Wheat flour  White beans  Wild game meat  Yam flour  Yam-roots  \\\n",
       "t    j      m                                                                   \n",
       "2018 10001  1          NaN       1000.0             NaN        NaN      700.0   \n",
       "     10002  1          NaN          NaN             NaN        NaN        NaN   \n",
       "     10003  1        900.0       1000.0             NaN        NaN     1750.0   \n",
       "     10004  1          NaN          NaN             NaN        NaN      600.0   \n",
       "     10005  1          NaN          NaN             NaN        NaN        NaN   \n",
       "...                    ...          ...             ...        ...        ...   \n",
       "     379146 1          NaN          NaN             NaN        NaN     1800.0   \n",
       "     379148 1          NaN          NaN             NaN        NaN     1600.0   \n",
       "     379151 1        750.0       1600.0             NaN        NaN     3500.0   \n",
       "     379154 1          NaN          NaN             NaN        NaN      650.0   \n",
       "     379155 1          NaN          NaN             NaN        NaN     2500.0   \n",
       "\n",
       "i              Total Expenditures  People per HH  Expenditures per capita  \n",
       "t    j      m                                                              \n",
       "2018 10001  1             13200.0              6              2200.000000  \n",
       "     10002  1             20260.0              5              4052.000000  \n",
       "     10003  1             36950.0              6              6158.333333  \n",
       "     10004  1             18890.0              4              4722.500000  \n",
       "     10005  1              1600.0              6               266.666667  \n",
       "...                           ...            ...                      ...  \n",
       "     379146 1             31100.0              4              7775.000000  \n",
       "     379148 1              6410.0              1              6410.000000  \n",
       "     379151 1             20540.0              5              4108.000000  \n",
       "     379154 1             22650.0              2             11325.000000  \n",
       "     379155 1              7550.0              4              1887.500000  \n",
       "\n",
       "[4976 rows x 127 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_year(expend, 2018)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the above functions, we were able to find the upper (fourth) and lower (first) quartiles in 2010 by total expenditures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>i</th>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>...</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "      <th>Total Expenditures</th>\n",
       "      <th>People per HH</th>\n",
       "      <th>Expenditures per capita</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2659</th>\n",
       "      <td>2010</td>\n",
       "      <td>200065</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>70.0</td>\n",
       "      <td>6</td>\n",
       "      <td>11.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>899</th>\n",
       "      <td>2010</td>\n",
       "      <td>70086</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4633</th>\n",
       "      <td>2010</td>\n",
       "      <td>350063</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>4</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3394</th>\n",
       "      <td>2010</td>\n",
       "      <td>260068</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>4</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2944</th>\n",
       "      <td>2010</td>\n",
       "      <td>220071</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1815</th>\n",
       "      <td>2010</td>\n",
       "      <td>140071</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>140.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1970.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1631</th>\n",
       "      <td>2010</td>\n",
       "      <td>120055</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>4</td>\n",
       "      <td>492.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>602</th>\n",
       "      <td>2010</td>\n",
       "      <td>50023</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>5</td>\n",
       "      <td>394.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4145</th>\n",
       "      <td>2010</td>\n",
       "      <td>310043</td>\n",
       "      <td>1</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>12</td>\n",
       "      <td>165.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213</th>\n",
       "      <td>2010</td>\n",
       "      <td>20107</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>5</td>\n",
       "      <td>396.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1201 rows × 130 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i        t       j  m  (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  \\\n",
       "2659  2010  200065  1                      NaN                NaN         NaN   \n",
       "899   2010   70086  1                      NaN                NaN         NaN   \n",
       "4633  2010  350063  1                      NaN                NaN         NaN   \n",
       "3394  2010  260068  1                      NaN                NaN         NaN   \n",
       "2944  2010  220071  1                      NaN                NaN         NaN   \n",
       "...    ...     ... ..                      ...                ...         ...   \n",
       "1815  2010  140071  1                      NaN                NaN         NaN   \n",
       "1631  2010  120055  1                      NaN                NaN         NaN   \n",
       "602   2010   50023  1                      NaN                NaN         NaN   \n",
       "4145  2010  310043  1                     50.0                NaN         NaN   \n",
       "213   2010   20107  1                      NaN                NaN         NaN   \n",
       "\n",
       "i     Apples  Avocado pear  Baby milk powder  Bananas  ...  Tomatoes  \\\n",
       "2659     NaN           NaN               NaN      NaN  ...       NaN   \n",
       "899      NaN           NaN               NaN      NaN  ...       NaN   \n",
       "4633     NaN           NaN               NaN      NaN  ...       NaN   \n",
       "3394     NaN           NaN               NaN      NaN  ...       NaN   \n",
       "2944     NaN           NaN               NaN      NaN  ...       NaN   \n",
       "...      ...           ...               ...      ...  ...       ...   \n",
       "1815     NaN           NaN               NaN      NaN  ...       NaN   \n",
       "1631     NaN           NaN               NaN      NaN  ...     100.0   \n",
       "602      NaN           NaN               NaN      NaN  ...     150.0   \n",
       "4145     NaN           NaN               NaN      NaN  ...     120.0   \n",
       "213      NaN           NaN               NaN      NaN  ...     100.0   \n",
       "\n",
       "i     Watermelon  Wheat flour  White beans  Wild game meat  Yam flour  \\\n",
       "2659         NaN          NaN          NaN             NaN        NaN   \n",
       "899          NaN          NaN          NaN             NaN        NaN   \n",
       "4633         NaN          NaN          NaN             NaN        NaN   \n",
       "3394         NaN          NaN          NaN             NaN        NaN   \n",
       "2944         NaN          NaN          NaN             NaN        NaN   \n",
       "...          ...          ...          ...             ...        ...   \n",
       "1815         NaN          NaN        140.0             NaN        NaN   \n",
       "1631         NaN          NaN        180.0             NaN        NaN   \n",
       "602          NaN          NaN          NaN             NaN        NaN   \n",
       "4145         NaN          NaN          NaN             NaN        NaN   \n",
       "213          NaN          NaN          NaN             NaN        NaN   \n",
       "\n",
       "i     Yam-roots  Total Expenditures  People per HH  Expenditures per capita  \n",
       "2659        NaN                70.0              6                11.666667  \n",
       "899         NaN               100.0              1               100.000000  \n",
       "4633        NaN               100.0              4                25.000000  \n",
       "3394        NaN               100.0              4                25.000000  \n",
       "2944        NaN               100.0              1               100.000000  \n",
       "...         ...                 ...            ...                      ...  \n",
       "1815      600.0              1970.0              1              1970.000000  \n",
       "1631        NaN              1970.0              4               492.500000  \n",
       "602         NaN              1970.0              5               394.000000  \n",
       "4145        NaN              1980.0             12               165.000000  \n",
       "213         NaN              1980.0              5               396.000000  \n",
       "\n",
       "[1201 rows x 130 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q1_2010_TE = quartiles_by_te(expend, 2010, 1)\n",
    "Q1_2010_TE\n",
    "#TE is total expenditure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>i</th>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>...</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "      <th>Total Expenditures</th>\n",
       "      <th>People per HH</th>\n",
       "      <th>Expenditures per capita</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2408</th>\n",
       "      <td>2010</td>\n",
       "      <td>190012</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5405.0</td>\n",
       "      <td>10</td>\n",
       "      <td>540.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2410</th>\n",
       "      <td>2010</td>\n",
       "      <td>190015</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>250.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5410.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2705.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025</th>\n",
       "      <td>2010</td>\n",
       "      <td>160062</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>5410.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1803.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4753</th>\n",
       "      <td>2010</td>\n",
       "      <td>360056</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5410.0</td>\n",
       "      <td>11</td>\n",
       "      <td>491.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4024</th>\n",
       "      <td>2010</td>\n",
       "      <td>300148</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5410.0</td>\n",
       "      <td>8</td>\n",
       "      <td>676.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2403</th>\n",
       "      <td>2010</td>\n",
       "      <td>190007</td>\n",
       "      <td>1</td>\n",
       "      <td>80.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>250.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35120.0</td>\n",
       "      <td>11</td>\n",
       "      <td>3192.727273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2299</th>\n",
       "      <td>2010</td>\n",
       "      <td>180019</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>560.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>35190.0</td>\n",
       "      <td>6</td>\n",
       "      <td>5865.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3282</th>\n",
       "      <td>2010</td>\n",
       "      <td>250025</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24000.0</td>\n",
       "      <td>37530.0</td>\n",
       "      <td>10</td>\n",
       "      <td>3753.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3277</th>\n",
       "      <td>2010</td>\n",
       "      <td>250020</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32000.0</td>\n",
       "      <td>44630.0</td>\n",
       "      <td>6</td>\n",
       "      <td>7438.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4005</th>\n",
       "      <td>2010</td>\n",
       "      <td>300125</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>700.0</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>45240.0</td>\n",
       "      <td>4</td>\n",
       "      <td>11310.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1201 rows × 130 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i        t       j  m  (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  \\\n",
       "2408  2010  190012  1                      NaN                NaN         NaN   \n",
       "2410  2010  190015  1                      NaN                NaN         NaN   \n",
       "2025  2010  160062  1                      NaN                NaN         NaN   \n",
       "4753  2010  360056  1                      NaN                NaN         NaN   \n",
       "4024  2010  300148  1                      NaN                NaN         NaN   \n",
       "...    ...     ... ..                      ...                ...         ...   \n",
       "2403  2010  190007  1                     80.0                NaN         NaN   \n",
       "2299  2010  180019  1                      NaN              100.0         NaN   \n",
       "3282  2010  250025  1                      NaN                NaN         NaN   \n",
       "3277  2010  250020  1                      NaN                NaN         NaN   \n",
       "4005  2010  300125  1                      NaN             2100.0         NaN   \n",
       "\n",
       "i     Apples  Avocado pear  Baby milk powder  Bananas  ...  Tomatoes  \\\n",
       "2408     NaN           NaN               NaN      NaN  ...     300.0   \n",
       "2410     NaN           NaN               NaN      NaN  ...     150.0   \n",
       "2025     NaN           NaN               NaN    200.0  ...      50.0   \n",
       "4753     NaN           NaN               NaN      NaN  ...     120.0   \n",
       "4024     NaN           NaN               NaN      NaN  ...     100.0   \n",
       "...      ...           ...               ...      ...  ...       ...   \n",
       "2403     NaN           NaN            1100.0      NaN  ...     250.0   \n",
       "2299     NaN           NaN               NaN      NaN  ...     500.0   \n",
       "3282     NaN           NaN               NaN      NaN  ...       NaN   \n",
       "3277     NaN           NaN               NaN      NaN  ...     100.0   \n",
       "4005     NaN           NaN               NaN    700.0  ...     200.0   \n",
       "\n",
       "i     Watermelon  Wheat flour  White beans  Wild game meat  Yam flour  \\\n",
       "2408         NaN          NaN        300.0             NaN        NaN   \n",
       "2410         NaN          NaN        250.0             NaN        NaN   \n",
       "2025         NaN          NaN        300.0             NaN        NaN   \n",
       "4753         NaN          NaN        200.0             NaN        NaN   \n",
       "4024         NaN          NaN          NaN             NaN        NaN   \n",
       "...          ...          ...          ...             ...        ...   \n",
       "2403         NaN          NaN       1500.0             NaN        NaN   \n",
       "2299         NaN          NaN        560.0             NaN        NaN   \n",
       "3282         NaN          NaN          NaN             NaN        NaN   \n",
       "3277         NaN          NaN       1200.0             NaN        NaN   \n",
       "4005         NaN       1400.0          NaN             NaN     4000.0   \n",
       "\n",
       "i     Yam-roots  Total Expenditures  People per HH  Expenditures per capita  \n",
       "2408        NaN              5405.0             10               540.500000  \n",
       "2410        NaN              5410.0              2              2705.000000  \n",
       "2025      500.0              5410.0              3              1803.333333  \n",
       "4753        NaN              5410.0             11               491.818182  \n",
       "4024        NaN              5410.0              8               676.250000  \n",
       "...         ...                 ...            ...                      ...  \n",
       "2403        NaN             35120.0             11              3192.727273  \n",
       "2299     2000.0             35190.0              6              5865.000000  \n",
       "3282    24000.0             37530.0             10              3753.000000  \n",
       "3277    32000.0             44630.0              6              7438.333333  \n",
       "4005     1500.0             45240.0              4             11310.000000  \n",
       "\n",
       "[1201 rows x 130 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q4_2010 = quartiles_by_te(expend, 2010, 4)\n",
    "Q4_2010\n",
    "#TE is total expenditure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Expenditures per capita (EPC) is more representative of the household spending as it takes into account the amount of people in the home. Therefore, we will be using EPC for our analysis. Below we have found the upper and lower quartiles for all of the years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10013</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379090</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379092</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379094</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>250.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379096</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379127</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>350.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10013  1                      NaN                NaN         NaN     NaN   \n",
       "     10022  1                      NaN                NaN         NaN     NaN   \n",
       "     10063  1                      NaN                NaN         NaN     NaN   \n",
       "     10066  1                      NaN                NaN         NaN     NaN   \n",
       "     10069  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379090 1                      NaN                NaN         NaN     NaN   \n",
       "     379092 1                      NaN                NaN         NaN     NaN   \n",
       "     379094 1                      NaN                NaN         NaN     NaN   \n",
       "     379096 1                      NaN                NaN         NaN     NaN   \n",
       "     379127 1                      NaN                NaN         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder  Bananas   Beef  \\\n",
       "t    j      m                                                   \n",
       "2010 10013  1           NaN               NaN    100.0  400.0   \n",
       "     10022  1           NaN               NaN    150.0    NaN   \n",
       "     10063  1           NaN               NaN      NaN    NaN   \n",
       "     10066  1           NaN               NaN      NaN  300.0   \n",
       "     10069  1           NaN               NaN      NaN    NaN   \n",
       "...                     ...               ...      ...    ...   \n",
       "2018 379090 1           NaN               NaN      NaN  500.0   \n",
       "     379092 1           NaN               NaN      NaN    NaN   \n",
       "     379094 1           NaN               NaN      NaN    NaN   \n",
       "     379096 1           NaN               NaN      NaN    NaN   \n",
       "     379127 1           NaN               NaN    150.0    NaN   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Sweet Potatoes   Tea  \\\n",
       "t    j      m                                       ...                         \n",
       "2010 10013  1                        NaN       NaN  ...             NaN  30.0   \n",
       "     10022  1                        NaN       NaN  ...             NaN   NaN   \n",
       "     10063  1                        NaN       NaN  ...             NaN   NaN   \n",
       "     10066  1                        NaN       NaN  ...             NaN   NaN   \n",
       "     10069  1                        NaN       NaN  ...             NaN   NaN   \n",
       "...                                  ...       ...  ...             ...   ...   \n",
       "2018 379090 1                        NaN       NaN  ...             NaN   NaN   \n",
       "     379092 1                        NaN       NaN  ...             NaN  50.0   \n",
       "     379094 1                        NaN     120.0  ...             NaN   NaN   \n",
       "     379096 1                        NaN       NaN  ...             NaN   NaN   \n",
       "     379127 1                        NaN       NaN  ...             NaN   NaN   \n",
       "\n",
       "i              Tomato puree(canned)  Tomatoes  Watermelon  Wheat flour  \\\n",
       "t    j      m                                                            \n",
       "2010 10013  1                  60.0     100.0         NaN          NaN   \n",
       "     10022  1                  30.0      50.0         NaN          NaN   \n",
       "     10063  1                  35.0     100.0         NaN          NaN   \n",
       "     10066  1                  35.0     100.0         NaN          NaN   \n",
       "     10069  1                   NaN     100.0         NaN          NaN   \n",
       "...                             ...       ...         ...          ...   \n",
       "2018 379090 1                   NaN     200.0         NaN          NaN   \n",
       "     379092 1                   NaN       NaN         NaN          NaN   \n",
       "     379094 1                   NaN     250.0         NaN          NaN   \n",
       "     379096 1                   NaN     300.0         NaN          NaN   \n",
       "     379127 1                 350.0       NaN       200.0          NaN   \n",
       "\n",
       "i              White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                     \n",
       "2010 10013  1        100.0             NaN        NaN      200.0  \n",
       "     10022  1        200.0             NaN        NaN        NaN  \n",
       "     10063  1          NaN             NaN        NaN        NaN  \n",
       "     10066  1        100.0             NaN        NaN        NaN  \n",
       "     10069  1          NaN             NaN        NaN      300.0  \n",
       "...                    ...             ...        ...        ...  \n",
       "2018 379090 1          NaN             NaN        NaN        NaN  \n",
       "     379092 1          NaN             NaN        NaN        NaN  \n",
       "     379094 1          NaN             NaN        NaN        NaN  \n",
       "     379096 1          NaN             NaN        NaN        NaN  \n",
       "     379127 1          NaN             NaN        NaN        NaN  \n",
       "\n",
       "[4752 rows x 124 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q1_10 = quartiles_by_epc(expend, 2010, 1)\n",
    "Q1_12 = quartiles_by_epc(expend, 2012, 1)\n",
    "Q1_15 = quartiles_by_epc(expend, 2015, 1)\n",
    "Q1_18 = quartiles_by_epc(expend, 2018, 1)\n",
    "Q1 = pd.concat([Q1_10, Q1_12, Q1_15, Q1_18]).reset_index().drop(columns=['index']).set_index(['t', 'j', 'm']).sort_values(['t','j'])\n",
    "Q1 = Q1.drop(columns=['Total Expenditures', 'People per HH', 'Expenditures per capita']) \n",
    "Q1\n",
    "#epc is expenditure per capita"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>540.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>280.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>200.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>180.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10009</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>270.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379144</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>900.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2200.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>3500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>100.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>700.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>900.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>150.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>200.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>650.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1                      NaN              280.0         NaN     NaN   \n",
       "     10002  1                      NaN              280.0         NaN     NaN   \n",
       "     10004  1                      NaN              180.0         NaN     NaN   \n",
       "     10006  1                      NaN                NaN         NaN     NaN   \n",
       "     10009  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379144 1                      NaN                NaN         NaN   900.0   \n",
       "     379146 1                      NaN             1100.0         NaN     NaN   \n",
       "     379148 1                    100.0                NaN         NaN     NaN   \n",
       "     379151 1                      NaN              900.0         NaN     NaN   \n",
       "     379154 1                    200.0             1200.0         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder  Bananas    Beef  \\\n",
       "t    j      m                                                    \n",
       "2010 10001  1           NaN               NaN    200.0   500.0   \n",
       "     10002  1           NaN               NaN    180.0  1200.0   \n",
       "     10004  1           NaN               NaN    100.0   500.0   \n",
       "     10006  1           NaN               NaN    300.0   300.0   \n",
       "     10009  1           NaN             600.0    100.0   300.0   \n",
       "...                     ...               ...      ...     ...   \n",
       "2018 379144 1           NaN               NaN    600.0     NaN   \n",
       "     379146 1           NaN               NaN      NaN     NaN   \n",
       "     379148 1           NaN               NaN      NaN   700.0   \n",
       "     379151 1           NaN               NaN    500.0     NaN   \n",
       "     379154 1           NaN               NaN      NaN  1300.0   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Sweet Potatoes  \\\n",
       "t    j      m                                       ...                   \n",
       "2010 10001  1                      540.0       NaN  ...           150.0   \n",
       "     10002  1                     2000.0       NaN  ...           200.0   \n",
       "     10004  1                        NaN       NaN  ...             NaN   \n",
       "     10006  1                        NaN       NaN  ...             NaN   \n",
       "     10009  1                        NaN       NaN  ...             NaN   \n",
       "...                                  ...       ...  ...             ...   \n",
       "2018 379144 1                        NaN    2200.0  ...             NaN   \n",
       "     379146 1                        NaN       NaN  ...             NaN   \n",
       "     379148 1                        NaN       NaN  ...             NaN   \n",
       "     379151 1                        NaN       NaN  ...             NaN   \n",
       "     379154 1                        NaN       NaN  ...             NaN   \n",
       "\n",
       "i                Tea  Tomato puree(canned)  Tomatoes  Watermelon  Wheat flour  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1    NaN                 150.0     150.0         NaN          NaN   \n",
       "     10002  1  140.0                 240.0     120.0         NaN          NaN   \n",
       "     10004  1   30.0                  60.0     100.0         NaN          NaN   \n",
       "     10006  1  650.0                   NaN     400.0         NaN          NaN   \n",
       "     10009  1   60.0                 120.0     200.0         NaN          NaN   \n",
       "...              ...                   ...       ...         ...          ...   \n",
       "2018 379144 1    NaN                   NaN     400.0       100.0          NaN   \n",
       "     379146 1    NaN                   NaN       NaN       500.0          NaN   \n",
       "     379148 1    NaN                  60.0     200.0       150.0          NaN   \n",
       "     379151 1    NaN                 150.0     600.0       600.0        750.0   \n",
       "     379154 1    NaN                   NaN     100.0       200.0          NaN   \n",
       "\n",
       "i              White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                     \n",
       "2010 10001  1        600.0             NaN        NaN     1500.0  \n",
       "     10002  1        400.0             NaN        NaN     1200.0  \n",
       "     10004  1        100.0             NaN        NaN      400.0  \n",
       "     10006  1          NaN             NaN        NaN      400.0  \n",
       "     10009  1        270.0             NaN        NaN      400.0  \n",
       "...                    ...             ...        ...        ...  \n",
       "2018 379144 1          NaN             NaN     1100.0     3500.0  \n",
       "     379146 1          NaN             NaN        NaN     1800.0  \n",
       "     379148 1          NaN             NaN        NaN     1600.0  \n",
       "     379151 1       1600.0             NaN        NaN     3500.0  \n",
       "     379154 1          NaN             NaN        NaN      650.0  \n",
       "\n",
       "[4752 rows x 124 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q4_10 = quartiles_by_epc(expend, 2010, 4)\n",
    "Q4_12 = quartiles_by_epc(expend, 2012, 4)\n",
    "Q4_15 = quartiles_by_epc(expend, 2015, 4)\n",
    "Q4_18 = quartiles_by_epc(expend, 2018, 4)\n",
    "Q4 = pd.concat([Q4_10, Q4_12, Q4_15, Q4_18]).reset_index().drop(columns=['index']).set_index(['t', 'j', 'm']).sort_values(['t','j'])\n",
    "Q4 = Q4.drop(columns=['Total Expenditures', 'People per HH', 'Expenditures per capita']) \n",
    "Q4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filter Household Dataframe to create one only including 1st quartile households and another including just 4th quartile households."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>k</th>\n",
       "      <th>M 0-3</th>\n",
       "      <th>M 4-8</th>\n",
       "      <th>M 9-13</th>\n",
       "      <th>M 14-18</th>\n",
       "      <th>M 19-30</th>\n",
       "      <th>M 31-50</th>\n",
       "      <th>M 51+</th>\n",
       "      <th>F 0-3</th>\n",
       "      <th>F 4-8</th>\n",
       "      <th>F 9-13</th>\n",
       "      <th>F 14-18</th>\n",
       "      <th>F 19-30</th>\n",
       "      <th>F 31-50</th>\n",
       "      <th>F 51+</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10013</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379090</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379092</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379094</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379096</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379127</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "k              M 0-3  M 4-8  M 9-13  M 14-18  M 19-30  M 31-50  M 51+  F 0-3  \\\n",
       "t    j      m                                                                  \n",
       "2010 10013  1      0      0       0        0        0        2      0      1   \n",
       "     10022  1      0      1       1        1        0        1      0      0   \n",
       "     10063  1      0      0       0        0        3        0      1      0   \n",
       "     10066  1      0      0       0        1        0        0      1      0   \n",
       "     10069  1      0      0       0        0        1        0      0      0   \n",
       "...              ...    ...     ...      ...      ...      ...    ...    ...   \n",
       "2018 379090 1      1      0       2        0        0        1      0      0   \n",
       "     379092 1      0      0       1        0        1        0      0      2   \n",
       "     379094 1      1      0       0        0        0        1      0      0   \n",
       "     379096 1      0      1       1        1        0        1      0      0   \n",
       "     379127 1      1      0       0        0        0        1      0      0   \n",
       "\n",
       "k              F 4-8  F 9-13  F 14-18  F 19-30  F 31-50  F 51+  \n",
       "t    j      m                                                   \n",
       "2010 10013  1      0       0        1        2        1      1  \n",
       "     10022  1      0       1        0        0        1      0  \n",
       "     10063  1      0       0        0        0        0      1  \n",
       "     10066  1      0       0        2        1        1      0  \n",
       "     10069  1      0       1        1        3        0      1  \n",
       "...              ...     ...      ...      ...      ...    ...  \n",
       "2018 379090 1      1       0        2        0        1      1  \n",
       "     379092 1      2       0        0        2        0      0  \n",
       "     379094 1      1       1        0        1        0      0  \n",
       "     379096 1      1       0        1        1        1      0  \n",
       "     379127 1      0       1        0        1        0      0  \n",
       "\n",
       "[4752 rows x 14 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#First Quartile\n",
    "hh_char = hh_char.reorder_levels(['t','j','m'])\n",
    "Q1Index = Q1.index.tolist()\n",
    "Q4Index = Q4.index.tolist()\n",
    "hh_charQ1 = hh_char[hh_char.index.isin(Q1Index)]\n",
    "hh_charQ4 = hh_char[hh_char.index.isin(Q4Index)]\n",
    "hh_charQ1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>k</th>\n",
       "      <th>M 0-3</th>\n",
       "      <th>M 4-8</th>\n",
       "      <th>M 9-13</th>\n",
       "      <th>M 14-18</th>\n",
       "      <th>M 19-30</th>\n",
       "      <th>M 31-50</th>\n",
       "      <th>M 51+</th>\n",
       "      <th>F 0-3</th>\n",
       "      <th>F 4-8</th>\n",
       "      <th>F 9-13</th>\n",
       "      <th>F 14-18</th>\n",
       "      <th>F 19-30</th>\n",
       "      <th>F 31-50</th>\n",
       "      <th>F 51+</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10009</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379144</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "k              M 0-3  M 4-8  M 9-13  M 14-18  M 19-30  M 31-50  M 51+  F 0-3  \\\n",
       "t    j      m                                                                  \n",
       "2010 10001  1      0      0       0        0        1        2      0      1   \n",
       "     10002  1      0      0       1        1        1        1      0      0   \n",
       "     10004  1      0      0       1        0        0        0      1      0   \n",
       "     10006  1      0      0       0        0        1        1      0      0   \n",
       "     10009  1      0      0       0        0        0        1      0      1   \n",
       "...              ...    ...     ...      ...      ...      ...    ...    ...   \n",
       "2018 379144 1      0      0       0        0        0        1      0      0   \n",
       "     379146 1      0      0       0        0        1        1      1      0   \n",
       "     379148 1      0      0       0        0        1        0      0      0   \n",
       "     379151 1      0      0       2        0        0        0      1      0   \n",
       "     379154 1      0      0       0        0        0        0      1      0   \n",
       "\n",
       "k              F 4-8  F 9-13  F 14-18  F 19-30  F 31-50  F 51+  \n",
       "t    j      m                                                   \n",
       "2010 10001  1      0       0        0        1        2      0  \n",
       "     10002  1      0       0        0        2        1      0  \n",
       "     10004  1      0       0        0        0        0      1  \n",
       "     10006  1      0       0        0        1        0      0  \n",
       "     10009  1      0       0        1        1        0      0  \n",
       "...              ...     ...      ...      ...      ...    ...  \n",
       "2018 379144 1      1       0        0        1        0      0  \n",
       "     379146 1      0       0        0        0        0      1  \n",
       "     379148 1      0       0        0        0        0      0  \n",
       "     379151 1      0       0        1        0        1      0  \n",
       "     379154 1      0       0        0        1        0      0  \n",
       "\n",
       "[4752 rows x 14 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fourth Quartile\n",
    "hh_charQ4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Log of Food Expenditure Dataframe (after running np.log on values)\n",
    "\n",
    "Q1 = Q1.replace(0,np.nan) \n",
    "Q4 = Q4.replace(0,np.nan) \n",
    "\n",
    "log_Q1 = np.log(Q1)\n",
    "log_Q4 = np.log(Q4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10013</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>5.991465</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>4.094345</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.010635</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>3.912023</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.555348</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.703782</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.555348</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.703782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379090</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.214608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379092</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.912023</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379094</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.787492</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.521461</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379096</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.703782</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379127</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.010635</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.857933</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10013  1                      NaN                NaN         NaN     NaN   \n",
       "     10022  1                      NaN                NaN         NaN     NaN   \n",
       "     10063  1                      NaN                NaN         NaN     NaN   \n",
       "     10066  1                      NaN                NaN         NaN     NaN   \n",
       "     10069  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379090 1                      NaN                NaN         NaN     NaN   \n",
       "     379092 1                      NaN                NaN         NaN     NaN   \n",
       "     379094 1                      NaN                NaN         NaN     NaN   \n",
       "     379096 1                      NaN                NaN         NaN     NaN   \n",
       "     379127 1                      NaN                NaN         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder   Bananas      Beef  \\\n",
       "t    j      m                                                       \n",
       "2010 10013  1           NaN               NaN  4.605170  5.991465   \n",
       "     10022  1           NaN               NaN  5.010635       NaN   \n",
       "     10063  1           NaN               NaN       NaN       NaN   \n",
       "     10066  1           NaN               NaN       NaN  5.703782   \n",
       "     10069  1           NaN               NaN       NaN       NaN   \n",
       "...                     ...               ...       ...       ...   \n",
       "2018 379090 1           NaN               NaN       NaN  6.214608   \n",
       "     379092 1           NaN               NaN       NaN       NaN   \n",
       "     379094 1           NaN               NaN       NaN       NaN   \n",
       "     379096 1           NaN               NaN       NaN       NaN   \n",
       "     379127 1           NaN               NaN  5.010635       NaN   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Sweet Potatoes  \\\n",
       "t    j      m                                       ...                   \n",
       "2010 10013  1                        NaN       NaN  ...             NaN   \n",
       "     10022  1                        NaN       NaN  ...             NaN   \n",
       "     10063  1                        NaN       NaN  ...             NaN   \n",
       "     10066  1                        NaN       NaN  ...             NaN   \n",
       "     10069  1                        NaN       NaN  ...             NaN   \n",
       "...                                  ...       ...  ...             ...   \n",
       "2018 379090 1                        NaN       NaN  ...             NaN   \n",
       "     379092 1                        NaN       NaN  ...             NaN   \n",
       "     379094 1                        NaN  4.787492  ...             NaN   \n",
       "     379096 1                        NaN       NaN  ...             NaN   \n",
       "     379127 1                        NaN       NaN  ...             NaN   \n",
       "\n",
       "i                   Tea  Tomato puree(canned)  Tomatoes  Watermelon  \\\n",
       "t    j      m                                                         \n",
       "2010 10013  1  3.401197              4.094345  4.605170         NaN   \n",
       "     10022  1       NaN              3.401197  3.912023         NaN   \n",
       "     10063  1       NaN              3.555348  4.605170         NaN   \n",
       "     10066  1       NaN              3.555348  4.605170         NaN   \n",
       "     10069  1       NaN                   NaN  4.605170         NaN   \n",
       "...                 ...                   ...       ...         ...   \n",
       "2018 379090 1       NaN                   NaN  5.298317         NaN   \n",
       "     379092 1  3.912023                   NaN       NaN         NaN   \n",
       "     379094 1       NaN                   NaN  5.521461         NaN   \n",
       "     379096 1       NaN                   NaN  5.703782         NaN   \n",
       "     379127 1       NaN              5.857933       NaN    5.298317   \n",
       "\n",
       "i              Wheat flour  White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                                  \n",
       "2010 10013  1          NaN     4.605170             NaN        NaN   5.298317  \n",
       "     10022  1          NaN     5.298317             NaN        NaN        NaN  \n",
       "     10063  1          NaN          NaN             NaN        NaN        NaN  \n",
       "     10066  1          NaN     4.605170             NaN        NaN        NaN  \n",
       "     10069  1          NaN          NaN             NaN        NaN   5.703782  \n",
       "...                    ...          ...             ...        ...        ...  \n",
       "2018 379090 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379092 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379094 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379096 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379127 1          NaN          NaN             NaN        NaN        NaN  \n",
       "\n",
       "[4752 rows x 124 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_Q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Log Household Size and add to household dataframe for Q1 and Q4\n",
    "\n",
    "# set index to j, t, m so that df.sum() ignore index values\n",
    "hh_charQ1 = hh_charQ1.reset_index()\n",
    "hh_charQ1.set_index(['j','t','m'], inplace=True)\n",
    "hh_charQ4 = hh_charQ4.reset_index()\n",
    "hh_charQ4.set_index(['j','t','m'], inplace=True)\n",
    "\n",
    "# create new column of household size\n",
    "hh_charQ1['Hsize'] = hh_charQ1.sum(axis=1).values\n",
    "hh_charQ4['Hsize'] = hh_charQ4.sum(axis=1).values\n",
    "\n",
    "# remove erroneous data with household_size = 0\n",
    "hh_charQ1 = hh_charQ1[hh_charQ1['Hsize'] > 0]\n",
    "hh_charQ4 = hh_charQ4[hh_charQ4['Hsize'] > 0]\n",
    "\n",
    "# create new column 'log Hsize'\n",
    "hh_charQ1['log Hsize'] = np.log(hh_charQ1['Hsize'])\n",
    "hh_charQ4['log Hsize'] = np.log(hh_charQ4['Hsize'])\n",
    "\n",
    "# remove Hsize column\n",
    "hh_charQ1 = hh_charQ1.drop(columns=['Hsize']) \n",
    "hh_charQ4 = hh_charQ4.drop(columns=['Hsize']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>k</th>\n",
       "      <th>M 0-3</th>\n",
       "      <th>M 4-8</th>\n",
       "      <th>M 9-13</th>\n",
       "      <th>M 14-18</th>\n",
       "      <th>M 19-30</th>\n",
       "      <th>M 31-50</th>\n",
       "      <th>M 51+</th>\n",
       "      <th>F 0-3</th>\n",
       "      <th>F 4-8</th>\n",
       "      <th>F 9-13</th>\n",
       "      <th>F 14-18</th>\n",
       "      <th>F 19-30</th>\n",
       "      <th>F 31-50</th>\n",
       "      <th>F 51+</th>\n",
       "      <th>log Hsize</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>j</th>\n",
       "      <th>t</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10013</th>\n",
       "      <th>2010</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.079442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>2010</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.791759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>2010</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.609438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>2010</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.791759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>2010</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.945910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379090</th>\n",
       "      <th>2018</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.197225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379092</th>\n",
       "      <th>2018</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.079442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379094</th>\n",
       "      <th>2018</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.609438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379096</th>\n",
       "      <th>2018</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.079442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379127</th>\n",
       "      <th>2018</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.386294</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "k              M 0-3  M 4-8  M 9-13  M 14-18  M 19-30  M 31-50  M 51+  F 0-3  \\\n",
       "j      t    m                                                                  \n",
       "10013  2010 1      0      0       0        0        0        2      0      1   \n",
       "10022  2010 1      0      1       1        1        0        1      0      0   \n",
       "10063  2010 1      0      0       0        0        3        0      1      0   \n",
       "10066  2010 1      0      0       0        1        0        0      1      0   \n",
       "10069  2010 1      0      0       0        0        1        0      0      0   \n",
       "...              ...    ...     ...      ...      ...      ...    ...    ...   \n",
       "379090 2018 1      1      0       2        0        0        1      0      0   \n",
       "379092 2018 1      0      0       1        0        1        0      0      2   \n",
       "379094 2018 1      1      0       0        0        0        1      0      0   \n",
       "379096 2018 1      0      1       1        1        0        1      0      0   \n",
       "379127 2018 1      1      0       0        0        0        1      0      0   \n",
       "\n",
       "k              F 4-8  F 9-13  F 14-18  F 19-30  F 31-50  F 51+  log Hsize  \n",
       "j      t    m                                                              \n",
       "10013  2010 1      0       0        1        2        1      1   2.079442  \n",
       "10022  2010 1      0       1        0        0        1      0   1.791759  \n",
       "10063  2010 1      0       0        0        0        0      1   1.609438  \n",
       "10066  2010 1      0       0        2        1        1      0   1.791759  \n",
       "10069  2010 1      0       1        1        3        0      1   1.945910  \n",
       "...              ...     ...      ...      ...      ...    ...        ...  \n",
       "379090 2018 1      1       0        2        0        1      1   2.197225  \n",
       "379092 2018 1      2       0        0        2        0      0   2.079442  \n",
       "379094 2018 1      1       1        0        1        0      0   1.609438  \n",
       "379096 2018 1      1       0        1        1        1      0   2.079442  \n",
       "379127 2018 1      0       1        0        1        0      0   1.386294  \n",
       "\n",
       "[4752 rows x 15 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test\n",
    "hh_charQ1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below, we estimate the demand system for the upper and lower quartile households in Nigeria."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10013</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>5.991465</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>4.094345</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.010635</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>3.912023</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.555348</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.703782</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.555348</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.605170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.703782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379090</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.214608</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379092</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.912023</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379094</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.787492</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.521461</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379096</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.703782</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379127</th>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.010635</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.857933</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.298317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4752 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "i              (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10013  1                      NaN                NaN         NaN     NaN   \n",
       "     10022  1                      NaN                NaN         NaN     NaN   \n",
       "     10063  1                      NaN                NaN         NaN     NaN   \n",
       "     10066  1                      NaN                NaN         NaN     NaN   \n",
       "     10069  1                      NaN                NaN         NaN     NaN   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379090 1                      NaN                NaN         NaN     NaN   \n",
       "     379092 1                      NaN                NaN         NaN     NaN   \n",
       "     379094 1                      NaN                NaN         NaN     NaN   \n",
       "     379096 1                      NaN                NaN         NaN     NaN   \n",
       "     379127 1                      NaN                NaN         NaN     NaN   \n",
       "\n",
       "i              Avocado pear  Baby milk powder   Bananas      Beef  \\\n",
       "t    j      m                                                       \n",
       "2010 10013  1           NaN               NaN  4.605170  5.991465   \n",
       "     10022  1           NaN               NaN  5.010635       NaN   \n",
       "     10063  1           NaN               NaN       NaN       NaN   \n",
       "     10066  1           NaN               NaN       NaN  5.703782   \n",
       "     10069  1           NaN               NaN       NaN       NaN   \n",
       "...                     ...               ...       ...       ...   \n",
       "2018 379090 1           NaN               NaN       NaN  6.214608   \n",
       "     379092 1           NaN               NaN       NaN       NaN   \n",
       "     379094 1           NaN               NaN       NaN       NaN   \n",
       "     379096 1           NaN               NaN       NaN       NaN   \n",
       "     379127 1           NaN               NaN  5.010635       NaN   \n",
       "\n",
       "i              Beer (local and imported)  Biscuits  ...  Sweet Potatoes  \\\n",
       "t    j      m                                       ...                   \n",
       "2010 10013  1                        NaN       NaN  ...             NaN   \n",
       "     10022  1                        NaN       NaN  ...             NaN   \n",
       "     10063  1                        NaN       NaN  ...             NaN   \n",
       "     10066  1                        NaN       NaN  ...             NaN   \n",
       "     10069  1                        NaN       NaN  ...             NaN   \n",
       "...                                  ...       ...  ...             ...   \n",
       "2018 379090 1                        NaN       NaN  ...             NaN   \n",
       "     379092 1                        NaN       NaN  ...             NaN   \n",
       "     379094 1                        NaN  4.787492  ...             NaN   \n",
       "     379096 1                        NaN       NaN  ...             NaN   \n",
       "     379127 1                        NaN       NaN  ...             NaN   \n",
       "\n",
       "i                   Tea  Tomato puree(canned)  Tomatoes  Watermelon  \\\n",
       "t    j      m                                                         \n",
       "2010 10013  1  3.401197              4.094345  4.605170         NaN   \n",
       "     10022  1       NaN              3.401197  3.912023         NaN   \n",
       "     10063  1       NaN              3.555348  4.605170         NaN   \n",
       "     10066  1       NaN              3.555348  4.605170         NaN   \n",
       "     10069  1       NaN                   NaN  4.605170         NaN   \n",
       "...                 ...                   ...       ...         ...   \n",
       "2018 379090 1       NaN                   NaN  5.298317         NaN   \n",
       "     379092 1  3.912023                   NaN       NaN         NaN   \n",
       "     379094 1       NaN                   NaN  5.521461         NaN   \n",
       "     379096 1       NaN                   NaN  5.703782         NaN   \n",
       "     379127 1       NaN              5.857933       NaN    5.298317   \n",
       "\n",
       "i              Wheat flour  White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                                  \n",
       "2010 10013  1          NaN     4.605170             NaN        NaN   5.298317  \n",
       "     10022  1          NaN     5.298317             NaN        NaN        NaN  \n",
       "     10063  1          NaN          NaN             NaN        NaN        NaN  \n",
       "     10066  1          NaN     4.605170             NaN        NaN        NaN  \n",
       "     10069  1          NaN          NaN             NaN        NaN   5.703782  \n",
       "...                    ...          ...             ...        ...        ...  \n",
       "2018 379090 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379092 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379094 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379096 1          NaN          NaN             NaN        NaN        NaN  \n",
       "     379127 1          NaN          NaN             NaN        NaN        NaN  \n",
       "\n",
       "[4752 rows x 124 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_Q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_Q1 = log_Q1.reorder_levels(['j','t','m'])\n",
    "log_Q4 = log_Q4.reorder_levels(['j','t','m'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing dependencies for OracleDemands.\n"
     ]
    }
   ],
   "source": [
    "import cfe\n",
    "\n",
    "result1 = cfe.Result(y=log_Q1,z=hh_charQ1)\n",
    "result4 = cfe.Result(y=log_Q4,z=hh_charQ4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This creates a complicated &ldquo;Result&rdquo; object, with lots of different\n",
    "attributes.  Note from below that attributes $y$ and $z$ are now defined.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Result&gt;\n",
       "Dimensions:           (k: 15, j: 3197, t: 4, m: 1, i: 9)\n",
       "Coordinates:\n",
       "  * j                 (j) int64 10005 10009 10013 10022 ... 379094 379096 379127\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * i                 (i) &lt;U36 &#x27;Bread&#x27; ... &#x27;White beans&#x27;\n",
       "  * k                 (k) &lt;U9 &#x27;M 0-3&#x27; &#x27;M 4-8&#x27; &#x27;M 9-13&#x27; ... &#x27;F 51+&#x27; &#x27;log Hsize&#x27;\n",
       "Data variables: (12/20)\n",
       "    alpha             object None\n",
       "    beta              object None\n",
       "    delta             object None\n",
       "    prices            object None\n",
       "    characteristics   (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386\n",
       "    loglambdas        object None\n",
       "    ...                ...\n",
       "    se_beta           object None\n",
       "    se_alpha          object None\n",
       "    se_a              object None\n",
       "    y                 (i, j, t, m) float64 nan nan nan nan ... nan nan nan nan\n",
       "    logp              object None\n",
       "    z                 (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386\n",
       "Attributes:\n",
       "    firstround:            2010\n",
       "    min_proportion_items:  0.125\n",
       "    min_xproducts:         30\n",
       "    all_tm:                True\n",
       "    common_alpha:          True\n",
       "    useless_expenditures:  False\n",
       "    stderr_tol:            0.01\n",
       "    indices:               Indices(j=&#x27;j&#x27;, t=&#x27;t&#x27;, m=&#x27;m&#x27;, i=&#x27;i&#x27;, k=&#x27;k&#x27;)\n",
       "    iterate:               False\n",
       "    verbose:               False</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Result</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-c2c03975-93f3-4dee-857c-e8813c4141db' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-c2c03975-93f3-4dee-857c-e8813c4141db' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>k</span>: 15</li><li><span class='xr-has-index'>j</span>: 3197</li><li><span class='xr-has-index'>t</span>: 4</li><li><span class='xr-has-index'>m</span>: 1</li><li><span class='xr-has-index'>i</span>: 9</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-13d61f33-0dc0-41ee-ae61-74dc6994b8de' class='xr-section-summary-in' type='checkbox'  checked><label for='section-13d61f33-0dc0-41ee-ae61-74dc6994b8de' class='xr-section-summary' >Coordinates: <span>(5)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>j</span></div><div class='xr-var-dims'>(j)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>10005 10009 10013 ... 379096 379127</div><input id='attrs-7a3913b4-5597-41ed-970c-fe849c01febe' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7a3913b4-5597-41ed-970c-fe849c01febe' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d9e1c75b-6395-4807-8974-0a2bb382b79a' class='xr-var-data-in' type='checkbox'><label for='data-d9e1c75b-6395-4807-8974-0a2bb382b79a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 10005,  10009,  10013, ..., 379094, 379096, 379127])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>t</span></div><div class='xr-var-dims'>(t)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>2010 2012 2015 2018</div><input id='attrs-c7ad5d0a-befc-4b18-98b2-368b17c8758c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c7ad5d0a-befc-4b18-98b2-368b17c8758c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-722c2e04-187f-42dd-9a23-9e3a68fd4c5b' class='xr-var-data-in' type='checkbox'><label for='data-722c2e04-187f-42dd-9a23-9e3a68fd4c5b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2010, 2012, 2015, 2018])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>m</span></div><div class='xr-var-dims'>(m)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>1</div><input id='attrs-e2e30239-1799-4730-b0a2-195a5e1c2c84' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e2e30239-1799-4730-b0a2-195a5e1c2c84' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-efd0d5a4-c217-49f3-b2bf-c3ddced26c4f' class='xr-var-data-in' type='checkbox'><label for='data-efd0d5a4-c217-49f3-b2bf-c3ddced26c4f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>i</span></div><div class='xr-var-dims'>(i)</div><div class='xr-var-dtype'>&lt;U36</div><div class='xr-var-preview xr-preview'>&#x27;Bread&#x27; ... &#x27;White beans&#x27;</div><input id='attrs-a7903274-8707-4143-bfa8-b1b8a64e839d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a7903274-8707-4143-bfa8-b1b8a64e839d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c5d558b7-dffa-4a3a-a96a-1e889f9ced60' class='xr-var-data-in' type='checkbox'><label for='data-c5d558b7-dffa-4a3a-a96a-1e889f9ced60' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;Bread&#x27;, &#x27;Condiments,(salt,spices,pepper, etc)&#x27;, &#x27;Groundnut oil&#x27;,\n",
       "       &#x27;Onions&#x27;, &#x27;Palm oil&#x27;, &#x27;Rice-local&#x27;, &#x27;Sugar&#x27;, &#x27;Tomatoes&#x27;, &#x27;White beans&#x27;],\n",
       "      dtype=&#x27;&lt;U36&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>k</span></div><div class='xr-var-dims'>(k)</div><div class='xr-var-dtype'>&lt;U9</div><div class='xr-var-preview xr-preview'>&#x27;M 0-3&#x27; &#x27;M 4-8&#x27; ... &#x27;log Hsize&#x27;</div><input id='attrs-8c8fcb08-861e-4181-ad09-a99c1dbe44bb' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8c8fcb08-861e-4181-ad09-a99c1dbe44bb' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-af1e2b04-e39b-4c50-b8d7-01afc65c0fa7' class='xr-var-data-in' type='checkbox'><label for='data-af1e2b04-e39b-4c50-b8d7-01afc65c0fa7' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;M 0-3&#x27;, &#x27;M 4-8&#x27;, &#x27;M 9-13&#x27;, &#x27;M 14-18&#x27;, &#x27;M 19-30&#x27;, &#x27;M 31-50&#x27;, &#x27;M 51+&#x27;,\n",
       "       &#x27;F 0-3&#x27;, &#x27;F 4-8&#x27;, &#x27;F 9-13&#x27;, &#x27;F 14-18&#x27;, &#x27;F 19-30&#x27;, &#x27;F 31-50&#x27;, &#x27;F 51+&#x27;,\n",
       "       &#x27;log Hsize&#x27;], dtype=&#x27;&lt;U9&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-2caadc85-d57a-47b2-bdbb-7036d59cdf62' class='xr-section-summary-in' type='checkbox'  ><label for='section-2caadc85-d57a-47b2-bdbb-7036d59cdf62' class='xr-section-summary' >Data variables: <span>(20)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>alpha</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-53347967-2033-4feb-bd17-24885d2d97d1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-53347967-2033-4feb-bd17-24885d2d97d1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c1777f66-94dc-42c7-9c51-e666c5fd3190' class='xr-var-data-in' type='checkbox'><label for='data-c1777f66-94dc-42c7-9c51-e666c5fd3190' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>beta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-9e4ffbf0-df34-484a-8f05-23ed0a5b3f56' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9e4ffbf0-df34-484a-8f05-23ed0a5b3f56' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f0f07119-1654-40e0-9d96-260e9a834bc4' class='xr-var-data-in' type='checkbox'><label for='data-f0f07119-1654-40e0-9d96-260e9a834bc4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>delta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-859da477-2b1a-403a-9b8e-f4b55bf3647b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-859da477-2b1a-403a-9b8e-f4b55bf3647b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1ac81bd3-9308-4140-a1e0-31b29fc2350b' class='xr-var-data-in' type='checkbox'><label for='data-1ac81bd3-9308-4140-a1e0-31b29fc2350b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>prices</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-48e167e1-4c8e-4788-b34d-38bfd33b9860' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-48e167e1-4c8e-4788-b34d-38bfd33b9860' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ca888ad2-e68b-49dc-bf86-970c45e8e855' class='xr-var-data-in' type='checkbox'><label for='data-ca888ad2-e68b-49dc-bf86-970c45e8e855' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>characteristics</span></div><div class='xr-var-dims'>(k, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan 0.0 ... nan nan 1.386</div><input id='attrs-21d737c5-e03c-4c3e-b8f9-f691572e4de5' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-21d737c5-e03c-4c3e-b8f9-f691572e4de5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0aa928d8-b88d-45a8-b5c0-1eb159853c4f' class='xr-var-data-in' type='checkbox'><label for='data-0aa928d8-b88d-45a8-b5c0-1eb159853c4f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.        ]],\n",
       "\n",
       "        [[0.        ],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.60943791]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [2.07944154]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.38629436]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>loglambdas</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-1e5239f3-2f7d-49f6-9321-77d6afa79561' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1e5239f3-2f7d-49f6-9321-77d6afa79561' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4dd58dce-0b17-4dae-a791-a85364d913e9' class='xr-var-data-in' type='checkbox'><label for='data-4dd58dce-0b17-4dae-a791-a85364d913e9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>a</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-e180adec-3c6c-4dc2-8d4f-32e7dbd00e83' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e180adec-3c6c-4dc2-8d4f-32e7dbd00e83' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ae81f8bf-5e39-4415-bda6-17c439aa09af' class='xr-var-data-in' type='checkbox'><label for='data-ae81f8bf-5e39-4415-bda6-17c439aa09af' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>yhat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-3534dbcb-1137-49e4-8ddf-b4ccdf2ddb0f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3534dbcb-1137-49e4-8ddf-b4ccdf2ddb0f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5b542429-07c2-4c3d-9c50-e0a684e810cf' class='xr-var-data-in' type='checkbox'><label for='data-5b542429-07c2-4c3d-9c50-e0a684e810cf' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ce</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-adc93b1e-950b-47cf-995b-8d2889d065f4' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-adc93b1e-950b-47cf-995b-8d2889d065f4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-01b59332-1a71-4ec7-9c30-c26fd7a19899' class='xr-var-data-in' type='checkbox'><label for='data-01b59332-1a71-4ec7-9c30-c26fd7a19899' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>cehat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-52b99e98-596a-4829-84da-5f95661dd9ad' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-52b99e98-596a-4829-84da-5f95661dd9ad' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c9a35146-1f33-49f7-b339-7505f4cc1732' class='xr-var-data-in' type='checkbox'><label for='data-c9a35146-1f33-49f7-b339-7505f4cc1732' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>e</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-3ac9ba37-1457-48b3-853e-a5311c5e69e5' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3ac9ba37-1457-48b3-853e-a5311c5e69e5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0b579182-069b-4709-be8b-6ad8a59c6f7c' class='xr-var-data-in' type='checkbox'><label for='data-0b579182-069b-4709-be8b-6ad8a59c6f7c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>delta_covariance</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-1543d7fc-77f9-4153-b205-58a5630f7015' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1543d7fc-77f9-4153-b205-58a5630f7015' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-54ea20c2-ad2a-405e-9a42-5ad581a1cc81' class='xr-var-data-in' type='checkbox'><label for='data-54ea20c2-ad2a-405e-9a42-5ad581a1cc81' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>beta_covariance</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-2b38cd6c-261a-41cb-aaaa-9f57ec5beeca' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2b38cd6c-261a-41cb-aaaa-9f57ec5beeca' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9a6cdf98-4743-4d87-b387-774eade81a15' class='xr-var-data-in' type='checkbox'><label for='data-9a6cdf98-4743-4d87-b387-774eade81a15' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_delta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-9420e1ae-da40-47d2-83b7-edb7354ac0bd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9420e1ae-da40-47d2-83b7-edb7354ac0bd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0aa8591e-61d5-422c-9599-7c571589a160' class='xr-var-data-in' type='checkbox'><label for='data-0aa8591e-61d5-422c-9599-7c571589a160' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_beta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-663ea832-2b01-40de-9e44-788fae404bc1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-663ea832-2b01-40de-9e44-788fae404bc1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6764bb5e-397e-4ebe-9de9-ba48e9428a2e' class='xr-var-data-in' type='checkbox'><label for='data-6764bb5e-397e-4ebe-9de9-ba48e9428a2e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_alpha</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-6f717512-5876-438d-8e5f-6f690e3ecdea' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6f717512-5876-438d-8e5f-6f690e3ecdea' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1855f7a9-27c9-4023-8b74-078118cbb86a' class='xr-var-data-in' type='checkbox'><label for='data-1855f7a9-27c9-4023-8b74-078118cbb86a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_a</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-b0ae8214-f19c-4509-913b-55677c4d8060' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-b0ae8214-f19c-4509-913b-55677c4d8060' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-85f7e4ba-a37e-4aa3-881a-c4ff621f2638' class='xr-var-data-in' type='checkbox'><label for='data-85f7e4ba-a37e-4aa3-881a-c4ff621f2638' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>y</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-ed36993b-b245-4298-aa93-672b64af86c4' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ed36993b-b245-4298-aa93-672b64af86c4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9d18b6cd-def2-4ffd-b3ac-2ca29ea9a9c9' class='xr-var-data-in' type='checkbox'><label for='data-9d18b6cd-def2-4ffd-b3ac-2ca29ea9a9c9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[4.78749174],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>logp</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-4971c30c-3a3b-4a20-b8a0-35280bebe914' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4971c30c-3a3b-4a20-b8a0-35280bebe914' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2379bfee-b567-4418-b578-3d60141116d1' class='xr-var-data-in' type='checkbox'><label for='data-2379bfee-b567-4418-b578-3d60141116d1' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>z</span></div><div class='xr-var-dims'>(k, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan 0.0 ... nan nan 1.386</div><input id='attrs-c9e149a6-1d8b-406e-87a1-ea235f7f9b75' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c9e149a6-1d8b-406e-87a1-ea235f7f9b75' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-534e2e98-8679-423f-9903-56b8af1ae11a' class='xr-var-data-in' type='checkbox'><label for='data-534e2e98-8679-423f-9903-56b8af1ae11a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.        ]],\n",
       "\n",
       "        [[0.        ],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.60943791]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [2.07944154]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.38629436]]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-82e3c7f7-f1e1-41db-aa1f-3a7918a6e765' class='xr-section-summary-in' type='checkbox'  ><label for='section-82e3c7f7-f1e1-41db-aa1f-3a7918a6e765' class='xr-section-summary' >Attributes: <span>(10)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>firstround :</span></dt><dd>2010</dd><dt><span>min_proportion_items :</span></dt><dd>0.125</dd><dt><span>min_xproducts :</span></dt><dd>30</dd><dt><span>all_tm :</span></dt><dd>True</dd><dt><span>common_alpha :</span></dt><dd>True</dd><dt><span>useless_expenditures :</span></dt><dd>False</dd><dt><span>stderr_tol :</span></dt><dd>0.01</dd><dt><span>indices :</span></dt><dd>Indices(j=&#x27;j&#x27;, t=&#x27;t&#x27;, m=&#x27;m&#x27;, i=&#x27;i&#x27;, k=&#x27;k&#x27;)</dd><dt><span>iterate :</span></dt><dd>False</dd><dt><span>verbose :</span></dt><dd>False</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Result>\n",
       "Dimensions:           (k: 15, j: 3197, t: 4, m: 1, i: 9)\n",
       "Coordinates:\n",
       "  * j                 (j) int64 10005 10009 10013 10022 ... 379094 379096 379127\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * i                 (i) <U36 'Bread' ... 'White beans'\n",
       "  * k                 (k) <U9 'M 0-3' 'M 4-8' 'M 9-13' ... 'F 51+' 'log Hsize'\n",
       "Data variables: (12/20)\n",
       "    alpha             object None\n",
       "    beta              object None\n",
       "    delta             object None\n",
       "    prices            object None\n",
       "    characteristics   (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386\n",
       "    loglambdas        object None\n",
       "    ...                ...\n",
       "    se_beta           object None\n",
       "    se_alpha          object None\n",
       "    se_a              object None\n",
       "    y                 (i, j, t, m) float64 nan nan nan nan ... nan nan nan nan\n",
       "    logp              object None\n",
       "    z                 (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386\n",
       "Attributes:\n",
       "    firstround:            2010\n",
       "    min_proportion_items:  0.125\n",
       "    min_xproducts:         30\n",
       "    all_tm:                True\n",
       "    common_alpha:          True\n",
       "    useless_expenditures:  False\n",
       "    stderr_tol:            0.01\n",
       "    indices:               Indices(j='j', t='t', m='m', i='i', k='k')\n",
       "    iterate:               False\n",
       "    verbose:               False"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Result&gt;\n",
       "Dimensions:           (k: 15, j: 3186, t: 4, m: 1, i: 39)\n",
       "Coordinates:\n",
       "  * j                 (j) int64 10001 10002 10003 10004 ... 379148 379151 379154\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * i                 (i) &lt;U36 &#x27;(Cocoyam, Spinach, etc)&#x27; ... &#x27;Yam-roots&#x27;\n",
       "  * k                 (k) &lt;U9 &#x27;M 0-3&#x27; &#x27;M 4-8&#x27; &#x27;M 9-13&#x27; ... &#x27;F 51+&#x27; &#x27;log Hsize&#x27;\n",
       "Data variables: (12/20)\n",
       "    alpha             object None\n",
       "    beta              object None\n",
       "    delta             object None\n",
       "    prices            object None\n",
       "    characteristics   (k, j, t, m) float64 0.0 1.0 1.0 1.0 ... nan nan 0.6931\n",
       "    loglambdas        object None\n",
       "    ...                ...\n",
       "    se_beta           object None\n",
       "    se_alpha          object None\n",
       "    se_a              object None\n",
       "    y                 (i, j, t, m) float64 nan nan nan nan ... nan nan nan 6.477\n",
       "    logp              object None\n",
       "    z                 (k, j, t, m) float64 0.0 1.0 1.0 1.0 ... nan nan 0.6931\n",
       "Attributes:\n",
       "    firstround:            2010\n",
       "    min_proportion_items:  0.125\n",
       "    min_xproducts:         30\n",
       "    all_tm:                True\n",
       "    common_alpha:          True\n",
       "    useless_expenditures:  False\n",
       "    stderr_tol:            0.01\n",
       "    indices:               Indices(j=&#x27;j&#x27;, t=&#x27;t&#x27;, m=&#x27;m&#x27;, i=&#x27;i&#x27;, k=&#x27;k&#x27;)\n",
       "    iterate:               False\n",
       "    verbose:               False</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Result</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-cecc12ac-4855-4848-becc-259faabbc49b' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-cecc12ac-4855-4848-becc-259faabbc49b' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>k</span>: 15</li><li><span class='xr-has-index'>j</span>: 3186</li><li><span class='xr-has-index'>t</span>: 4</li><li><span class='xr-has-index'>m</span>: 1</li><li><span class='xr-has-index'>i</span>: 39</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-8d58f457-e2a7-4d34-943f-11a8d79c5dbe' class='xr-section-summary-in' type='checkbox'  checked><label for='section-8d58f457-e2a7-4d34-943f-11a8d79c5dbe' class='xr-section-summary' >Coordinates: <span>(5)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>j</span></div><div class='xr-var-dims'>(j)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>10001 10002 10003 ... 379151 379154</div><input id='attrs-edb70aea-f14c-40b5-a42a-f8df418fea09' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-edb70aea-f14c-40b5-a42a-f8df418fea09' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e1171b06-7364-45bc-aee3-6ae080e8c54a' class='xr-var-data-in' type='checkbox'><label for='data-e1171b06-7364-45bc-aee3-6ae080e8c54a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 10001,  10002,  10003, ..., 379148, 379151, 379154])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>t</span></div><div class='xr-var-dims'>(t)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>2010 2012 2015 2018</div><input id='attrs-554d787a-b641-4d4d-bcc3-c2809ec4d995' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-554d787a-b641-4d4d-bcc3-c2809ec4d995' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-00c6912d-5c74-425e-9b60-3c3b8cd1875d' class='xr-var-data-in' type='checkbox'><label for='data-00c6912d-5c74-425e-9b60-3c3b8cd1875d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2010, 2012, 2015, 2018])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>m</span></div><div class='xr-var-dims'>(m)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>1</div><input id='attrs-9722d5ec-a4d8-4ee6-865f-44d8f547470e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9722d5ec-a4d8-4ee6-865f-44d8f547470e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ff747ae6-bc2e-4ed6-9731-fe4b3b69f291' class='xr-var-data-in' type='checkbox'><label for='data-ff747ae6-bc2e-4ed6-9731-fe4b3b69f291' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>i</span></div><div class='xr-var-dims'>(i)</div><div class='xr-var-dtype'>&lt;U36</div><div class='xr-var-preview xr-preview'>&#x27;(Cocoyam, Spinach, etc)&#x27; ... &#x27;Y...</div><input id='attrs-2d830044-c502-4448-9095-a6a6bcb7d6e9' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2d830044-c502-4448-9095-a6a6bcb7d6e9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3fd77991-89be-4fc4-b67e-649e2a3da616' class='xr-var-data-in' type='checkbox'><label for='data-3fd77991-89be-4fc4-b67e-649e2a3da616' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;(Cocoyam, Spinach, etc)&#x27;, &#x27;Agricultural eggs&#x27;, &#x27;Bananas&#x27;, &#x27;Beef&#x27;,\n",
       "       &#x27;Bread&#x27;, &#x27;Brown beans&#x27;, &#x27;Chicken&#x27;, &#x27;Chocolate drinks&#x27;,\n",
       "       &#x27;Condiments,(salt,spices,pepper, etc)&#x27;, &#x27;Fish-Dried&#x27;, &#x27;Fish-Fresh&#x27;,\n",
       "       &#x27;Fish-Frozen&#x27;, &#x27;Fish-Smoked&#x27;, &#x27;Garden eggs/egg plant&#x27;, &#x27;Gari -Yellow&#x27;,\n",
       "       &#x27;Gari-White&#x27;, &#x27;Goat&#x27;, &#x27;Groundnut oil&#x27;, &#x27;Malt drinks&#x27;, &#x27;Milk powder&#x27;,\n",
       "       &#x27;Milk tinned (unsweetened)&#x27;, &#x27;Okra-fresh&#x27;, &#x27;Onions&#x27;, &#x27;Orange/tangerine&#x27;,\n",
       "       &#x27;Other vegetables (fresh or canned)&#x27;, &#x27;Palm oil&#x27;, &#x27;Pineapples&#x27;,\n",
       "       &#x27;Plantains&#x27;, &#x27;Rice-Imported&#x27;, &#x27;Rice-local&#x27;, &#x27;Sachet water&#x27;,\n",
       "       &#x27;Soft drinks (Coca cola, spirit etc)&#x27;, &#x27;Sugar&#x27;, &#x27;Sweet Potatoes&#x27;, &#x27;Tea&#x27;,\n",
       "       &#x27;Tomato puree(canned)&#x27;, &#x27;Tomatoes&#x27;, &#x27;White beans&#x27;, &#x27;Yam-roots&#x27;],\n",
       "      dtype=&#x27;&lt;U36&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>k</span></div><div class='xr-var-dims'>(k)</div><div class='xr-var-dtype'>&lt;U9</div><div class='xr-var-preview xr-preview'>&#x27;M 0-3&#x27; &#x27;M 4-8&#x27; ... &#x27;log Hsize&#x27;</div><input id='attrs-03016cc6-2fa1-4933-9300-b8e60d5ad2cc' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-03016cc6-2fa1-4933-9300-b8e60d5ad2cc' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f3777b60-e997-4c13-9ad4-536892f17bcd' class='xr-var-data-in' type='checkbox'><label for='data-f3777b60-e997-4c13-9ad4-536892f17bcd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;M 0-3&#x27;, &#x27;M 4-8&#x27;, &#x27;M 9-13&#x27;, &#x27;M 14-18&#x27;, &#x27;M 19-30&#x27;, &#x27;M 31-50&#x27;, &#x27;M 51+&#x27;,\n",
       "       &#x27;F 0-3&#x27;, &#x27;F 4-8&#x27;, &#x27;F 9-13&#x27;, &#x27;F 14-18&#x27;, &#x27;F 19-30&#x27;, &#x27;F 31-50&#x27;, &#x27;F 51+&#x27;,\n",
       "       &#x27;log Hsize&#x27;], dtype=&#x27;&lt;U9&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1ac3adca-9956-4e61-aa07-2a10d6966f40' class='xr-section-summary-in' type='checkbox'  ><label for='section-1ac3adca-9956-4e61-aa07-2a10d6966f40' class='xr-section-summary' >Data variables: <span>(20)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>alpha</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-15a48724-ebcb-47ed-83f1-a0316d90c86c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-15a48724-ebcb-47ed-83f1-a0316d90c86c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0062be53-7c67-40e1-ad0c-b8dbdf1d1472' class='xr-var-data-in' type='checkbox'><label for='data-0062be53-7c67-40e1-ad0c-b8dbdf1d1472' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>beta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-787c4972-04bd-4254-85bb-4e5438e41618' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-787c4972-04bd-4254-85bb-4e5438e41618' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-22e68efc-b151-4b97-b199-d189403f2aaa' class='xr-var-data-in' type='checkbox'><label for='data-22e68efc-b151-4b97-b199-d189403f2aaa' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>delta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-43ab04f5-8ed5-4d04-8d01-6d9a9392fc45' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-43ab04f5-8ed5-4d04-8d01-6d9a9392fc45' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d59626d6-fa0e-496c-8531-a2de07301a6e' class='xr-var-data-in' type='checkbox'><label for='data-d59626d6-fa0e-496c-8531-a2de07301a6e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>prices</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-749916e3-5a9f-4d9a-8e5d-6b726f213ab3' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-749916e3-5a9f-4d9a-8e5d-6b726f213ab3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5dffb6c7-fb9d-4df2-bb57-39ecae798713' class='xr-var-data-in' type='checkbox'><label for='data-5dffb6c7-fb9d-4df2-bb57-39ecae798713' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>characteristics</span></div><div class='xr-var-dims'>(k, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 1.0 1.0 1.0 ... nan nan 0.6931</div><input id='attrs-ca95d15d-8923-4bd4-80bb-df0f1efee1f0' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ca95d15d-8923-4bd4-80bb-df0f1efee1f0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-20cb2395-0ad9-4394-9555-1147dc4f9c2e' class='xr-var-data-in' type='checkbox'><label for='data-20cb2395-0ad9-4394-9555-1147dc4f9c2e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[0.        ],\n",
       "         [1.        ],\n",
       "         [1.        ],\n",
       "         [1.        ]],\n",
       "\n",
       "        [[0.        ],\n",
       "         [0.        ],\n",
       "         [0.        ],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [0.        ],\n",
       "         [0.        ],\n",
       "         [0.        ]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [1.79175947],\n",
       "         [1.79175947],\n",
       "         [1.79175947]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.60943791]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.69314718]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>loglambdas</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-a6febe4a-703e-4ee6-8d20-ffe85ede1e6f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a6febe4a-703e-4ee6-8d20-ffe85ede1e6f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2fd18a61-f24f-48d0-8994-a112b489a4b3' class='xr-var-data-in' type='checkbox'><label for='data-2fd18a61-f24f-48d0-8994-a112b489a4b3' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>a</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-d751c9af-b8ec-4755-acbb-d7dc143ce815' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d751c9af-b8ec-4755-acbb-d7dc143ce815' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-45c243b7-7117-45a5-9d20-b2d4b943233d' class='xr-var-data-in' type='checkbox'><label for='data-45c243b7-7117-45a5-9d20-b2d4b943233d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>yhat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-b7562233-8790-4c9c-87ea-9ccac87c28e1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-b7562233-8790-4c9c-87ea-9ccac87c28e1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4b22b572-eeb3-4e71-a75a-2733b7c3a278' class='xr-var-data-in' type='checkbox'><label for='data-4b22b572-eeb3-4e71-a75a-2733b7c3a278' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ce</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-bc3a1b33-530f-4098-a42c-a53fcba9ac51' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bc3a1b33-530f-4098-a42c-a53fcba9ac51' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b26f43dc-803e-4063-9527-3498fb7c44dd' class='xr-var-data-in' type='checkbox'><label for='data-b26f43dc-803e-4063-9527-3498fb7c44dd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>cehat</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-017e1f8d-ce1b-429c-b6ff-e9ff2ba516ed' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-017e1f8d-ce1b-429c-b6ff-e9ff2ba516ed' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d70ebcaa-012b-4c48-aeb6-a6e6bca73e5f' class='xr-var-data-in' type='checkbox'><label for='data-d70ebcaa-012b-4c48-aeb6-a6e6bca73e5f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>e</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-d2737517-10dd-4d28-ab00-50ca57c4150a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d2737517-10dd-4d28-ab00-50ca57c4150a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4a81049c-1eac-4884-8288-42cdbecd67cd' class='xr-var-data-in' type='checkbox'><label for='data-4a81049c-1eac-4884-8288-42cdbecd67cd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>delta_covariance</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-90627cee-91b3-4fa4-94a1-7dc016ceba02' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-90627cee-91b3-4fa4-94a1-7dc016ceba02' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-47391fcc-8ff8-4e77-a6e8-0ad3d8b8f799' class='xr-var-data-in' type='checkbox'><label for='data-47391fcc-8ff8-4e77-a6e8-0ad3d8b8f799' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>beta_covariance</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-5a93342e-ded2-404a-bf5a-ce3b53cb1cf7' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5a93342e-ded2-404a-bf5a-ce3b53cb1cf7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f6a794ba-9c68-4c2a-9886-3b508a38a27d' class='xr-var-data-in' type='checkbox'><label for='data-f6a794ba-9c68-4c2a-9886-3b508a38a27d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_delta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-3085fe11-42fa-4319-8aad-04bc933ddd9b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3085fe11-42fa-4319-8aad-04bc933ddd9b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8956bca6-c7ac-4ace-97d8-5adf308682e2' class='xr-var-data-in' type='checkbox'><label for='data-8956bca6-c7ac-4ace-97d8-5adf308682e2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_beta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-c222d103-a25b-43e2-8a43-042225dc1b44' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c222d103-a25b-43e2-8a43-042225dc1b44' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d6138fee-8982-4377-840e-a17908435101' class='xr-var-data-in' type='checkbox'><label for='data-d6138fee-8982-4377-840e-a17908435101' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_alpha</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-9851472a-7564-4bfa-bab2-0a146868ad30' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9851472a-7564-4bfa-bab2-0a146868ad30' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f32fedf0-fd59-44b2-81bb-ec0c2b27e661' class='xr-var-data-in' type='checkbox'><label for='data-f32fedf0-fd59-44b2-81bb-ec0c2b27e661' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_a</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-93a531c6-a0f8-436e-83fd-fc55100b1a09' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-93a531c6-a0f8-436e-83fd-fc55100b1a09' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-99c78ca3-ad85-4753-8f67-5db1d6059687' class='xr-var-data-in' type='checkbox'><label for='data-99c78ca3-ad85-4753-8f67-5db1d6059687' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>y</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan 6.477</div><input id='attrs-d98669fa-a0fc-43ca-8604-6a378264ae52' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d98669fa-a0fc-43ca-8604-6a378264ae52' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3ed9eff2-f940-4b62-a896-ecedd633a1e0' class='xr-var-data-in' type='checkbox'><label for='data-3ed9eff2-f940-4b62-a896-ecedd633a1e0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [5.70378247],\n",
       "         [5.85793315],\n",
       "         [7.46737107]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [7.37775891]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [8.16051825]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [6.47697236]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>logp</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-05f083ef-5f62-4b90-88c3-652ee8d7fff7' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-05f083ef-5f62-4b90-88c3-652ee8d7fff7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d5b1c53d-c937-4e8c-b1cb-1a8e24fb0508' class='xr-var-data-in' type='checkbox'><label for='data-d5b1c53d-c937-4e8c-b1cb-1a8e24fb0508' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>z</span></div><div class='xr-var-dims'>(k, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 1.0 1.0 1.0 ... nan nan 0.6931</div><input id='attrs-e5a97f9c-629f-4115-bd76-22302a2d562a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e5a97f9c-629f-4115-bd76-22302a2d562a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9bda5739-1fe6-4574-a49e-00d4d21ad90f' class='xr-var-data-in' type='checkbox'><label for='data-9bda5739-1fe6-4574-a49e-00d4d21ad90f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[0.        ],\n",
       "         [1.        ],\n",
       "         [1.        ],\n",
       "         [1.        ]],\n",
       "\n",
       "        [[0.        ],\n",
       "         [0.        ],\n",
       "         [0.        ],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [0.        ],\n",
       "         [0.        ],\n",
       "         [0.        ]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [1.79175947],\n",
       "         [1.79175947],\n",
       "         [1.79175947]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.60943791]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.69314718]]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-948bb6a1-6a22-46aa-9c6f-42b5afdbfdbf' class='xr-section-summary-in' type='checkbox'  ><label for='section-948bb6a1-6a22-46aa-9c6f-42b5afdbfdbf' class='xr-section-summary' >Attributes: <span>(10)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>firstround :</span></dt><dd>2010</dd><dt><span>min_proportion_items :</span></dt><dd>0.125</dd><dt><span>min_xproducts :</span></dt><dd>30</dd><dt><span>all_tm :</span></dt><dd>True</dd><dt><span>common_alpha :</span></dt><dd>True</dd><dt><span>useless_expenditures :</span></dt><dd>False</dd><dt><span>stderr_tol :</span></dt><dd>0.01</dd><dt><span>indices :</span></dt><dd>Indices(j=&#x27;j&#x27;, t=&#x27;t&#x27;, m=&#x27;m&#x27;, i=&#x27;i&#x27;, k=&#x27;k&#x27;)</dd><dt><span>iterate :</span></dt><dd>False</dd><dt><span>verbose :</span></dt><dd>False</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Result>\n",
       "Dimensions:           (k: 15, j: 3186, t: 4, m: 1, i: 39)\n",
       "Coordinates:\n",
       "  * j                 (j) int64 10001 10002 10003 10004 ... 379148 379151 379154\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * i                 (i) <U36 '(Cocoyam, Spinach, etc)' ... 'Yam-roots'\n",
       "  * k                 (k) <U9 'M 0-3' 'M 4-8' 'M 9-13' ... 'F 51+' 'log Hsize'\n",
       "Data variables: (12/20)\n",
       "    alpha             object None\n",
       "    beta              object None\n",
       "    delta             object None\n",
       "    prices            object None\n",
       "    characteristics   (k, j, t, m) float64 0.0 1.0 1.0 1.0 ... nan nan 0.6931\n",
       "    loglambdas        object None\n",
       "    ...                ...\n",
       "    se_beta           object None\n",
       "    se_alpha          object None\n",
       "    se_a              object None\n",
       "    y                 (i, j, t, m) float64 nan nan nan nan ... nan nan nan 6.477\n",
       "    logp              object None\n",
       "    z                 (k, j, t, m) float64 0.0 1.0 1.0 1.0 ... nan nan 0.6931\n",
       "Attributes:\n",
       "    firstround:            2010\n",
       "    min_proportion_items:  0.125\n",
       "    min_xproducts:         30\n",
       "    all_tm:                True\n",
       "    common_alpha:          True\n",
       "    useless_expenditures:  False\n",
       "    stderr_tol:            0.01\n",
       "    indices:               Indices(j='j', t='t', m='m', i='i', k='k')\n",
       "    iterate:               False\n",
       "    verbose:               False"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### First step of Estimation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall that there are two steps to estimation; the first step\n",
    "involves estimating the &ldquo;reduced form&rdquo; linear regression \n",
    "$$\n",
    "y_{it}^j = {a}_{it} + \\delta_i'{z}^j_t + \\epsilon_{it}^j.\n",
    "$$\n",
    "\n",
    "The Result class has code to estimate this in one line:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "result1.get_reduced_form()\n",
    "result4.get_reduced_form()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (t: 4)&gt;\n",
       "array([21.72649895, 11.63452879, 36.59153191, 56.15069086])\n",
       "Coordinates:\n",
       "  * t        (t) int64 2010 2012 2015 2018</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>t</span>: 4</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-f17ea61f-bf36-4860-b791-39332dafaf23' class='xr-array-in' type='checkbox' checked><label for='section-f17ea61f-bf36-4860-b791-39332dafaf23' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>21.73 11.63 36.59 56.15</span></div><div class='xr-array-data'><pre>array([21.72649895, 11.63452879, 36.59153191, 56.15069086])</pre></div></div></li><li class='xr-section-item'><input id='section-6570a638-b8e4-41ac-9d35-1a4843b6f7d3' class='xr-section-summary-in' type='checkbox'  checked><label for='section-6570a638-b8e4-41ac-9d35-1a4843b6f7d3' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>t</span></div><div class='xr-var-dims'>(t)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>2010 2012 2015 2018</div><input id='attrs-ef5b91c2-7872-4e28-ba8c-6fec8da4b9c4' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ef5b91c2-7872-4e28-ba8c-6fec8da4b9c4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-608dc9a0-6092-4c9e-b004-dd738dfce24a' class='xr-var-data-in' type='checkbox'><label for='data-608dc9a0-6092-4c9e-b004-dd738dfce24a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2010, 2012, 2015, 2018])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-6e66171c-647a-448e-a3ba-adee2689abe4' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-6e66171c-647a-448e-a3ba-adee2689abe4' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.DataArray (t: 4)>\n",
       "array([21.72649895, 11.63452879, 36.59153191, 56.15069086])\n",
       "Coordinates:\n",
       "  * t        (t) int64 2010 2012 2015 2018"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1.get_predicted_expenditures().sum(['m','i']).mean('j')\n",
    "#"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After running this we can examine the estimated coefficients $\\delta$:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"15\" halign=\"left\">delta</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>k</th>\n",
       "      <th>M 0-3</th>\n",
       "      <th>M 4-8</th>\n",
       "      <th>M 9-13</th>\n",
       "      <th>M 14-18</th>\n",
       "      <th>M 19-30</th>\n",
       "      <th>M 31-50</th>\n",
       "      <th>M 51+</th>\n",
       "      <th>F 0-3</th>\n",
       "      <th>F 4-8</th>\n",
       "      <th>F 9-13</th>\n",
       "      <th>F 14-18</th>\n",
       "      <th>F 19-30</th>\n",
       "      <th>F 31-50</th>\n",
       "      <th>F 51+</th>\n",
       "      <th>log Hsize</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>i</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <td>0.059970</td>\n",
       "      <td>-0.026824</td>\n",
       "      <td>-0.128255</td>\n",
       "      <td>-0.060140</td>\n",
       "      <td>-0.066222</td>\n",
       "      <td>-0.203679</td>\n",
       "      <td>-0.003154</td>\n",
       "      <td>-0.110133</td>\n",
       "      <td>-0.029828</td>\n",
       "      <td>-3.905910e-02</td>\n",
       "      <td>-0.065547</td>\n",
       "      <td>-0.039992</td>\n",
       "      <td>0.074851</td>\n",
       "      <td>-0.026010</td>\n",
       "      <td>0.455216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <td>0.086844</td>\n",
       "      <td>0.059903</td>\n",
       "      <td>0.027056</td>\n",
       "      <td>0.020432</td>\n",
       "      <td>0.009668</td>\n",
       "      <td>0.162421</td>\n",
       "      <td>0.187265</td>\n",
       "      <td>-0.030647</td>\n",
       "      <td>0.037358</td>\n",
       "      <td>3.864903e-02</td>\n",
       "      <td>0.069396</td>\n",
       "      <td>0.056060</td>\n",
       "      <td>0.043409</td>\n",
       "      <td>0.007082</td>\n",
       "      <td>0.364332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bananas</th>\n",
       "      <td>0.112941</td>\n",
       "      <td>0.019600</td>\n",
       "      <td>0.028835</td>\n",
       "      <td>0.030731</td>\n",
       "      <td>0.057242</td>\n",
       "      <td>0.092288</td>\n",
       "      <td>0.082695</td>\n",
       "      <td>-0.005638</td>\n",
       "      <td>0.001193</td>\n",
       "      <td>8.091823e-02</td>\n",
       "      <td>0.027608</td>\n",
       "      <td>0.054544</td>\n",
       "      <td>0.030339</td>\n",
       "      <td>0.028244</td>\n",
       "      <td>0.183273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Beef</th>\n",
       "      <td>0.041234</td>\n",
       "      <td>0.017796</td>\n",
       "      <td>0.033165</td>\n",
       "      <td>0.038998</td>\n",
       "      <td>0.083915</td>\n",
       "      <td>0.071213</td>\n",
       "      <td>0.120941</td>\n",
       "      <td>0.023505</td>\n",
       "      <td>0.048921</td>\n",
       "      <td>9.010419e-02</td>\n",
       "      <td>0.094665</td>\n",
       "      <td>0.083271</td>\n",
       "      <td>0.064280</td>\n",
       "      <td>0.019953</td>\n",
       "      <td>0.245994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bread</th>\n",
       "      <td>-0.026338</td>\n",
       "      <td>0.063221</td>\n",
       "      <td>0.001727</td>\n",
       "      <td>0.057792</td>\n",
       "      <td>0.043891</td>\n",
       "      <td>0.078987</td>\n",
       "      <td>0.101278</td>\n",
       "      <td>0.003712</td>\n",
       "      <td>0.050708</td>\n",
       "      <td>5.207216e-02</td>\n",
       "      <td>0.055545</td>\n",
       "      <td>0.050361</td>\n",
       "      <td>0.044239</td>\n",
       "      <td>0.009327</td>\n",
       "      <td>0.390736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brown beans</th>\n",
       "      <td>0.014834</td>\n",
       "      <td>0.091460</td>\n",
       "      <td>0.068840</td>\n",
       "      <td>0.029102</td>\n",
       "      <td>0.034687</td>\n",
       "      <td>0.146752</td>\n",
       "      <td>0.119398</td>\n",
       "      <td>0.011646</td>\n",
       "      <td>-0.004123</td>\n",
       "      <td>1.634427e-01</td>\n",
       "      <td>0.118931</td>\n",
       "      <td>0.031816</td>\n",
       "      <td>0.063036</td>\n",
       "      <td>0.067179</td>\n",
       "      <td>0.218931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicken</th>\n",
       "      <td>-0.061032</td>\n",
       "      <td>0.033191</td>\n",
       "      <td>-0.050040</td>\n",
       "      <td>-0.038478</td>\n",
       "      <td>-0.003820</td>\n",
       "      <td>0.006639</td>\n",
       "      <td>0.103351</td>\n",
       "      <td>-0.066502</td>\n",
       "      <td>-0.033737</td>\n",
       "      <td>-3.769419e-02</td>\n",
       "      <td>-0.073332</td>\n",
       "      <td>0.013690</td>\n",
       "      <td>0.148931</td>\n",
       "      <td>0.065574</td>\n",
       "      <td>0.360872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chocolate drinks</th>\n",
       "      <td>-0.035630</td>\n",
       "      <td>0.055367</td>\n",
       "      <td>0.068203</td>\n",
       "      <td>0.017425</td>\n",
       "      <td>-0.019891</td>\n",
       "      <td>0.009374</td>\n",
       "      <td>0.086222</td>\n",
       "      <td>-0.002688</td>\n",
       "      <td>0.054594</td>\n",
       "      <td>-8.011901e-02</td>\n",
       "      <td>0.082074</td>\n",
       "      <td>0.076718</td>\n",
       "      <td>-0.059831</td>\n",
       "      <td>-0.013869</td>\n",
       "      <td>0.544797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condiments,(salt,spices,pepper, etc)</th>\n",
       "      <td>0.148230</td>\n",
       "      <td>0.006426</td>\n",
       "      <td>0.044869</td>\n",
       "      <td>-0.000825</td>\n",
       "      <td>0.024444</td>\n",
       "      <td>0.072649</td>\n",
       "      <td>0.062000</td>\n",
       "      <td>0.017190</td>\n",
       "      <td>0.115625</td>\n",
       "      <td>1.286864e-01</td>\n",
       "      <td>-0.000847</td>\n",
       "      <td>0.011411</td>\n",
       "      <td>0.031594</td>\n",
       "      <td>0.002202</td>\n",
       "      <td>0.341355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fish-Dried</th>\n",
       "      <td>0.155122</td>\n",
       "      <td>0.026463</td>\n",
       "      <td>0.001232</td>\n",
       "      <td>0.097397</td>\n",
       "      <td>0.084522</td>\n",
       "      <td>0.179060</td>\n",
       "      <td>0.158097</td>\n",
       "      <td>-0.045523</td>\n",
       "      <td>0.088062</td>\n",
       "      <td>2.077112e-02</td>\n",
       "      <td>0.109638</td>\n",
       "      <td>0.075742</td>\n",
       "      <td>0.061020</td>\n",
       "      <td>0.044019</td>\n",
       "      <td>0.192434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fish-Fresh</th>\n",
       "      <td>-0.080494</td>\n",
       "      <td>0.004656</td>\n",
       "      <td>0.041046</td>\n",
       "      <td>-0.004362</td>\n",
       "      <td>0.039594</td>\n",
       "      <td>0.123120</td>\n",
       "      <td>0.134129</td>\n",
       "      <td>-0.087933</td>\n",
       "      <td>0.044270</td>\n",
       "      <td>-3.795449e-02</td>\n",
       "      <td>0.063810</td>\n",
       "      <td>0.146593</td>\n",
       "      <td>0.098645</td>\n",
       "      <td>0.152332</td>\n",
       "      <td>0.094940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fish-Frozen</th>\n",
       "      <td>0.058999</td>\n",
       "      <td>0.005119</td>\n",
       "      <td>0.006594</td>\n",
       "      <td>0.050949</td>\n",
       "      <td>0.073138</td>\n",
       "      <td>0.092317</td>\n",
       "      <td>0.116882</td>\n",
       "      <td>0.081598</td>\n",
       "      <td>0.036344</td>\n",
       "      <td>8.648224e-02</td>\n",
       "      <td>0.061256</td>\n",
       "      <td>0.016630</td>\n",
       "      <td>0.085143</td>\n",
       "      <td>0.126944</td>\n",
       "      <td>0.180569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fish-Smoked</th>\n",
       "      <td>-0.041197</td>\n",
       "      <td>0.043157</td>\n",
       "      <td>-0.019277</td>\n",
       "      <td>0.053862</td>\n",
       "      <td>-0.000638</td>\n",
       "      <td>-0.004062</td>\n",
       "      <td>0.008987</td>\n",
       "      <td>0.033863</td>\n",
       "      <td>0.124475</td>\n",
       "      <td>3.642729e-02</td>\n",
       "      <td>0.111974</td>\n",
       "      <td>0.019259</td>\n",
       "      <td>-0.027527</td>\n",
       "      <td>0.113652</td>\n",
       "      <td>0.311213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Garden eggs/egg plant</th>\n",
       "      <td>0.000739</td>\n",
       "      <td>0.037447</td>\n",
       "      <td>-0.130051</td>\n",
       "      <td>0.129735</td>\n",
       "      <td>0.051826</td>\n",
       "      <td>0.047545</td>\n",
       "      <td>-0.003457</td>\n",
       "      <td>-0.133323</td>\n",
       "      <td>0.061322</td>\n",
       "      <td>-2.445847e-02</td>\n",
       "      <td>-0.056014</td>\n",
       "      <td>0.053827</td>\n",
       "      <td>0.064776</td>\n",
       "      <td>-0.005209</td>\n",
       "      <td>0.154766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gari -Yellow</th>\n",
       "      <td>-0.049401</td>\n",
       "      <td>-0.014213</td>\n",
       "      <td>0.034010</td>\n",
       "      <td>0.051743</td>\n",
       "      <td>0.049269</td>\n",
       "      <td>0.077268</td>\n",
       "      <td>0.077347</td>\n",
       "      <td>-0.074477</td>\n",
       "      <td>0.085948</td>\n",
       "      <td>6.789672e-02</td>\n",
       "      <td>-0.022039</td>\n",
       "      <td>0.047046</td>\n",
       "      <td>-0.018677</td>\n",
       "      <td>-0.048561</td>\n",
       "      <td>0.444479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gari-White</th>\n",
       "      <td>-0.027567</td>\n",
       "      <td>-0.005664</td>\n",
       "      <td>0.127520</td>\n",
       "      <td>0.021062</td>\n",
       "      <td>0.034031</td>\n",
       "      <td>0.170529</td>\n",
       "      <td>0.045180</td>\n",
       "      <td>0.019730</td>\n",
       "      <td>0.018731</td>\n",
       "      <td>1.112754e-01</td>\n",
       "      <td>0.061417</td>\n",
       "      <td>0.062529</td>\n",
       "      <td>0.043093</td>\n",
       "      <td>0.019069</td>\n",
       "      <td>0.330706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Goat</th>\n",
       "      <td>0.074985</td>\n",
       "      <td>-0.016815</td>\n",
       "      <td>-0.062995</td>\n",
       "      <td>0.118926</td>\n",
       "      <td>0.052371</td>\n",
       "      <td>0.015405</td>\n",
       "      <td>0.084998</td>\n",
       "      <td>-0.025937</td>\n",
       "      <td>-0.056854</td>\n",
       "      <td>4.049850e-02</td>\n",
       "      <td>0.002154</td>\n",
       "      <td>0.039837</td>\n",
       "      <td>-0.048295</td>\n",
       "      <td>-0.069985</td>\n",
       "      <td>0.308494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Groundnut oil</th>\n",
       "      <td>0.065055</td>\n",
       "      <td>0.054413</td>\n",
       "      <td>0.067312</td>\n",
       "      <td>0.091114</td>\n",
       "      <td>0.070049</td>\n",
       "      <td>0.160545</td>\n",
       "      <td>0.064058</td>\n",
       "      <td>0.024082</td>\n",
       "      <td>0.060424</td>\n",
       "      <td>7.836431e-02</td>\n",
       "      <td>0.123231</td>\n",
       "      <td>0.073113</td>\n",
       "      <td>0.031765</td>\n",
       "      <td>0.037063</td>\n",
       "      <td>0.132225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Malt drinks</th>\n",
       "      <td>0.068250</td>\n",
       "      <td>0.042481</td>\n",
       "      <td>0.056144</td>\n",
       "      <td>0.057165</td>\n",
       "      <td>0.088148</td>\n",
       "      <td>0.058488</td>\n",
       "      <td>0.110959</td>\n",
       "      <td>-0.039787</td>\n",
       "      <td>0.073434</td>\n",
       "      <td>1.231474e-02</td>\n",
       "      <td>0.042965</td>\n",
       "      <td>0.009565</td>\n",
       "      <td>0.056179</td>\n",
       "      <td>0.054838</td>\n",
       "      <td>0.184947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Milk powder</th>\n",
       "      <td>0.009672</td>\n",
       "      <td>-0.018615</td>\n",
       "      <td>0.002166</td>\n",
       "      <td>0.021498</td>\n",
       "      <td>0.030419</td>\n",
       "      <td>0.088972</td>\n",
       "      <td>0.127245</td>\n",
       "      <td>0.118727</td>\n",
       "      <td>-0.045061</td>\n",
       "      <td>-3.552280e-07</td>\n",
       "      <td>0.014775</td>\n",
       "      <td>0.022588</td>\n",
       "      <td>-0.007110</td>\n",
       "      <td>-0.095894</td>\n",
       "      <td>0.601637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Milk tinned (unsweetened)</th>\n",
       "      <td>0.081237</td>\n",
       "      <td>0.063547</td>\n",
       "      <td>-0.009673</td>\n",
       "      <td>0.066668</td>\n",
       "      <td>-0.001520</td>\n",
       "      <td>-0.028025</td>\n",
       "      <td>0.052931</td>\n",
       "      <td>-0.031587</td>\n",
       "      <td>0.033148</td>\n",
       "      <td>-1.705808e-02</td>\n",
       "      <td>0.100396</td>\n",
       "      <td>0.023336</td>\n",
       "      <td>0.009617</td>\n",
       "      <td>-0.005414</td>\n",
       "      <td>0.177990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Okra-fresh</th>\n",
       "      <td>0.000071</td>\n",
       "      <td>0.074140</td>\n",
       "      <td>0.041411</td>\n",
       "      <td>0.014963</td>\n",
       "      <td>0.079703</td>\n",
       "      <td>0.096141</td>\n",
       "      <td>0.093903</td>\n",
       "      <td>-0.036283</td>\n",
       "      <td>0.082160</td>\n",
       "      <td>5.184306e-02</td>\n",
       "      <td>0.078115</td>\n",
       "      <td>0.087881</td>\n",
       "      <td>0.027587</td>\n",
       "      <td>0.023591</td>\n",
       "      <td>0.175968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Onions</th>\n",
       "      <td>0.028344</td>\n",
       "      <td>0.014653</td>\n",
       "      <td>-0.004037</td>\n",
       "      <td>0.051690</td>\n",
       "      <td>0.043624</td>\n",
       "      <td>0.045234</td>\n",
       "      <td>0.026020</td>\n",
       "      <td>0.026170</td>\n",
       "      <td>0.069938</td>\n",
       "      <td>5.697349e-02</td>\n",
       "      <td>0.066008</td>\n",
       "      <td>0.031761</td>\n",
       "      <td>0.047450</td>\n",
       "      <td>0.072197</td>\n",
       "      <td>0.322043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Orange/tangerine</th>\n",
       "      <td>0.062839</td>\n",
       "      <td>0.021212</td>\n",
       "      <td>0.037592</td>\n",
       "      <td>0.041828</td>\n",
       "      <td>0.052159</td>\n",
       "      <td>0.084348</td>\n",
       "      <td>0.158066</td>\n",
       "      <td>0.049671</td>\n",
       "      <td>0.098695</td>\n",
       "      <td>6.934952e-02</td>\n",
       "      <td>0.061431</td>\n",
       "      <td>0.043334</td>\n",
       "      <td>0.014848</td>\n",
       "      <td>0.013041</td>\n",
       "      <td>0.211652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other vegetables (fresh or canned)</th>\n",
       "      <td>-0.024739</td>\n",
       "      <td>0.126333</td>\n",
       "      <td>0.053614</td>\n",
       "      <td>-0.010630</td>\n",
       "      <td>0.097943</td>\n",
       "      <td>0.068959</td>\n",
       "      <td>0.035589</td>\n",
       "      <td>-0.108061</td>\n",
       "      <td>0.074483</td>\n",
       "      <td>1.515885e-01</td>\n",
       "      <td>-0.000268</td>\n",
       "      <td>0.079156</td>\n",
       "      <td>0.012786</td>\n",
       "      <td>0.021057</td>\n",
       "      <td>0.229056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Palm oil</th>\n",
       "      <td>-0.008042</td>\n",
       "      <td>0.083789</td>\n",
       "      <td>0.004990</td>\n",
       "      <td>0.085870</td>\n",
       "      <td>0.016412</td>\n",
       "      <td>0.026375</td>\n",
       "      <td>0.055513</td>\n",
       "      <td>0.018027</td>\n",
       "      <td>0.046437</td>\n",
       "      <td>7.582694e-02</td>\n",
       "      <td>0.127327</td>\n",
       "      <td>0.014345</td>\n",
       "      <td>0.049636</td>\n",
       "      <td>0.039322</td>\n",
       "      <td>0.286405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pineapples</th>\n",
       "      <td>0.034971</td>\n",
       "      <td>0.010693</td>\n",
       "      <td>0.042640</td>\n",
       "      <td>-0.050638</td>\n",
       "      <td>0.039806</td>\n",
       "      <td>0.049608</td>\n",
       "      <td>0.107058</td>\n",
       "      <td>-0.094647</td>\n",
       "      <td>-0.029737</td>\n",
       "      <td>5.125779e-02</td>\n",
       "      <td>-0.007099</td>\n",
       "      <td>0.014889</td>\n",
       "      <td>0.098692</td>\n",
       "      <td>0.038717</td>\n",
       "      <td>0.180877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Plantains</th>\n",
       "      <td>0.070069</td>\n",
       "      <td>0.154872</td>\n",
       "      <td>0.108133</td>\n",
       "      <td>0.100389</td>\n",
       "      <td>0.140681</td>\n",
       "      <td>0.117783</td>\n",
       "      <td>0.182774</td>\n",
       "      <td>0.065346</td>\n",
       "      <td>0.059474</td>\n",
       "      <td>5.915016e-02</td>\n",
       "      <td>0.141509</td>\n",
       "      <td>0.016716</td>\n",
       "      <td>0.100259</td>\n",
       "      <td>0.100861</td>\n",
       "      <td>0.065388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rice-Imported</th>\n",
       "      <td>0.031562</td>\n",
       "      <td>0.190569</td>\n",
       "      <td>0.048920</td>\n",
       "      <td>0.138436</td>\n",
       "      <td>0.090646</td>\n",
       "      <td>0.245140</td>\n",
       "      <td>0.178468</td>\n",
       "      <td>0.108508</td>\n",
       "      <td>0.097398</td>\n",
       "      <td>1.346403e-01</td>\n",
       "      <td>0.205625</td>\n",
       "      <td>0.134045</td>\n",
       "      <td>0.140734</td>\n",
       "      <td>0.083182</td>\n",
       "      <td>0.504086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rice-local</th>\n",
       "      <td>0.235522</td>\n",
       "      <td>0.142063</td>\n",
       "      <td>0.106548</td>\n",
       "      <td>0.130315</td>\n",
       "      <td>0.056572</td>\n",
       "      <td>0.112045</td>\n",
       "      <td>0.117969</td>\n",
       "      <td>0.101608</td>\n",
       "      <td>0.155178</td>\n",
       "      <td>2.456903e-02</td>\n",
       "      <td>0.084441</td>\n",
       "      <td>0.023051</td>\n",
       "      <td>0.024474</td>\n",
       "      <td>0.149101</td>\n",
       "      <td>0.649946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sachet water</th>\n",
       "      <td>-0.050036</td>\n",
       "      <td>0.011843</td>\n",
       "      <td>-0.071714</td>\n",
       "      <td>0.016340</td>\n",
       "      <td>0.021713</td>\n",
       "      <td>0.046515</td>\n",
       "      <td>0.025247</td>\n",
       "      <td>-0.114484</td>\n",
       "      <td>-0.051710</td>\n",
       "      <td>-2.654213e-02</td>\n",
       "      <td>0.072687</td>\n",
       "      <td>-0.010634</td>\n",
       "      <td>-0.051092</td>\n",
       "      <td>-0.059065</td>\n",
       "      <td>0.427609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Soft drinks (Coca cola, spirit etc)</th>\n",
       "      <td>0.019878</td>\n",
       "      <td>0.055400</td>\n",
       "      <td>0.020369</td>\n",
       "      <td>0.071855</td>\n",
       "      <td>0.079734</td>\n",
       "      <td>0.104544</td>\n",
       "      <td>0.111133</td>\n",
       "      <td>-0.013417</td>\n",
       "      <td>0.027401</td>\n",
       "      <td>3.549516e-02</td>\n",
       "      <td>0.076675</td>\n",
       "      <td>0.066147</td>\n",
       "      <td>0.000801</td>\n",
       "      <td>-0.068077</td>\n",
       "      <td>0.223496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sugar</th>\n",
       "      <td>0.069818</td>\n",
       "      <td>0.215184</td>\n",
       "      <td>0.077732</td>\n",
       "      <td>0.107936</td>\n",
       "      <td>0.145846</td>\n",
       "      <td>0.151165</td>\n",
       "      <td>0.040849</td>\n",
       "      <td>0.037970</td>\n",
       "      <td>0.150018</td>\n",
       "      <td>9.698721e-02</td>\n",
       "      <td>0.120533</td>\n",
       "      <td>0.112642</td>\n",
       "      <td>-0.039974</td>\n",
       "      <td>-0.133297</td>\n",
       "      <td>0.369131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <td>0.022577</td>\n",
       "      <td>0.039896</td>\n",
       "      <td>0.034979</td>\n",
       "      <td>0.175059</td>\n",
       "      <td>-0.015309</td>\n",
       "      <td>-0.048072</td>\n",
       "      <td>-0.074557</td>\n",
       "      <td>0.110313</td>\n",
       "      <td>0.067849</td>\n",
       "      <td>3.063824e-02</td>\n",
       "      <td>0.022007</td>\n",
       "      <td>0.001933</td>\n",
       "      <td>-0.009569</td>\n",
       "      <td>0.224169</td>\n",
       "      <td>0.229141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tea</th>\n",
       "      <td>0.128394</td>\n",
       "      <td>-0.182782</td>\n",
       "      <td>-0.054116</td>\n",
       "      <td>-0.003283</td>\n",
       "      <td>-0.034689</td>\n",
       "      <td>-0.008443</td>\n",
       "      <td>-0.022654</td>\n",
       "      <td>-0.116460</td>\n",
       "      <td>-0.017558</td>\n",
       "      <td>-1.496209e-01</td>\n",
       "      <td>-0.016611</td>\n",
       "      <td>-0.085098</td>\n",
       "      <td>0.146087</td>\n",
       "      <td>0.124593</td>\n",
       "      <td>0.486475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <td>0.029677</td>\n",
       "      <td>-0.028415</td>\n",
       "      <td>-0.069827</td>\n",
       "      <td>-0.022324</td>\n",
       "      <td>0.024931</td>\n",
       "      <td>0.083855</td>\n",
       "      <td>0.003042</td>\n",
       "      <td>-0.078219</td>\n",
       "      <td>-0.009420</td>\n",
       "      <td>2.706373e-02</td>\n",
       "      <td>0.052196</td>\n",
       "      <td>0.016105</td>\n",
       "      <td>0.064547</td>\n",
       "      <td>0.034630</td>\n",
       "      <td>0.303025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tomatoes</th>\n",
       "      <td>-0.011822</td>\n",
       "      <td>0.041274</td>\n",
       "      <td>0.022443</td>\n",
       "      <td>0.019055</td>\n",
       "      <td>0.033369</td>\n",
       "      <td>0.014018</td>\n",
       "      <td>0.016700</td>\n",
       "      <td>0.010866</td>\n",
       "      <td>0.045620</td>\n",
       "      <td>1.480582e-02</td>\n",
       "      <td>0.074541</td>\n",
       "      <td>0.021682</td>\n",
       "      <td>0.062196</td>\n",
       "      <td>0.065249</td>\n",
       "      <td>0.360306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White beans</th>\n",
       "      <td>0.101548</td>\n",
       "      <td>0.085012</td>\n",
       "      <td>0.024664</td>\n",
       "      <td>0.099476</td>\n",
       "      <td>0.085855</td>\n",
       "      <td>0.056639</td>\n",
       "      <td>0.113576</td>\n",
       "      <td>0.093698</td>\n",
       "      <td>0.102571</td>\n",
       "      <td>6.466621e-02</td>\n",
       "      <td>0.023207</td>\n",
       "      <td>0.060743</td>\n",
       "      <td>0.069916</td>\n",
       "      <td>0.100083</td>\n",
       "      <td>0.270242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yam-roots</th>\n",
       "      <td>0.013173</td>\n",
       "      <td>0.034806</td>\n",
       "      <td>0.067913</td>\n",
       "      <td>0.059875</td>\n",
       "      <td>0.040960</td>\n",
       "      <td>0.069798</td>\n",
       "      <td>0.050798</td>\n",
       "      <td>-0.063235</td>\n",
       "      <td>0.052264</td>\n",
       "      <td>3.412164e-02</td>\n",
       "      <td>0.094128</td>\n",
       "      <td>0.040643</td>\n",
       "      <td>0.024213</td>\n",
       "      <td>0.053291</td>\n",
       "      <td>0.366944</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         delta                                \\\n",
       "k                                        M 0-3     M 4-8    M 9-13   M 14-18   \n",
       "i                                                                              \n",
       "(Cocoyam, Spinach, etc)               0.059970 -0.026824 -0.128255 -0.060140   \n",
       "Agricultural eggs                     0.086844  0.059903  0.027056  0.020432   \n",
       "Bananas                               0.112941  0.019600  0.028835  0.030731   \n",
       "Beef                                  0.041234  0.017796  0.033165  0.038998   \n",
       "Bread                                -0.026338  0.063221  0.001727  0.057792   \n",
       "Brown beans                           0.014834  0.091460  0.068840  0.029102   \n",
       "Chicken                              -0.061032  0.033191 -0.050040 -0.038478   \n",
       "Chocolate drinks                     -0.035630  0.055367  0.068203  0.017425   \n",
       "Condiments,(salt,spices,pepper, etc)  0.148230  0.006426  0.044869 -0.000825   \n",
       "Fish-Dried                            0.155122  0.026463  0.001232  0.097397   \n",
       "Fish-Fresh                           -0.080494  0.004656  0.041046 -0.004362   \n",
       "Fish-Frozen                           0.058999  0.005119  0.006594  0.050949   \n",
       "Fish-Smoked                          -0.041197  0.043157 -0.019277  0.053862   \n",
       "Garden eggs/egg plant                 0.000739  0.037447 -0.130051  0.129735   \n",
       "Gari -Yellow                         -0.049401 -0.014213  0.034010  0.051743   \n",
       "Gari-White                           -0.027567 -0.005664  0.127520  0.021062   \n",
       "Goat                                  0.074985 -0.016815 -0.062995  0.118926   \n",
       "Groundnut oil                         0.065055  0.054413  0.067312  0.091114   \n",
       "Malt drinks                           0.068250  0.042481  0.056144  0.057165   \n",
       "Milk powder                           0.009672 -0.018615  0.002166  0.021498   \n",
       "Milk tinned (unsweetened)             0.081237  0.063547 -0.009673  0.066668   \n",
       "Okra-fresh                            0.000071  0.074140  0.041411  0.014963   \n",
       "Onions                                0.028344  0.014653 -0.004037  0.051690   \n",
       "Orange/tangerine                      0.062839  0.021212  0.037592  0.041828   \n",
       "Other vegetables (fresh or canned)   -0.024739  0.126333  0.053614 -0.010630   \n",
       "Palm oil                             -0.008042  0.083789  0.004990  0.085870   \n",
       "Pineapples                            0.034971  0.010693  0.042640 -0.050638   \n",
       "Plantains                             0.070069  0.154872  0.108133  0.100389   \n",
       "Rice-Imported                         0.031562  0.190569  0.048920  0.138436   \n",
       "Rice-local                            0.235522  0.142063  0.106548  0.130315   \n",
       "Sachet water                         -0.050036  0.011843 -0.071714  0.016340   \n",
       "Soft drinks (Coca cola, spirit etc)   0.019878  0.055400  0.020369  0.071855   \n",
       "Sugar                                 0.069818  0.215184  0.077732  0.107936   \n",
       "Sweet Potatoes                        0.022577  0.039896  0.034979  0.175059   \n",
       "Tea                                   0.128394 -0.182782 -0.054116 -0.003283   \n",
       "Tomato puree(canned)                  0.029677 -0.028415 -0.069827 -0.022324   \n",
       "Tomatoes                             -0.011822  0.041274  0.022443  0.019055   \n",
       "White beans                           0.101548  0.085012  0.024664  0.099476   \n",
       "Yam-roots                             0.013173  0.034806  0.067913  0.059875   \n",
       "\n",
       "                                                                              \\\n",
       "k                                      M 19-30   M 31-50     M 51+     F 0-3   \n",
       "i                                                                              \n",
       "(Cocoyam, Spinach, etc)              -0.066222 -0.203679 -0.003154 -0.110133   \n",
       "Agricultural eggs                     0.009668  0.162421  0.187265 -0.030647   \n",
       "Bananas                               0.057242  0.092288  0.082695 -0.005638   \n",
       "Beef                                  0.083915  0.071213  0.120941  0.023505   \n",
       "Bread                                 0.043891  0.078987  0.101278  0.003712   \n",
       "Brown beans                           0.034687  0.146752  0.119398  0.011646   \n",
       "Chicken                              -0.003820  0.006639  0.103351 -0.066502   \n",
       "Chocolate drinks                     -0.019891  0.009374  0.086222 -0.002688   \n",
       "Condiments,(salt,spices,pepper, etc)  0.024444  0.072649  0.062000  0.017190   \n",
       "Fish-Dried                            0.084522  0.179060  0.158097 -0.045523   \n",
       "Fish-Fresh                            0.039594  0.123120  0.134129 -0.087933   \n",
       "Fish-Frozen                           0.073138  0.092317  0.116882  0.081598   \n",
       "Fish-Smoked                          -0.000638 -0.004062  0.008987  0.033863   \n",
       "Garden eggs/egg plant                 0.051826  0.047545 -0.003457 -0.133323   \n",
       "Gari -Yellow                          0.049269  0.077268  0.077347 -0.074477   \n",
       "Gari-White                            0.034031  0.170529  0.045180  0.019730   \n",
       "Goat                                  0.052371  0.015405  0.084998 -0.025937   \n",
       "Groundnut oil                         0.070049  0.160545  0.064058  0.024082   \n",
       "Malt drinks                           0.088148  0.058488  0.110959 -0.039787   \n",
       "Milk powder                           0.030419  0.088972  0.127245  0.118727   \n",
       "Milk tinned (unsweetened)            -0.001520 -0.028025  0.052931 -0.031587   \n",
       "Okra-fresh                            0.079703  0.096141  0.093903 -0.036283   \n",
       "Onions                                0.043624  0.045234  0.026020  0.026170   \n",
       "Orange/tangerine                      0.052159  0.084348  0.158066  0.049671   \n",
       "Other vegetables (fresh or canned)    0.097943  0.068959  0.035589 -0.108061   \n",
       "Palm oil                              0.016412  0.026375  0.055513  0.018027   \n",
       "Pineapples                            0.039806  0.049608  0.107058 -0.094647   \n",
       "Plantains                             0.140681  0.117783  0.182774  0.065346   \n",
       "Rice-Imported                         0.090646  0.245140  0.178468  0.108508   \n",
       "Rice-local                            0.056572  0.112045  0.117969  0.101608   \n",
       "Sachet water                          0.021713  0.046515  0.025247 -0.114484   \n",
       "Soft drinks (Coca cola, spirit etc)   0.079734  0.104544  0.111133 -0.013417   \n",
       "Sugar                                 0.145846  0.151165  0.040849  0.037970   \n",
       "Sweet Potatoes                       -0.015309 -0.048072 -0.074557  0.110313   \n",
       "Tea                                  -0.034689 -0.008443 -0.022654 -0.116460   \n",
       "Tomato puree(canned)                  0.024931  0.083855  0.003042 -0.078219   \n",
       "Tomatoes                              0.033369  0.014018  0.016700  0.010866   \n",
       "White beans                           0.085855  0.056639  0.113576  0.093698   \n",
       "Yam-roots                             0.040960  0.069798  0.050798 -0.063235   \n",
       "\n",
       "                                                                        \\\n",
       "k                                        F 4-8        F 9-13   F 14-18   \n",
       "i                                                                        \n",
       "(Cocoyam, Spinach, etc)              -0.029828 -3.905910e-02 -0.065547   \n",
       "Agricultural eggs                     0.037358  3.864903e-02  0.069396   \n",
       "Bananas                               0.001193  8.091823e-02  0.027608   \n",
       "Beef                                  0.048921  9.010419e-02  0.094665   \n",
       "Bread                                 0.050708  5.207216e-02  0.055545   \n",
       "Brown beans                          -0.004123  1.634427e-01  0.118931   \n",
       "Chicken                              -0.033737 -3.769419e-02 -0.073332   \n",
       "Chocolate drinks                      0.054594 -8.011901e-02  0.082074   \n",
       "Condiments,(salt,spices,pepper, etc)  0.115625  1.286864e-01 -0.000847   \n",
       "Fish-Dried                            0.088062  2.077112e-02  0.109638   \n",
       "Fish-Fresh                            0.044270 -3.795449e-02  0.063810   \n",
       "Fish-Frozen                           0.036344  8.648224e-02  0.061256   \n",
       "Fish-Smoked                           0.124475  3.642729e-02  0.111974   \n",
       "Garden eggs/egg plant                 0.061322 -2.445847e-02 -0.056014   \n",
       "Gari -Yellow                          0.085948  6.789672e-02 -0.022039   \n",
       "Gari-White                            0.018731  1.112754e-01  0.061417   \n",
       "Goat                                 -0.056854  4.049850e-02  0.002154   \n",
       "Groundnut oil                         0.060424  7.836431e-02  0.123231   \n",
       "Malt drinks                           0.073434  1.231474e-02  0.042965   \n",
       "Milk powder                          -0.045061 -3.552280e-07  0.014775   \n",
       "Milk tinned (unsweetened)             0.033148 -1.705808e-02  0.100396   \n",
       "Okra-fresh                            0.082160  5.184306e-02  0.078115   \n",
       "Onions                                0.069938  5.697349e-02  0.066008   \n",
       "Orange/tangerine                      0.098695  6.934952e-02  0.061431   \n",
       "Other vegetables (fresh or canned)    0.074483  1.515885e-01 -0.000268   \n",
       "Palm oil                              0.046437  7.582694e-02  0.127327   \n",
       "Pineapples                           -0.029737  5.125779e-02 -0.007099   \n",
       "Plantains                             0.059474  5.915016e-02  0.141509   \n",
       "Rice-Imported                         0.097398  1.346403e-01  0.205625   \n",
       "Rice-local                            0.155178  2.456903e-02  0.084441   \n",
       "Sachet water                         -0.051710 -2.654213e-02  0.072687   \n",
       "Soft drinks (Coca cola, spirit etc)   0.027401  3.549516e-02  0.076675   \n",
       "Sugar                                 0.150018  9.698721e-02  0.120533   \n",
       "Sweet Potatoes                        0.067849  3.063824e-02  0.022007   \n",
       "Tea                                  -0.017558 -1.496209e-01 -0.016611   \n",
       "Tomato puree(canned)                 -0.009420  2.706373e-02  0.052196   \n",
       "Tomatoes                              0.045620  1.480582e-02  0.074541   \n",
       "White beans                           0.102571  6.466621e-02  0.023207   \n",
       "Yam-roots                             0.052264  3.412164e-02  0.094128   \n",
       "\n",
       "                                                                              \n",
       "k                                      F 19-30   F 31-50     F 51+ log Hsize  \n",
       "i                                                                             \n",
       "(Cocoyam, Spinach, etc)              -0.039992  0.074851 -0.026010  0.455216  \n",
       "Agricultural eggs                     0.056060  0.043409  0.007082  0.364332  \n",
       "Bananas                               0.054544  0.030339  0.028244  0.183273  \n",
       "Beef                                  0.083271  0.064280  0.019953  0.245994  \n",
       "Bread                                 0.050361  0.044239  0.009327  0.390736  \n",
       "Brown beans                           0.031816  0.063036  0.067179  0.218931  \n",
       "Chicken                               0.013690  0.148931  0.065574  0.360872  \n",
       "Chocolate drinks                      0.076718 -0.059831 -0.013869  0.544797  \n",
       "Condiments,(salt,spices,pepper, etc)  0.011411  0.031594  0.002202  0.341355  \n",
       "Fish-Dried                            0.075742  0.061020  0.044019  0.192434  \n",
       "Fish-Fresh                            0.146593  0.098645  0.152332  0.094940  \n",
       "Fish-Frozen                           0.016630  0.085143  0.126944  0.180569  \n",
       "Fish-Smoked                           0.019259 -0.027527  0.113652  0.311213  \n",
       "Garden eggs/egg plant                 0.053827  0.064776 -0.005209  0.154766  \n",
       "Gari -Yellow                          0.047046 -0.018677 -0.048561  0.444479  \n",
       "Gari-White                            0.062529  0.043093  0.019069  0.330706  \n",
       "Goat                                  0.039837 -0.048295 -0.069985  0.308494  \n",
       "Groundnut oil                         0.073113  0.031765  0.037063  0.132225  \n",
       "Malt drinks                           0.009565  0.056179  0.054838  0.184947  \n",
       "Milk powder                           0.022588 -0.007110 -0.095894  0.601637  \n",
       "Milk tinned (unsweetened)             0.023336  0.009617 -0.005414  0.177990  \n",
       "Okra-fresh                            0.087881  0.027587  0.023591  0.175968  \n",
       "Onions                                0.031761  0.047450  0.072197  0.322043  \n",
       "Orange/tangerine                      0.043334  0.014848  0.013041  0.211652  \n",
       "Other vegetables (fresh or canned)    0.079156  0.012786  0.021057  0.229056  \n",
       "Palm oil                              0.014345  0.049636  0.039322  0.286405  \n",
       "Pineapples                            0.014889  0.098692  0.038717  0.180877  \n",
       "Plantains                             0.016716  0.100259  0.100861  0.065388  \n",
       "Rice-Imported                         0.134045  0.140734  0.083182  0.504086  \n",
       "Rice-local                            0.023051  0.024474  0.149101  0.649946  \n",
       "Sachet water                         -0.010634 -0.051092 -0.059065  0.427609  \n",
       "Soft drinks (Coca cola, spirit etc)   0.066147  0.000801 -0.068077  0.223496  \n",
       "Sugar                                 0.112642 -0.039974 -0.133297  0.369131  \n",
       "Sweet Potatoes                        0.001933 -0.009569  0.224169  0.229141  \n",
       "Tea                                  -0.085098  0.146087  0.124593  0.486475  \n",
       "Tomato puree(canned)                  0.016105  0.064547  0.034630  0.303025  \n",
       "Tomatoes                              0.021682  0.062196  0.065249  0.360306  \n",
       "White beans                           0.060743  0.069916  0.100083  0.270242  \n",
       "Yam-roots                             0.040643  0.024213  0.053291  0.366944  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1.delta.to_dataframe().unstack('k')\n",
    "result4.delta.to_dataframe().unstack('k')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also the good-time constants $a_{it}$ (this captures the effects of prices)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"9\" halign=\"left\">a</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>Bread</th>\n",
       "      <th>Condiments,(salt,spices,pepper, etc)</th>\n",
       "      <th>Groundnut oil</th>\n",
       "      <th>Onions</th>\n",
       "      <th>Palm oil</th>\n",
       "      <th>Rice-local</th>\n",
       "      <th>Sugar</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>White beans</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <th>1</th>\n",
       "      <td>4.132231</td>\n",
       "      <td>3.761195</td>\n",
       "      <td>4.355794</td>\n",
       "      <td>3.539646</td>\n",
       "      <td>5.324580</td>\n",
       "      <td>2.455150</td>\n",
       "      <td>2.376955</td>\n",
       "      <td>2.690814</td>\n",
       "      <td>4.727037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <th>1</th>\n",
       "      <td>4.028556</td>\n",
       "      <td>3.931693</td>\n",
       "      <td>3.893221</td>\n",
       "      <td>3.369722</td>\n",
       "      <td>5.162490</td>\n",
       "      <td>2.555986</td>\n",
       "      <td>1.724645</td>\n",
       "      <td>2.469391</td>\n",
       "      <td>5.317079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <th>1</th>\n",
       "      <td>4.234435</td>\n",
       "      <td>4.438573</td>\n",
       "      <td>4.592232</td>\n",
       "      <td>3.224604</td>\n",
       "      <td>5.175408</td>\n",
       "      <td>2.948691</td>\n",
       "      <td>2.232912</td>\n",
       "      <td>2.480203</td>\n",
       "      <td>5.461796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <th>1</th>\n",
       "      <td>4.443681</td>\n",
       "      <td>4.508119</td>\n",
       "      <td>4.499117</td>\n",
       "      <td>3.743854</td>\n",
       "      <td>5.471405</td>\n",
       "      <td>2.971027</td>\n",
       "      <td>2.077796</td>\n",
       "      <td>2.694839</td>\n",
       "      <td>5.639164</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               a                                                               \\\n",
       "i          Bread Condiments,(salt,spices,pepper, etc) Groundnut oil    Onions   \n",
       "t    m                                                                          \n",
       "2010 1  4.132231                             3.761195      4.355794  3.539646   \n",
       "2012 1  4.028556                             3.931693      3.893221  3.369722   \n",
       "2015 1  4.234435                             4.438573      4.592232  3.224604   \n",
       "2018 1  4.443681                             4.508119      4.499117  3.743854   \n",
       "\n",
       "                                                             \n",
       "i       Palm oil Rice-local     Sugar  Tomatoes White beans  \n",
       "t    m                                                       \n",
       "2010 1  5.324580   2.455150  2.376955  2.690814    4.727037  \n",
       "2012 1  5.162490   2.555986  1.724645  2.469391    5.317079  \n",
       "2015 1  5.175408   2.948691  2.232912  2.480203    5.461796  \n",
       "2018 1  5.471405   2.971027  2.077796  2.694839    5.639164  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1.a.to_dataframe().unstack('i')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Second step of Estimation\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second step involves using Singular Value Decomposition to find\n",
    "the rank one matrix that best approximates the residuals $e_{it}^j$.\n",
    "This can be interpreted as\n",
    "$$\n",
    "    -\\beta_i\\log\\lambda^j_t,\n",
    "$$\n",
    "where the $\\log\\lambda^j_t$ is the log of the marginal utility of\n",
    "expenditures (MUE) for household $j$ at time $t$, and where $\\beta_i$ are\n",
    "the corresponding &ldquo;Frisch elasticities&rdquo; that tell us how much\n",
    "demand changes as the MUE falls.\n",
    "\n",
    "Estimates can also be computed as a one-liner:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "i\n",
       "Bread                                   0.249771\n",
       "Condiments,(salt,spices,pepper, etc)    0.150775\n",
       "Groundnut oil                           0.105369\n",
       "Onions                                  0.401157\n",
       "Palm oil                                0.160994\n",
       "Rice-local                              0.018439\n",
       "Sugar                                   1.200716\n",
       "Tomatoes                                0.271085\n",
       "White beans                             0.103897\n",
       "Name: beta, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1.get_beta(as_df=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "i\n",
       "(Cocoyam, Spinach, etc)                 0.214391\n",
       "Agricultural eggs                       0.500903\n",
       "Bananas                                 0.310199\n",
       "Beef                                    0.261743\n",
       "Bread                                   0.262224\n",
       "Brown beans                             0.231783\n",
       "Chicken                                 0.212681\n",
       "Chocolate drinks                        0.503696\n",
       "Condiments,(salt,spices,pepper, etc)    0.419001\n",
       "Fish-Dried                              0.378614\n",
       "Fish-Fresh                              0.330833\n",
       "Fish-Frozen                             0.200550\n",
       "Fish-Smoked                             0.295947\n",
       "Garden eggs/egg plant                   0.288953\n",
       "Gari -Yellow                            0.247140\n",
       "Gari-White                              0.274865\n",
       "Goat                                    0.208295\n",
       "Groundnut oil                           0.325517\n",
       "Malt drinks                             0.328769\n",
       "Milk powder                             0.607743\n",
       "Milk tinned (unsweetened)               0.285548\n",
       "Okra-fresh                              0.257580\n",
       "Onions                                  0.346715\n",
       "Orange/tangerine                        0.305852\n",
       "Other vegetables (fresh or canned)      0.254765\n",
       "Palm oil                                0.267732\n",
       "Pineapples                              0.253503\n",
       "Plantains                               0.285294\n",
       "Rice-Imported                           0.322117\n",
       "Rice-local                              0.352096\n",
       "Sachet water                            0.280185\n",
       "Soft drinks (Coca cola, spirit etc)     0.310553\n",
       "Sugar                                   0.537008\n",
       "Sweet Potatoes                          0.385539\n",
       "Tea                                     0.334811\n",
       "Tomato puree(canned)                    0.335210\n",
       "Tomatoes                                0.286938\n",
       "White beans                             0.313100\n",
       "Yam-roots                               0.266059\n",
       "Name: beta, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result4.get_beta(as_df=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That&rsquo;s all there is to estimation!  Note that we didn&rsquo;t estimate\n",
    "demands for all goods&#x2014;lots of goods didn&rsquo;t have enough observations,\n",
    "and were automatically dropped.  (This can be controlled using the\n",
    "`min_proportion_items` and `min_xproducts` attributes when one\n",
    "instantiates the result object.)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assessment of Fit\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let&rsquo;s see how we did, by comparing total expenditures predicted by the\n",
    "model we&rsquo;ve estimated with actual total expenditures:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2b80138520>]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "\n",
    "xbar = np.exp(result1.y).sum(['m','i']).to_dataframe('xbar').replace(0,np.nan).squeeze()\n",
    "xhat = result1.get_predicted_expenditures().sum(['m','i']).to_dataframe('xhat').replace(0,np.nan).squeeze()\n",
    "\n",
    "# Make dataframe of actual & predicted\n",
    "df = pd.DataFrame({'Actual':np.log(xbar),'Predicted':np.log(xhat)})\n",
    "\n",
    "df.plot.scatter(x='Predicted',y='Actual')\n",
    "\n",
    "# Add 45 degree line\n",
    "v = plt.axis()\n",
    "vmin = np.max([v[0],v[2]])\n",
    "vmax = np.max([v[1],v[3]])\n",
    "plt.plot([vmin,vmax],[vmin,vmax])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2b242e78b0>]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "\n",
    "xbar = np.exp(result4.y).sum(['m','i']).to_dataframe('xbar').replace(0,np.nan).squeeze()\n",
    "xhat = result4.get_predicted_expenditures().sum(['m','i']).to_dataframe('xhat').replace(0,np.nan).squeeze()\n",
    "\n",
    "# Make dataframe of actual & predicted\n",
    "df = pd.DataFrame({'Actual':np.log(xbar),'Predicted':np.log(xhat)})\n",
    "\n",
    "df.plot.scatter(x='Predicted',y='Actual')\n",
    "\n",
    "# Add 45 degree line\n",
    "v = plt.axis()\n",
    "vmin = np.max([v[0],v[2]])\n",
    "vmax = np.max([v[1],v[3]])\n",
    "plt.plot([vmin,vmax],[vmin,vmax])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:           (j: 3197, i: 9, k: 15, t: 4, m: 1, kp: 15)\n",
       "Coordinates:\n",
       "  * j                 (j) int64 10005 10009 10013 10022 ... 379094 379096 379127\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * i                 (i) object &#x27;Bread&#x27; ... &#x27;White beans&#x27;\n",
       "  * k                 (k) &lt;U9 &#x27;M 0-3&#x27; &#x27;M 4-8&#x27; &#x27;M 9-13&#x27; ... &#x27;F 51+&#x27; &#x27;log Hsize&#x27;\n",
       "  * kp                (kp) &lt;U9 &#x27;M 0-3&#x27; &#x27;M 4-8&#x27; &#x27;M 9-13&#x27; ... &#x27;F 51+&#x27; &#x27;log Hsize&#x27;\n",
       "Data variables: (12/20)\n",
       "    alpha             object None\n",
       "    beta              (i) float64 0.2498 0.1508 0.1054 ... 1.201 0.2711 0.1039\n",
       "    delta             (k, i) float64 -0.003088 0.2643 0.1028 ... 1.308 -0.433\n",
       "    prices            object None\n",
       "    characteristics   (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386\n",
       "    loglambdas        (j, t, m) float64 nan nan nan nan nan ... nan nan nan nan\n",
       "    ...                ...\n",
       "    se_beta           object None\n",
       "    se_alpha          object None\n",
       "    se_a              (i, t, m) float64 0.08262 0.1346 ... 0.07711 0.08249\n",
       "    y                 (i, j, t, m) float64 nan nan nan nan ... nan nan nan nan\n",
       "    logp              object None\n",
       "    z                 (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-4ace0cf6-28b2-41f0-ac9a-b57f49a46cc0' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-4ace0cf6-28b2-41f0-ac9a-b57f49a46cc0' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>j</span>: 3197</li><li><span class='xr-has-index'>i</span>: 9</li><li><span class='xr-has-index'>k</span>: 15</li><li><span class='xr-has-index'>t</span>: 4</li><li><span class='xr-has-index'>m</span>: 1</li><li><span class='xr-has-index'>kp</span>: 15</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-89aa47bd-1dc9-4b35-98ee-c64dccb133ad' class='xr-section-summary-in' type='checkbox'  checked><label for='section-89aa47bd-1dc9-4b35-98ee-c64dccb133ad' class='xr-section-summary' >Coordinates: <span>(6)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>j</span></div><div class='xr-var-dims'>(j)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>10005 10009 10013 ... 379096 379127</div><input id='attrs-26f05097-2b8d-40d5-bed1-c65365da1a5f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-26f05097-2b8d-40d5-bed1-c65365da1a5f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b1833258-a15e-45e5-b1f6-49311d4bf187' class='xr-var-data-in' type='checkbox'><label for='data-b1833258-a15e-45e5-b1f6-49311d4bf187' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 10005,  10009,  10013, ..., 379094, 379096, 379127])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>t</span></div><div class='xr-var-dims'>(t)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>2010 2012 2015 2018</div><input id='attrs-8cd247f6-07c0-4ce5-a988-6fe4fc29b0a8' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8cd247f6-07c0-4ce5-a988-6fe4fc29b0a8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b1f1fe6e-b9ab-4602-9503-b9f7108969c5' class='xr-var-data-in' type='checkbox'><label for='data-b1f1fe6e-b9ab-4602-9503-b9f7108969c5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([2010, 2012, 2015, 2018])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>m</span></div><div class='xr-var-dims'>(m)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>1</div><input id='attrs-4d6b83ba-c421-4928-9927-8ec0ca46cecd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4d6b83ba-c421-4928-9927-8ec0ca46cecd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ebdae9a7-265f-4c31-a337-43997748abaa' class='xr-var-data-in' type='checkbox'><label for='data-ebdae9a7-265f-4c31-a337-43997748abaa' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([1])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>i</span></div><div class='xr-var-dims'>(i)</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>&#x27;Bread&#x27; ... &#x27;White beans&#x27;</div><input id='attrs-1cb90bb1-9d0c-4901-b2bc-90900ca4901c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1cb90bb1-9d0c-4901-b2bc-90900ca4901c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b3c74be0-c03a-4bde-8fb6-d87726252d89' class='xr-var-data-in' type='checkbox'><label for='data-b3c74be0-c03a-4bde-8fb6-d87726252d89' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;Bread&#x27;, &#x27;Condiments,(salt,spices,pepper, etc)&#x27;, &#x27;Groundnut oil&#x27;,\n",
       "       &#x27;Onions&#x27;, &#x27;Palm oil&#x27;, &#x27;Rice-local&#x27;, &#x27;Sugar&#x27;, &#x27;Tomatoes&#x27;, &#x27;White beans&#x27;],\n",
       "      dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>k</span></div><div class='xr-var-dims'>(k)</div><div class='xr-var-dtype'>&lt;U9</div><div class='xr-var-preview xr-preview'>&#x27;M 0-3&#x27; &#x27;M 4-8&#x27; ... &#x27;log Hsize&#x27;</div><input id='attrs-0c3fd949-26c2-4ebb-a617-24948c9b8b00' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0c3fd949-26c2-4ebb-a617-24948c9b8b00' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-45f8a772-81a3-444a-860c-ecf73bee37ba' class='xr-var-data-in' type='checkbox'><label for='data-45f8a772-81a3-444a-860c-ecf73bee37ba' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;M 0-3&#x27;, &#x27;M 4-8&#x27;, &#x27;M 9-13&#x27;, &#x27;M 14-18&#x27;, &#x27;M 19-30&#x27;, &#x27;M 31-50&#x27;, &#x27;M 51+&#x27;,\n",
       "       &#x27;F 0-3&#x27;, &#x27;F 4-8&#x27;, &#x27;F 9-13&#x27;, &#x27;F 14-18&#x27;, &#x27;F 19-30&#x27;, &#x27;F 31-50&#x27;, &#x27;F 51+&#x27;,\n",
       "       &#x27;log Hsize&#x27;], dtype=&#x27;&lt;U9&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>kp</span></div><div class='xr-var-dims'>(kp)</div><div class='xr-var-dtype'>&lt;U9</div><div class='xr-var-preview xr-preview'>&#x27;M 0-3&#x27; &#x27;M 4-8&#x27; ... &#x27;log Hsize&#x27;</div><input id='attrs-3f9a7774-443f-478a-88b3-929fdc766d89' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3f9a7774-443f-478a-88b3-929fdc766d89' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-435413ef-343c-4095-bedc-77308ec10c93' class='xr-var-data-in' type='checkbox'><label for='data-435413ef-343c-4095-bedc-77308ec10c93' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;M 0-3&#x27;, &#x27;M 4-8&#x27;, &#x27;M 9-13&#x27;, &#x27;M 14-18&#x27;, &#x27;M 19-30&#x27;, &#x27;M 31-50&#x27;, &#x27;M 51+&#x27;,\n",
       "       &#x27;F 0-3&#x27;, &#x27;F 4-8&#x27;, &#x27;F 9-13&#x27;, &#x27;F 14-18&#x27;, &#x27;F 19-30&#x27;, &#x27;F 31-50&#x27;, &#x27;F 51+&#x27;,\n",
       "       &#x27;log Hsize&#x27;], dtype=&#x27;&lt;U9&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-c705b511-6825-4ca4-8682-168d5314d174' class='xr-section-summary-in' type='checkbox'  ><label for='section-c705b511-6825-4ca4-8682-168d5314d174' class='xr-section-summary' >Data variables: <span>(20)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>alpha</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-c06e2ac9-775c-45ed-b487-a5f2a6936b3f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c06e2ac9-775c-45ed-b487-a5f2a6936b3f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6d9e4ad4-6cda-4695-b72f-263354221315' class='xr-var-data-in' type='checkbox'><label for='data-6d9e4ad4-6cda-4695-b72f-263354221315' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>beta</span></div><div class='xr-var-dims'>(i)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.2498 0.1508 ... 0.2711 0.1039</div><input id='attrs-115db892-bb32-4490-b318-825b22c55b58' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-115db892-bb32-4490-b318-825b22c55b58' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-373faed7-cacb-42bf-8e27-f542b6fcc245' class='xr-var-data-in' type='checkbox'><label for='data-373faed7-cacb-42bf-8e27-f542b6fcc245' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0.24977077, 0.15077535, 0.10536896, 0.40115695, 0.16099419,\n",
       "       0.01843854, 1.20071563, 0.27108503, 0.10389656])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>delta</span></div><div class='xr-var-dims'>(k, i)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-0.003088 0.2643 ... 1.308 -0.433</div><input id='attrs-2424383a-6326-4bba-8c17-652592180ec8' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2424383a-6326-4bba-8c17-652592180ec8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-38fc08f7-1026-445e-a7f2-4f1614a6082a' class='xr-var-data-in' type='checkbox'><label for='data-38fc08f7-1026-445e-a7f2-4f1614a6082a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-3.08830196e-03,  2.64284192e-01,  1.02787599e-01,\n",
       "         1.00305605e-01, -3.92936474e-03, -1.19734810e-01,\n",
       "         1.43216779e-01, -1.88498514e-02,  7.44602637e-02],\n",
       "       [ 8.29626126e-02,  2.31445986e-01, -3.89188536e-02,\n",
       "         5.68263770e-02,  1.23044240e-01, -4.83323874e-03,\n",
       "         1.21147817e-01, -5.70017698e-02,  1.76302923e-01],\n",
       "       [ 3.49886754e-02,  6.72662025e-02, -4.84254343e-02,\n",
       "         9.51688230e-02,  1.29280955e-01,  7.61235132e-02,\n",
       "         1.23898729e-01,  4.03459168e-02,  1.86693213e-01],\n",
       "       [ 1.69685599e-01,  1.35015073e-01,  3.22077473e-02,\n",
       "         4.44145039e-02,  5.36305588e-02, -1.77606225e-02,\n",
       "         1.39554585e-01, -4.06423547e-03,  9.83054545e-02],\n",
       "       [ 1.50241097e-02,  2.12800968e-01,  2.15458522e-02,\n",
       "         8.18896576e-02,  1.27674410e-01, -4.82985096e-02,\n",
       "         1.24787311e-02, -7.30016588e-02,  2.05888507e-01],\n",
       "       [ 2.99578189e-01, -8.74722087e-02,  2.47794599e-01,\n",
       "         5.82619231e-02, -4.16093832e-02,  1.02535765e-01,\n",
       "         1.70397670e-01, -1.34034894e-01,  2.80749843e-01],\n",
       "       [ 2.91809620e-01, -2.20205285e-02,  1.88257826e-01,\n",
       "         1.33200507e-01, -1.54937116e-01, -4.42779368e-02,\n",
       "...\n",
       "        -4.83692069e-02,  7.43455200e-02, -2.54231680e-02,\n",
       "        -1.28675556e-02, -4.74825399e-02,  1.93684500e-01],\n",
       "       [-3.21470264e-02,  7.33305837e-02,  4.79240512e-02,\n",
       "         1.03048298e-02,  1.08757274e-01,  9.41427663e-02,\n",
       "         3.00629325e-03, -1.03632128e-01,  1.22504278e-01],\n",
       "       [-3.97537264e-02,  7.32377553e-02, -6.39121437e-02,\n",
       "        -5.21125911e-02,  8.70738080e-02, -8.31551953e-04,\n",
       "        -6.91835519e-02, -1.55156682e-02,  5.86219102e-02],\n",
       "       [-7.26697665e-03,  2.76804816e-01,  1.52384748e-01,\n",
       "         1.85825273e-01,  1.65168198e-01,  1.95379912e-02,\n",
       "         6.08831381e-02, -1.17228479e-01,  1.36235723e-01],\n",
       "       [-1.04857157e-02,  2.43430435e-01,  5.02785032e-02,\n",
       "         6.41861915e-02,  5.51277130e-02, -1.80575297e-01,\n",
       "         7.59877313e-02, -1.74485581e-01,  1.33272179e-01],\n",
       "       [ 2.87865317e-02,  1.10919207e-01, -8.04701431e-02,\n",
       "        -6.47230999e-02,  7.68226331e-02, -1.26229667e-01,\n",
       "         1.26331408e-02, -6.94337660e-02,  2.74554434e-02],\n",
       "       [ 2.67500963e-01, -5.63308632e-01,  2.57256302e-01,\n",
       "         1.60344361e-01, -2.08556859e-01,  1.55300955e+00,\n",
       "         7.63389747e-01,  1.30780618e+00, -4.33031868e-01]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>prices</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-319aa0f1-d10d-49f9-a994-7fb1c3c4f324' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-319aa0f1-d10d-49f9-a994-7fb1c3c4f324' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-23ea1e95-2dcf-4467-b046-61d2179fc8f9' class='xr-var-data-in' type='checkbox'><label for='data-23ea1e95-2dcf-4467-b046-61d2179fc8f9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>characteristics</span></div><div class='xr-var-dims'>(k, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan 0.0 ... nan nan 1.386</div><input id='attrs-60bff31e-2c02-4187-b7b4-73bee6a19784' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-60bff31e-2c02-4187-b7b4-73bee6a19784' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-29a4fe56-84f0-4fd0-85a2-d288a03c8a22' class='xr-var-data-in' type='checkbox'><label for='data-29a4fe56-84f0-4fd0-85a2-d288a03c8a22' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.        ]],\n",
       "\n",
       "        [[0.        ],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.60943791]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [2.07944154]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.38629436]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>loglambdas</span></div><div class='xr-var-dims'>(j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-0da48213-1278-4357-9db5-a0cae2ccea4e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0da48213-1278-4357-9db5-a0cae2ccea4e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4bd1501f-67b5-4ba1-9669-874e0bdbd155' class='xr-var-data-in' type='checkbox'><label for='data-4bd1501f-67b5-4ba1-9669-874e0bdbd155' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[       nan],\n",
       "        [       nan],\n",
       "        [       nan],\n",
       "        [       nan]],\n",
       "\n",
       "       [[       nan],\n",
       "        [       nan],\n",
       "        [       nan],\n",
       "        [       nan]],\n",
       "\n",
       "       [[0.60759389],\n",
       "        [       nan],\n",
       "        [       nan],\n",
       "        [       nan]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[       nan],\n",
       "        [       nan],\n",
       "        [       nan],\n",
       "        [       nan]],\n",
       "\n",
       "       [[       nan],\n",
       "        [       nan],\n",
       "        [       nan],\n",
       "        [       nan]],\n",
       "\n",
       "       [[       nan],\n",
       "        [       nan],\n",
       "        [       nan],\n",
       "        [       nan]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>a</span></div><div class='xr-var-dims'>(i, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.132 4.029 4.234 ... 5.462 5.639</div><input id='attrs-4552dea2-4dee-4c40-95c1-0bc31affd21e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4552dea2-4dee-4c40-95c1-0bc31affd21e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-92b9e207-67b5-4999-b9bc-7064488bc24b' class='xr-var-data-in' type='checkbox'><label for='data-92b9e207-67b5-4999-b9bc-7064488bc24b' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[4.13223092],\n",
       "        [4.02855592],\n",
       "        [4.23443524],\n",
       "        [4.4436812 ]],\n",
       "\n",
       "       [[3.76119541],\n",
       "        [3.93169266],\n",
       "        [4.4385726 ],\n",
       "        [4.5081186 ]],\n",
       "\n",
       "       [[4.35579434],\n",
       "        [3.8932206 ],\n",
       "        [4.59223178],\n",
       "        [4.49911713]],\n",
       "\n",
       "       [[3.53964626],\n",
       "        [3.36972192],\n",
       "        [3.22460366],\n",
       "        [3.74385404]],\n",
       "\n",
       "...\n",
       "\n",
       "       [[2.45515005],\n",
       "        [2.55598563],\n",
       "        [2.94869104],\n",
       "        [2.97102695]],\n",
       "\n",
       "       [[2.37695503],\n",
       "        [1.72464539],\n",
       "        [2.23291165],\n",
       "        [2.07779604]],\n",
       "\n",
       "       [[2.69081368],\n",
       "        [2.46939076],\n",
       "        [2.48020313],\n",
       "        [2.69483872]],\n",
       "\n",
       "       [[4.72703729],\n",
       "        [5.31707946],\n",
       "        [5.46179623],\n",
       "        [5.63916404]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>yhat</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-c7aa94e8-e64b-4f5e-973a-7f2516ca1a18' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c7aa94e8-e64b-4f5e-973a-7f2516ca1a18' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-13efa116-bb05-4cbe-bd42-285bd54691e0' class='xr-var-data-in' type='checkbox'><label for='data-13efa116-bb05-4cbe-bd42-285bd54691e0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[5.04038682],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ce</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-347ac85c-473f-40c1-a77b-4d50f56ed82c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-347ac85c-473f-40c1-a77b-4d50f56ed82c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-060c7bfe-74f0-4413-85a1-5c1654c742cc' class='xr-var-data-in' type='checkbox'><label for='data-060c7bfe-74f0-4413-85a1-5c1654c742cc' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[-0.40465427],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "...\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>cehat</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-c020ec83-1eee-4a86-a74e-75113049a8fe' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c020ec83-1eee-4a86-a74e-75113049a8fe' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-737c3913-4122-4f3b-821b-272218102834' class='xr-var-data-in' type='checkbox'><label for='data-737c3913-4122-4f3b-821b-272218102834' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[-0.15175919],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "...\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>e</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-380c71be-5bff-4f9d-9044-2e20ba0bc626' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-380c71be-5bff-4f9d-9044-2e20ba0bc626' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1b31ad85-0dc3-4572-bdbe-8227848a2dfd' class='xr-var-data-in' type='checkbox'><label for='data-1b31ad85-0dc3-4572-bdbe-8227848a2dfd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[-0.25289508],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "...\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]],\n",
       "\n",
       "        [[        nan],\n",
       "         [        nan],\n",
       "         [        nan],\n",
       "         [        nan]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>delta_covariance</span></div><div class='xr-var-dims'>(i, k, kp)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.006375 0.005773 ... 0.6636</div><input id='attrs-b0c36b3b-edba-4f8a-92d6-c8afb5a82fda' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-b0c36b3b-edba-4f8a-92d6-c8afb5a82fda' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-77aeb98f-bfd9-4e32-8541-5bed1c6e8298' class='xr-var-data-in' type='checkbox'><label for='data-77aeb98f-bfd9-4e32-8541-5bed1c6e8298' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[ 6.37522233e-03,  5.77273006e-03,  3.30543012e-03, ...,\n",
       "          5.71253272e-03,  4.42355150e-03, -5.27836117e-02],\n",
       "        [ 5.77273006e-03,  1.14342252e-02,  5.61958636e-03, ...,\n",
       "          7.12907896e-03,  8.31234576e-03, -7.64770851e-02],\n",
       "        [ 3.30543012e-03,  5.61958636e-03,  7.11427159e-03, ...,\n",
       "          3.96884402e-03,  4.81813175e-03, -5.30033573e-02],\n",
       "        ...,\n",
       "        [ 5.71253272e-03,  7.12907896e-03,  3.96884402e-03, ...,\n",
       "          1.09145581e-02,  7.89276806e-03, -6.90007451e-02],\n",
       "        [ 4.42355150e-03,  8.31234576e-03,  4.81813175e-03, ...,\n",
       "          7.89276806e-03,  1.86029713e-02, -7.49657900e-02],\n",
       "        [-5.27836117e-02, -7.64770851e-02, -5.30033573e-02, ...,\n",
       "         -6.90007451e-02, -7.49657900e-02,  7.01353150e-01]],\n",
       "\n",
       "       [[ 2.77922599e-02,  1.58089317e-02,  1.52197325e-02, ...,\n",
       "          1.25397257e-02,  6.35251521e-03, -1.81404784e-01],\n",
       "        [ 1.58089317e-02,  3.07848537e-02,  1.51397298e-02, ...,\n",
       "          1.23884340e-02,  1.58231824e-02, -1.94578662e-01],\n",
       "        [ 1.52197325e-02,  1.51397298e-02,  2.56616585e-02, ...,\n",
       "          7.78050921e-03,  1.27603952e-02, -1.75999422e-01],\n",
       "...\n",
       "        [ 1.79731199e-03,  2.64933202e-03,  1.92403718e-03, ...,\n",
       "          8.00066138e-03,  2.77549826e-03, -3.22541930e-02],\n",
       "        [ 1.96132156e-03,  4.34938452e-03,  2.94144297e-03, ...,\n",
       "          2.77549826e-03,  7.61111632e-03, -3.45882131e-02],\n",
       "        [-2.99541491e-02, -4.71631271e-02, -3.31947793e-02, ...,\n",
       "         -3.22541930e-02, -3.45882131e-02,  4.00469457e-01]],\n",
       "\n",
       "       [[ 8.42364191e-03,  5.15998272e-03,  4.51753768e-03, ...,\n",
       "          6.11578999e-03,  3.92245376e-03, -5.30695848e-02],\n",
       "        [ 5.15998272e-03,  8.59253394e-03,  5.31240801e-03, ...,\n",
       "          6.01889693e-03,  6.91470433e-03, -6.21866767e-02],\n",
       "        [ 4.51753768e-03,  5.31240801e-03,  8.96279903e-03, ...,\n",
       "          7.27105500e-03,  4.77189704e-03, -6.29442423e-02],\n",
       "        ...,\n",
       "        [ 6.11578999e-03,  6.01889693e-03,  7.27105500e-03, ...,\n",
       "          1.23452916e-02,  8.15624860e-03, -7.55847481e-02],\n",
       "        [ 3.92245376e-03,  6.91470433e-03,  4.77189704e-03, ...,\n",
       "          8.15624860e-03,  1.90303429e-02, -6.77354904e-02],\n",
       "        [-5.30695848e-02, -6.21866767e-02, -6.29442423e-02, ...,\n",
       "         -7.55847481e-02, -6.77354904e-02,  6.63559352e-01]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>beta_covariance</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-9746e6ce-69d4-4610-88c1-a5bb462e12ae' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9746e6ce-69d4-4610-88c1-a5bb462e12ae' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3e99f11a-5dae-4c80-9f99-96f15befd4fa' class='xr-var-data-in' type='checkbox'><label for='data-3e99f11a-5dae-4c80-9f99-96f15befd4fa' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_delta</span></div><div class='xr-var-dims'>(i, k)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.07984 0.1069 ... 0.138 0.8146</div><input id='attrs-5c17f29e-d1a8-4e61-b503-6e5f45e3ea7d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5c17f29e-d1a8-4e61-b503-6e5f45e3ea7d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-341b7309-1390-4fc5-b428-d4580d5941d4' class='xr-var-data-in' type='checkbox'><label for='data-341b7309-1390-4fc5-b428-d4580d5941d4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[0.07984499, 0.10693094, 0.08434614, 0.09963279, 0.09565709,\n",
       "        0.17565986, 0.16094852, 0.10780948, 0.08855502, 0.09590853,\n",
       "        0.09411186, 0.09104717, 0.10447276, 0.13639271, 0.8374683 ],\n",
       "       [0.16671011, 0.17545613, 0.16019257, 0.15935877, 0.17550378,\n",
       "        0.24655994, 0.24437851, 0.1474498 , 0.16336787, 0.13712259,\n",
       "        0.1479007 , 0.152292  , 0.19573014, 0.19587088, 1.39986144],\n",
       "       [0.05675306, 0.06678544, 0.06506997, 0.07052429, 0.05264895,\n",
       "        0.15377326, 0.15950871, 0.06929043, 0.06218581, 0.07686324,\n",
       "        0.06562805, 0.06573407, 0.0841136 , 0.07301852, 0.39054592],\n",
       "       [0.05542875, 0.07093073, 0.06566588, 0.0601119 , 0.0592728 ,\n",
       "        0.11154248, 0.1295858 , 0.06874038, 0.06662908, 0.0755576 ,\n",
       "        0.06252749, 0.06568239, 0.07704359, 0.08153297, 0.48964199],\n",
       "       [0.07532867, 0.07339991, 0.06985355, 0.07554432, 0.07191226,\n",
       "        0.10975032, 0.11727241, 0.07394559, 0.07041282, 0.05678237,\n",
       "        0.06383079, 0.06180053, 0.08071352, 0.10047625, 0.56287192],\n",
       "       [0.07098807, 0.08124646, 0.08083479, 0.0812834 , 0.07351623,\n",
       "        0.16228366, 0.15367736, 0.1077248 , 0.0820566 , 0.08981416,\n",
       "        0.07115579, 0.09300677, 0.11564459, 0.10433875, 0.68554364],\n",
       "       [0.09524254, 0.12541469, 0.12411183, 0.12944305, 0.09921292,\n",
       "        0.21806524, 0.18879252, 0.12587287, 0.10062314, 0.13066422,\n",
       "        0.10417798, 0.12861016, 0.14378783, 0.1082569 , 0.88894403],\n",
       "       [0.0695114 , 0.09334383, 0.07132683, 0.081762  , 0.07126363,\n",
       "        0.12269352, 0.12481393, 0.09216684, 0.07774986, 0.07708026,\n",
       "        0.07776816, 0.07555562, 0.08944642, 0.08724171, 0.63282656],\n",
       "       [0.0917804 , 0.09269592, 0.09467206, 0.08689247, 0.08228462,\n",
       "        0.13920066, 0.16385623, 0.10818919, 0.09845837, 0.09742312,\n",
       "        0.08531544, 0.08883256, 0.11110937, 0.13795051, 0.81459152]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_beta</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-dbfdafe9-e665-4b1c-9c57-d392ef6a4b0c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-dbfdafe9-e665-4b1c-9c57-d392ef6a4b0c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c52267ea-9638-4d09-a1b5-b588b0b0e9ff' class='xr-var-data-in' type='checkbox'><label for='data-c52267ea-9638-4d09-a1b5-b588b0b0e9ff' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_alpha</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-00c2aa9e-b02e-4f34-ad29-1970fb140f33' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-00c2aa9e-b02e-4f34-ad29-1970fb140f33' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-6316f6d1-ce59-44a8-b32f-48c488110d75' class='xr-var-data-in' type='checkbox'><label for='data-6316f6d1-ce59-44a8-b32f-48c488110d75' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>se_a</span></div><div class='xr-var-dims'>(i, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.08262 0.1346 ... 0.07711 0.08249</div><input id='attrs-6b6fcc45-9bf1-4b13-9f63-d0d6664946d2' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6b6fcc45-9bf1-4b13-9f63-d0d6664946d2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-38338008-7e4c-47c5-a7a6-acc067fbcae3' class='xr-var-data-in' type='checkbox'><label for='data-38338008-7e4c-47c5-a7a6-acc067fbcae3' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[0.08262403],\n",
       "        [0.13461379],\n",
       "        [0.10141184],\n",
       "        [0.08482109]],\n",
       "\n",
       "       [[0.13542383],\n",
       "        [0.45594829],\n",
       "        [0.16459755],\n",
       "        [0.11767429]],\n",
       "\n",
       "       [[0.0684303 ],\n",
       "        [0.17014599],\n",
       "        [0.0986127 ],\n",
       "        [0.06307461]],\n",
       "\n",
       "       [[0.07046002],\n",
       "        [0.12681469],\n",
       "        [0.05740853],\n",
       "        [0.07878012]],\n",
       "\n",
       "...\n",
       "\n",
       "       [[0.09158169],\n",
       "        [0.14232597],\n",
       "        [0.0782732 ],\n",
       "        [0.06596129]],\n",
       "\n",
       "       [[0.19509347],\n",
       "        [0.19174735],\n",
       "        [0.13918274],\n",
       "        [0.0977941 ]],\n",
       "\n",
       "       [[0.09132344],\n",
       "        [0.1205575 ],\n",
       "        [0.07335552],\n",
       "        [0.07332498]],\n",
       "\n",
       "       [[0.07890821],\n",
       "        [0.17754927],\n",
       "        [0.07710743],\n",
       "        [0.08248606]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>y</span></div><div class='xr-var-dims'>(i, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan nan ... nan nan nan nan</div><input id='attrs-8b808dc3-9776-4066-bb1c-78382808648a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8b808dc3-9776-4066-bb1c-78382808648a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9b49f772-1b94-4142-a0eb-55fc2ef0eb3a' class='xr-var-data-in' type='checkbox'><label for='data-9b49f772-1b94-4142-a0eb-55fc2ef0eb3a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[4.78749174],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>logp</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>object</div><div class='xr-var-preview xr-preview'>None</div><input id='attrs-bf1a733d-0f78-4979-ad68-1d2dcb083387' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bf1a733d-0f78-4979-ad68-1d2dcb083387' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3dfa1f46-a14c-4f06-b70e-98a3e96bc32d' class='xr-var-data-in' type='checkbox'><label for='data-3dfa1f46-a14c-4f06-b70e-98a3e96bc32d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(None, dtype=object)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>z</span></div><div class='xr-var-dims'>(k, j, t, m)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>nan nan nan 0.0 ... nan nan 1.386</div><input id='attrs-7ec5f83a-98be-432e-a7ac-6e99fae57c4e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-7ec5f83a-98be-432e-a7ac-6e99fae57c4e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5c995581-5258-45a2-9d85-ae276d479166' class='xr-var-data-in' type='checkbox'><label for='data-5c995581-5258-45a2-9d85-ae276d479166' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [0.        ]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.        ]],\n",
       "\n",
       "        [[0.        ],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "...\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [       nan]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.60943791]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [2.07944154]],\n",
       "\n",
       "        [[       nan],\n",
       "         [       nan],\n",
       "         [       nan],\n",
       "         [1.38629436]]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-644f3017-b4ed-448b-a780-f4040ac82667' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-644f3017-b4ed-448b-a780-f4040ac82667' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:           (j: 3197, i: 9, k: 15, t: 4, m: 1, kp: 15)\n",
       "Coordinates:\n",
       "  * j                 (j) int64 10005 10009 10013 10022 ... 379094 379096 379127\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * i                 (i) object 'Bread' ... 'White beans'\n",
       "  * k                 (k) <U9 'M 0-3' 'M 4-8' 'M 9-13' ... 'F 51+' 'log Hsize'\n",
       "  * kp                (kp) <U9 'M 0-3' 'M 4-8' 'M 9-13' ... 'F 51+' 'log Hsize'\n",
       "Data variables: (12/20)\n",
       "    alpha             object None\n",
       "    beta              (i) float64 0.2498 0.1508 0.1054 ... 1.201 0.2711 0.1039\n",
       "    delta             (k, i) float64 -0.003088 0.2643 0.1028 ... 1.308 -0.433\n",
       "    prices            object None\n",
       "    characteristics   (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386\n",
       "    loglambdas        (j, t, m) float64 nan nan nan nan nan ... nan nan nan nan\n",
       "    ...                ...\n",
       "    se_beta           object None\n",
       "    se_alpha          object None\n",
       "    se_a              (i, t, m) float64 0.08262 0.1346 ... 0.07711 0.08249\n",
       "    y                 (i, j, t, m) float64 nan nan nan nan ... nan nan nan nan\n",
       "    logp              object None\n",
       "    z                 (k, j, t, m) float64 nan nan nan 0.0 ... nan nan nan 1.386"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1.to_dataset('icrisat.ds')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Nutritional Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read in the consumption data for Nigerian households."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key available for students@eep153.iam.gserviceaccount.com.\n",
      "Key available for students@eep153.iam.gserviceaccount.com.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>u</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">10001</th>\n",
       "      <th>1</th>\n",
       "      <td>Kilograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.89</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.42</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Litres</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.25</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">10002</th>\n",
       "      <th>1</th>\n",
       "      <td>Kilograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.89</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.30</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Litres</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.00</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>Kilograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.21</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>2. GRAMS (GR)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>500.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">379151</th>\n",
       "      <th>1</th>\n",
       "      <td>1. KILOGRAMS (KG)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3. LITRES (L)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>1. KILOGRAMS (KG)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>1. KILOGRAMS (KG)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>39172 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               u  (Cocoyam, Spinach, etc)  Agricultural eggs  \\\n",
       "t    j      m                                                                  \n",
       "2010 10001  1          Kilograms                      NaN               0.89   \n",
       "            1             Litres                      NaN                NaN   \n",
       "     10002  1          Kilograms                      NaN               0.89   \n",
       "            1             Litres                      NaN                NaN   \n",
       "     10003  1          Kilograms                      NaN               0.44   \n",
       "...                          ...                      ...                ...   \n",
       "2018 379148 1      2. GRAMS (GR)                      NaN                NaN   \n",
       "     379151 1  1. KILOGRAMS (KG)                      NaN                NaN   \n",
       "            1      3. LITRES (L)                      NaN                NaN   \n",
       "     379154 1  1. KILOGRAMS (KG)                      NaN                NaN   \n",
       "     379155 1  1. KILOGRAMS (KG)                      NaN                NaN   \n",
       "\n",
       "               Animal fat  Apples  Avocado pear  Baby milk powder  Bananas  \\\n",
       "t    j      m                                                                \n",
       "2010 10001  1         NaN     NaN           NaN               NaN     1.30   \n",
       "            1         NaN     NaN           NaN               NaN      NaN   \n",
       "     10002  1         NaN     NaN           NaN               NaN     1.30   \n",
       "            1         NaN     NaN           NaN               NaN      NaN   \n",
       "     10003  1         NaN     NaN           NaN               NaN     0.35   \n",
       "...                   ...     ...           ...               ...      ...   \n",
       "2018 379148 1         NaN     NaN           NaN               NaN      NaN   \n",
       "     379151 1         NaN     NaN           NaN               NaN      NaN   \n",
       "            1         NaN     NaN           NaN               NaN      NaN   \n",
       "     379154 1         NaN     NaN           NaN               NaN      NaN   \n",
       "     379155 1         NaN     NaN           NaN               NaN      NaN   \n",
       "\n",
       "                Beef  Beer (local and imported)  ...  Sweet Potatoes   Tea  \\\n",
       "t    j      m                                    ...                         \n",
       "2010 10001  1    1.0                        NaN  ...             1.5   NaN   \n",
       "            1    NaN                       2.25  ...             NaN   NaN   \n",
       "     10002  1    2.0                        NaN  ...             1.8  0.12   \n",
       "            1    NaN                       9.00  ...             NaN   NaN   \n",
       "     10003  1    0.3                        NaN  ...             1.4  0.30   \n",
       "...              ...                        ...  ...             ...   ...   \n",
       "2018 379148 1  500.0                        NaN  ...             NaN   NaN   \n",
       "     379151 1    NaN                        NaN  ...             NaN   NaN   \n",
       "            1    NaN                        NaN  ...             NaN   NaN   \n",
       "     379154 1    1.0                        NaN  ...             NaN   NaN   \n",
       "     379155 1    1.0                        NaN  ...             NaN   NaN   \n",
       "\n",
       "               Tomato puree(canned)  Tomatoes  Watermelon  Wheat flour  \\\n",
       "t    j      m                                                            \n",
       "2010 10001  1                  0.42       1.0         NaN          NaN   \n",
       "            1                   NaN       NaN         NaN          NaN   \n",
       "     10002  1                  0.56       1.0         NaN          NaN   \n",
       "            1                   NaN       NaN         NaN          NaN   \n",
       "     10003  1                  0.21       1.0         NaN          NaN   \n",
       "...                             ...       ...         ...          ...   \n",
       "2018 379148 1                   NaN       NaN         NaN          NaN   \n",
       "     379151 1                   NaN       NaN         NaN          2.0   \n",
       "            1                   NaN       NaN         NaN          NaN   \n",
       "     379154 1                   NaN       NaN         NaN          NaN   \n",
       "     379155 1                   NaN       NaN         NaN          NaN   \n",
       "\n",
       "               White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                     \n",
       "2010 10001  1          3.0             NaN        NaN       16.0  \n",
       "            1          NaN             NaN        NaN        NaN  \n",
       "     10002  1          2.0             NaN        NaN       13.8  \n",
       "            1          NaN             NaN        NaN        NaN  \n",
       "     10003  1          0.6             NaN        NaN        4.6  \n",
       "...                    ...             ...        ...        ...  \n",
       "2018 379148 1          NaN             NaN        NaN        NaN  \n",
       "     379151 1          NaN             NaN        NaN        NaN  \n",
       "            1          NaN             NaN        NaN        NaN  \n",
       "     379154 1          NaN             NaN        NaN        NaN  \n",
       "     379155 1          NaN             NaN        NaN        NaN  \n",
       "\n",
       "[39172 rows x 124 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdc_table = '1ed8FASRCkN9KwTWTvMzKT6UT4jWbSSZQEwZEmXCt8IQ'\n",
    "\n",
    "fdc_codes = read_sheets(fdc_table,sheet=\"Sheet1\")\n",
    "\n",
    "consumption = read_sheets(nigeria_consumption,sheet='Consumption')\n",
    "consumption.insert(loc=2, column='m', value=1)\n",
    "consumption = consumption.set_index(['t', 'j', 'm'])\n",
    "consumption = consumption.drop(columns=['Canned'])\n",
    "consumption"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a dictionary that will map all of the food units to their equivalent values in hectograms."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find every unit of measure used in the data in order to convert them to hectograms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1. KILOGRAMS (KG)',\n",
       " '2. GRAMS (G)',\n",
       " '2. GRAMS (GR)',\n",
       " '3. LITRES (L)',\n",
       " '4. CENTILITRES (CL)',\n",
       " 'Basin: Big/Large (40 kg)',\n",
       " 'Basin: Medium (25 kg)',\n",
       " 'Basin: Small (10 kg)',\n",
       " 'Basket: Big (50 kg)',\n",
       " 'Basket: Medium (30 kg)',\n",
       " 'Basket: Small (15 kg)',\n",
       " 'Bunch of Plantain/FFB: Small (5 kg)',\n",
       " 'Bunch of plantain/FFB: Big (15 kg)',\n",
       " 'Bunch of plantain/FFB: Medium (8 kg)',\n",
       " 'Grams',\n",
       " 'Kilograms',\n",
       " 'Litres',\n",
       " 'Mililitre',\n",
       " 'Sack/Bag: Medium (50 kg)',\n",
       " 'Sack/Bag: Small (20 kg)',\n",
       " 'Tuber of Yam: Big/Large (8 kg)',\n",
       " 'Tuber of Yam: Medium (5 kg)',\n",
       " 'Tuber of Yam: Small (3 kg)',\n",
       " 'Wheel Barrow: Small (60 kg)',\n",
       " 'centilitre (cl)',\n",
       " 'grams (g)',\n",
       " 'kilogram (kg)',\n",
       " 'litre (l)']"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "food_units_df = consumption.reset_index()\n",
    "unique_food_units = np.unique(pd.DataFrame(food_units_df['u'])).tolist()\n",
    "unique_food_units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create the dictionary itself.\n",
    "\n",
    "For example: food_unit_map_dict['Kilograms'] = 10 because 1 kilogram = 10 hectograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1. KILOGRAMS (KG)': 10,\n",
       " '2. GRAMS (G)': 0.01,\n",
       " '2. GRAMS (GR)': 0.01,\n",
       " '3. LITRES (L)': 10,\n",
       " '4. CENTILITRES (CL)': 0.1,\n",
       " 'Basin: Big/Large (40 kg)': 400,\n",
       " 'Basin: Medium (25 kg)': 250,\n",
       " 'Basin: Small (10 kg)': 100,\n",
       " 'Basket: Big (50 kg)': 500,\n",
       " 'Basket: Medium (30 kg)': 300,\n",
       " 'Basket: Small (15 kg)': 150,\n",
       " 'Bunch of Plantain/FFB: Small (5 kg)': 50,\n",
       " 'Bunch of plantain/FFB: Big (15 kg)': 150,\n",
       " 'Bunch of plantain/FFB: Medium (8 kg)': 80,\n",
       " 'Grams': 0.01,\n",
       " 'Kilograms': 10,\n",
       " 'Litres': 10,\n",
       " 'Mililitre': 0.01,\n",
       " 'Sack/Bag: Medium (50 kg)': 500,\n",
       " 'Sack/Bag: Small (20 kg)': 200,\n",
       " 'Tuber of Yam: Big/Large (8 kg)': 80,\n",
       " 'Tuber of Yam: Medium (5 kg)': 50,\n",
       " 'Tuber of Yam: Small (3 kg)': 30,\n",
       " 'Wheel Barrow: Small (60 kg)': 600,\n",
       " 'centilitre (cl)': 0.1,\n",
       " 'grams (g)': 0.01,\n",
       " 'kilogram (kg)': 10,\n",
       " 'litre (l)': 10}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = [10, 0.01, 0.01, 10, 0.1, 400, 250, 100, 500, 300, 150, 50, 150, 80, 0.01, 10, 10, 0.01, 500, 200, 80, 50, 30, 600, 0.1, 0.01, 10, 10]\n",
    "food_unit_map_dict = dict(zip(unique_food_units, values))\n",
    "food_unit_map_dict\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convert all of the original units to hectograms in a data frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>u</th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">10001</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">10002</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5.6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">379151</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>Hectograms</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>39172 rows × 124 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        u  (Cocoyam, Spinach, etc)  Agricultural eggs  \\\n",
       "t    j      m                                                           \n",
       "2010 10001  1  Hectograms                      NaN                8.9   \n",
       "            1  Hectograms                      NaN                NaN   \n",
       "     10002  1  Hectograms                      NaN                8.9   \n",
       "            1  Hectograms                      NaN                NaN   \n",
       "     10003  1  Hectograms                      NaN                4.4   \n",
       "...                   ...                      ...                ...   \n",
       "2018 379148 1  Hectograms                      NaN                NaN   \n",
       "     379151 1  Hectograms                      NaN                NaN   \n",
       "            1  Hectograms                      NaN                NaN   \n",
       "     379154 1  Hectograms                      NaN                NaN   \n",
       "     379155 1  Hectograms                      NaN                NaN   \n",
       "\n",
       "               Animal fat  Apples  Avocado pear  Baby milk powder  Bananas  \\\n",
       "t    j      m                                                                \n",
       "2010 10001  1         NaN     NaN           NaN               NaN     13.0   \n",
       "            1         NaN     NaN           NaN               NaN      NaN   \n",
       "     10002  1         NaN     NaN           NaN               NaN     13.0   \n",
       "            1         NaN     NaN           NaN               NaN      NaN   \n",
       "     10003  1         NaN     NaN           NaN               NaN      3.5   \n",
       "...                   ...     ...           ...               ...      ...   \n",
       "2018 379148 1         NaN     NaN           NaN               NaN      NaN   \n",
       "     379151 1         NaN     NaN           NaN               NaN      NaN   \n",
       "            1         NaN     NaN           NaN               NaN      NaN   \n",
       "     379154 1         NaN     NaN           NaN               NaN      NaN   \n",
       "     379155 1         NaN     NaN           NaN               NaN      NaN   \n",
       "\n",
       "               Beef  Beer (local and imported)  ...  Sweet Potatoes  Tea  \\\n",
       "t    j      m                                   ...                        \n",
       "2010 10001  1  10.0                        NaN  ...            15.0  NaN   \n",
       "            1   NaN                       22.5  ...             NaN  NaN   \n",
       "     10002  1  20.0                        NaN  ...            18.0  1.2   \n",
       "            1   NaN                       90.0  ...             NaN  NaN   \n",
       "     10003  1   3.0                        NaN  ...            14.0  3.0   \n",
       "...             ...                        ...  ...             ...  ...   \n",
       "2018 379148 1   5.0                        NaN  ...             NaN  NaN   \n",
       "     379151 1   NaN                        NaN  ...             NaN  NaN   \n",
       "            1   NaN                        NaN  ...             NaN  NaN   \n",
       "     379154 1  10.0                        NaN  ...             NaN  NaN   \n",
       "     379155 1  10.0                        NaN  ...             NaN  NaN   \n",
       "\n",
       "               Tomato puree(canned)  Tomatoes  Watermelon  Wheat flour  \\\n",
       "t    j      m                                                            \n",
       "2010 10001  1                   4.2      10.0         NaN          NaN   \n",
       "            1                   NaN       NaN         NaN          NaN   \n",
       "     10002  1                   5.6      10.0         NaN          NaN   \n",
       "            1                   NaN       NaN         NaN          NaN   \n",
       "     10003  1                   2.1      10.0         NaN          NaN   \n",
       "...                             ...       ...         ...          ...   \n",
       "2018 379148 1                   NaN       NaN         NaN          NaN   \n",
       "     379151 1                   NaN       NaN         NaN         20.0   \n",
       "            1                   NaN       NaN         NaN          NaN   \n",
       "     379154 1                   NaN       NaN         NaN          NaN   \n",
       "     379155 1                   NaN       NaN         NaN          NaN   \n",
       "\n",
       "               White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                     \n",
       "2010 10001  1         30.0             NaN        NaN      160.0  \n",
       "            1          NaN             NaN        NaN        NaN  \n",
       "     10002  1         20.0             NaN        NaN      138.0  \n",
       "            1          NaN             NaN        NaN        NaN  \n",
       "     10003  1          6.0             NaN        NaN       46.0  \n",
       "...                    ...             ...        ...        ...  \n",
       "2018 379148 1          NaN             NaN        NaN        NaN  \n",
       "     379151 1          NaN             NaN        NaN        NaN  \n",
       "            1          NaN             NaN        NaN        NaN  \n",
       "     379154 1          NaN             NaN        NaN        NaN  \n",
       "     379155 1          NaN             NaN        NaN        NaN  \n",
       "\n",
       "[39172 rows x 124 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consumption_in_hect = consumption.set_index('u', append=True)\n",
    "\n",
    "for index in consumption_in_hect.index:\n",
    "    unit_used = index[3]\n",
    "    multiplier = food_unit_map_dict[unit_used]\n",
    "    consumption_in_hect.loc[index] *= multiplier\n",
    "    \n",
    "consumption_in_hect = consumption_in_hect.reset_index().set_index(['t', 'j', 'm'])\n",
    "\n",
    "# Change all the units to hectograms in the data frame\n",
    "consumption_in_hect['u'] = consumption_in_hect['u'].apply(lambda x: 'Hectograms')\n",
    "consumption_in_hect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once all the foods are in the same unit, we can group the rows so that there is only one row per household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>22.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5.6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10003</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379155</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17023 rows × 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1                      0.0                8.9         0.0     0.0   \n",
       "     10002  1                      0.0                8.9         0.0     0.0   \n",
       "     10003  1                      0.0                4.4         0.0     0.0   \n",
       "     10004  1                      0.0                4.4         0.0     0.0   \n",
       "     10006  1                      0.0                0.0         0.0     0.0   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379146 1                      0.0                0.0         0.0     0.0   \n",
       "     379148 1                      0.0                0.0         0.0     0.0   \n",
       "     379151 1                      0.0                0.0         0.0     0.0   \n",
       "     379154 1                      0.0                0.0         0.0     0.0   \n",
       "     379155 1                      0.0                0.0         0.0     0.0   \n",
       "\n",
       "               Avocado pear  Baby milk powder  Bananas  Beef  \\\n",
       "t    j      m                                                  \n",
       "2010 10001  1           0.0               0.0     13.0  10.0   \n",
       "     10002  1           0.0               0.0     13.0  20.0   \n",
       "     10003  1           0.0               0.0      3.5   3.0   \n",
       "     10004  1           0.0               0.0      3.5   3.0   \n",
       "     10006  1           0.0               0.0     10.5   6.0   \n",
       "...                     ...               ...      ...   ...   \n",
       "2018 379146 1           0.0               0.0      0.0   0.0   \n",
       "     379148 1           0.0               0.0      0.0   5.0   \n",
       "     379151 1           0.0               0.0      0.0   0.0   \n",
       "     379154 1           0.0               0.0      0.0  10.0   \n",
       "     379155 1           0.0               0.0      0.0  10.0   \n",
       "\n",
       "               Beer (local and imported)  Biscuits  ...  Sweet Potatoes   Tea  \\\n",
       "t    j      m                                       ...                         \n",
       "2010 10001  1                       22.5       0.0  ...            15.0   0.0   \n",
       "     10002  1                       90.0       0.0  ...            18.0   1.2   \n",
       "     10003  1                        0.0       0.0  ...            14.0   3.0   \n",
       "     10004  1                        0.0       0.0  ...             0.0   1.5   \n",
       "     10006  1                        0.0       0.0  ...             0.0  47.0   \n",
       "...                                  ...       ...  ...             ...   ...   \n",
       "2018 379146 1                        0.0       0.0  ...             0.0   0.0   \n",
       "     379148 1                        0.0       0.0  ...             0.0   0.0   \n",
       "     379151 1                        0.0       0.0  ...             0.0   0.0   \n",
       "     379154 1                        0.0       0.0  ...             0.0   0.0   \n",
       "     379155 1                        0.0       0.0  ...             0.0   0.0   \n",
       "\n",
       "               Tomato puree(canned)  Tomatoes  Watermelon  Wheat flour  \\\n",
       "t    j      m                                                            \n",
       "2010 10001  1                   4.2      10.0         0.0          0.0   \n",
       "     10002  1                   5.6      10.0         0.0          0.0   \n",
       "     10003  1                   2.1      10.0         0.0          0.0   \n",
       "     10004  1                   1.4      10.0         0.0          0.0   \n",
       "     10006  1                   0.0      40.0         0.0          0.0   \n",
       "...                             ...       ...         ...          ...   \n",
       "2018 379146 1                   0.0       0.0         0.0          0.0   \n",
       "     379148 1                   0.0       0.0         0.0          0.0   \n",
       "     379151 1                   0.0       0.0         0.0         20.0   \n",
       "     379154 1                   0.0       0.0         0.0          0.0   \n",
       "     379155 1                   0.0       0.0         0.0          0.0   \n",
       "\n",
       "               White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                     \n",
       "2010 10001  1         30.0             0.0        0.0      160.0  \n",
       "     10002  1         20.0             0.0        0.0      138.0  \n",
       "     10003  1          6.0             0.0        0.0       46.0  \n",
       "     10004  1          6.0             0.0        0.0       46.0  \n",
       "     10006  1          0.0             0.0        0.0       46.0  \n",
       "...                    ...             ...        ...        ...  \n",
       "2018 379146 1          0.0             0.0        0.0        0.0  \n",
       "     379148 1          0.0             0.0        0.0        0.0  \n",
       "     379151 1          0.0             0.0        0.0        0.0  \n",
       "     379154 1          0.0             0.0        0.0        0.0  \n",
       "     379155 1          0.0             0.0        0.0        0.0  \n",
       "\n",
       "[17023 rows x 123 columns]"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consumption_in_hect = consumption_in_hect.groupby(level=[0, 1]).sum()\n",
    "consumption_in_hect.insert(loc=2, column='m', value=1)\n",
    "consumption_in_hect = consumption_in_hect.reset_index().set_index(['t', 'j', 'm'])\n",
    "consumption_in_hect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find the consumption for the quartiles and convert it to daily consumption"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the consumption for the households in the upper and lower quartiles from the consumption in hectograms data frame. Then, divide the weekly consumption values by 7 in order to get daily consumptions for these households.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10013</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.214286</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.857143</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379075</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379083</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.471429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379084</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379085</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379090</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3874 rows × 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10013  1                      0.0                0.0         0.0     0.0   \n",
       "     10022  1                      0.0                0.0         0.0     0.0   \n",
       "     10063  1                      0.0                0.0         0.0     0.0   \n",
       "     10066  1                      0.0                0.0         0.0     0.0   \n",
       "     10069  1                      0.0                0.0         0.0     0.0   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379075 1                      0.0                0.0         0.0     0.0   \n",
       "     379083 1                      0.0                0.0         0.0     0.0   \n",
       "     379084 1                      0.0                0.0         0.0     0.0   \n",
       "     379085 1                      0.0                0.0         0.0     0.0   \n",
       "     379090 1                      0.0                0.0         0.0     0.0   \n",
       "\n",
       "               Avocado pear  Baby milk powder   Bananas      Beef  \\\n",
       "t    j      m                                                       \n",
       "2010 10013  1           0.0               0.0  0.500000  0.428571   \n",
       "     10022  1           0.0               0.0  1.857143  0.000000   \n",
       "     10063  1           0.0               0.0  0.000000  0.000000   \n",
       "     10066  1           0.0               0.0  0.000000  0.285714   \n",
       "     10069  1           0.0               0.0  0.000000  0.000000   \n",
       "...                     ...               ...       ...       ...   \n",
       "2018 379075 1           0.0               0.0  0.000000  0.000000   \n",
       "     379083 1           0.0               0.0  0.000000  0.471429   \n",
       "     379084 1           0.0               0.0  0.000000  1.428571   \n",
       "     379085 1           0.0               0.0  0.000000  0.142857   \n",
       "     379090 1           0.0               0.0  0.000000  0.714286   \n",
       "\n",
       "               Beer (local and imported)  Biscuits  ...  Sweet Potatoes  \\\n",
       "t    j      m                                       ...                   \n",
       "2010 10013  1                        0.0       0.0  ...             0.0   \n",
       "     10022  1                        0.0       0.0  ...             0.0   \n",
       "     10063  1                        0.0       0.0  ...             0.0   \n",
       "     10066  1                        0.0       0.0  ...             0.0   \n",
       "     10069  1                        0.0       0.0  ...             0.0   \n",
       "...                                  ...       ...  ...             ...   \n",
       "2018 379075 1                        0.0       0.0  ...             0.0   \n",
       "     379083 1                        0.0       0.0  ...             0.0   \n",
       "     379084 1                        0.0       0.0  ...             0.0   \n",
       "     379085 1                        0.0       0.0  ...             0.0   \n",
       "     379090 1                        0.0       0.0  ...             0.0   \n",
       "\n",
       "                    Tea  Tomato puree(canned)  Tomatoes  Watermelon  \\\n",
       "t    j      m                                                         \n",
       "2010 10013  1  0.214286                   0.2  1.428571         0.0   \n",
       "     10022  1  0.000000                   0.2  0.714286         0.0   \n",
       "     10063  1  0.000000                   0.1  1.428571         0.0   \n",
       "     10066  1  0.000000                   0.1  1.428571         0.0   \n",
       "     10069  1  0.000000                   0.0  1.428571         0.0   \n",
       "...                 ...                   ...       ...         ...   \n",
       "2018 379075 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379083 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379084 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379085 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379090 1  0.000000                   0.0  0.000000         0.0   \n",
       "\n",
       "               Wheat flour  White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                                  \n",
       "2010 10013  1          0.0     0.857143             0.0        0.0   3.285714  \n",
       "     10022  1          0.0     1.428571             0.0        0.0   0.000000  \n",
       "     10063  1          0.0     0.000000             0.0        0.0   0.000000  \n",
       "     10066  1          0.0     0.857143             0.0        0.0   0.000000  \n",
       "     10069  1          0.0     0.000000             0.0        0.0   3.285714  \n",
       "...                    ...          ...             ...        ...        ...  \n",
       "2018 379075 1          0.0     0.000000             0.0        0.0   0.000000  \n",
       "     379083 1          0.0     0.000000             0.0        0.0   0.000000  \n",
       "     379084 1          0.0     0.000000             0.0        0.0   0.000000  \n",
       "     379085 1          0.0     0.000000             0.0        0.0   0.000000  \n",
       "     379090 1          0.0     0.000000             0.0        0.0   0.000000  \n",
       "\n",
       "[3874 rows x 123 columns]"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q1_consumption = consumption_in_hect[consumption_in_hect.index.isin(Q1.index)]\n",
    "Q1_consumption_daily = Q1_consumption / 7\n",
    "Q1_consumption_daily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Sweet Potatoes</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.271429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.857143</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>3.214286</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.142857</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>22.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.271429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.857143</td>\n",
       "      <td>2.857143</td>\n",
       "      <td>12.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.571429</td>\n",
       "      <td>0.171429</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>19.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.628571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.214286</td>\n",
       "      <td>0.2</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.714286</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.714286</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10009</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.857143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.571429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379144</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.857143</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.428571</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4502 rows × 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               (Cocoyam, Spinach, etc)  Agricultural eggs  Animal fat  Apples  \\\n",
       "t    j      m                                                                   \n",
       "2010 10001  1                      0.0           1.271429         0.0     0.0   \n",
       "     10002  1                      0.0           1.271429         0.0     0.0   \n",
       "     10004  1                      0.0           0.628571         0.0     0.0   \n",
       "     10006  1                      0.0           0.000000         0.0     0.0   \n",
       "     10009  1                      0.0           0.000000         0.0     0.0   \n",
       "...                                ...                ...         ...     ...   \n",
       "2018 379144 1                      0.0           0.000000         0.0     0.0   \n",
       "     379146 1                      0.0           0.000000         0.0     0.0   \n",
       "     379148 1                      0.0           0.000000         0.0     0.0   \n",
       "     379151 1                      0.0           0.000000         0.0     0.0   \n",
       "     379154 1                      0.0           0.000000         0.0     0.0   \n",
       "\n",
       "               Avocado pear  Baby milk powder   Bananas      Beef  \\\n",
       "t    j      m                                                       \n",
       "2010 10001  1           0.0          0.000000  1.857143  1.428571   \n",
       "     10002  1           0.0          0.000000  1.857143  2.857143   \n",
       "     10004  1           0.0          0.000000  0.500000  0.428571   \n",
       "     10006  1           0.0          0.000000  1.500000  0.857143   \n",
       "     10009  1           0.0          0.642857  0.500000  0.428571   \n",
       "...                     ...               ...       ...       ...   \n",
       "2018 379144 1           0.0          0.000000  0.000000  0.000000   \n",
       "     379146 1           0.0          0.000000  0.000000  0.000000   \n",
       "     379148 1           0.0          0.000000  0.000000  0.714286   \n",
       "     379151 1           0.0          0.000000  0.000000  0.000000   \n",
       "     379154 1           0.0          0.000000  0.000000  1.428571   \n",
       "\n",
       "               Beer (local and imported)  Biscuits  ...  Sweet Potatoes  \\\n",
       "t    j      m                                       ...                   \n",
       "2010 10001  1                   3.214286       0.0  ...        2.142857   \n",
       "     10002  1                  12.857143       0.0  ...        2.571429   \n",
       "     10004  1                   0.000000       0.0  ...        0.000000   \n",
       "     10006  1                   0.000000       0.0  ...        0.000000   \n",
       "     10009  1                   0.000000       0.0  ...        0.000000   \n",
       "...                                  ...       ...  ...             ...   \n",
       "2018 379144 1                   0.000000       0.0  ...        0.000000   \n",
       "     379146 1                   0.000000       0.0  ...        0.000000   \n",
       "     379148 1                   0.000000       0.0  ...        0.000000   \n",
       "     379151 1                   0.000000       0.0  ...        0.000000   \n",
       "     379154 1                   0.000000       0.0  ...        0.000000   \n",
       "\n",
       "                    Tea  Tomato puree(canned)  Tomatoes  Watermelon  \\\n",
       "t    j      m                                                         \n",
       "2010 10001  1  0.000000                   0.6  1.428571         0.0   \n",
       "     10002  1  0.171429                   0.8  1.428571         0.0   \n",
       "     10004  1  0.214286                   0.2  1.428571         0.0   \n",
       "     10006  1  6.714286                   0.0  5.714286         0.0   \n",
       "     10009  1  0.428571                   0.4  2.857143         0.0   \n",
       "...                 ...                   ...       ...         ...   \n",
       "2018 379144 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379146 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379148 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379151 1  0.000000                   0.0  0.000000         0.0   \n",
       "     379154 1  0.000000                   0.0  0.000000         0.0   \n",
       "\n",
       "               Wheat flour  White beans  Wild game meat  Yam flour  Yam-roots  \n",
       "t    j      m                                                                  \n",
       "2010 10001  1     0.000000     4.285714             0.0   0.000000  22.857143  \n",
       "     10002  1     0.000000     2.857143             0.0   0.000000  19.714286  \n",
       "     10004  1     0.000000     0.857143             0.0   0.000000   6.571429  \n",
       "     10006  1     0.000000     0.000000             0.0   0.000000   6.571429  \n",
       "     10009  1     0.000000     2.571429             0.0   0.000000   6.571429  \n",
       "...                    ...          ...             ...        ...        ...  \n",
       "2018 379144 1     0.000000     0.000000             0.0   1.428571   0.000000  \n",
       "     379146 1     0.000000     0.000000             0.0   0.000000   0.000000  \n",
       "     379148 1     0.000000     0.000000             0.0   0.000000   0.000000  \n",
       "     379151 1     2.857143     0.000000             0.0   0.000000   0.000000  \n",
       "     379154 1     0.000000     0.000000             0.0   0.000000   0.000000  \n",
       "\n",
       "[4502 rows x 123 columns]"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q4_consumption = consumption_in_hect[consumption_in_hect.index.isin(Q4.index)]\n",
    "Q4_consumption_daily = Q4_consumption / 7\n",
    "Q4_consumption_daily"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find the nutritional contents of the foods eaten in these Nigerian households"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Unground Ogbono</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alanine</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.052</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.273</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alcohol, ethyl</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amino acids</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arginine</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.691</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.032</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.493</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ash</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.650</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.280</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (Menaquinone-4)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.00</td>\n",
       "      <td>5.80</td>\n",
       "      <td>0.50</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.400</td>\n",
       "      <td>7.90</td>\n",
       "      <td>4.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamins and Other Components</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Water</th>\n",
       "      <td>0.0</td>\n",
       "      <td>86.300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.23</td>\n",
       "      <td>87.26</td>\n",
       "      <td>74.91</td>\n",
       "      <td>62.58</td>\n",
       "      <td>91.96</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87.880</td>\n",
       "      <td>94.52</td>\n",
       "      <td>83.46</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>72.540</td>\n",
       "      <td>0.0</td>\n",
       "      <td>69.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.15</td>\n",
       "      <td>4.23</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.360</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.54</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>173 rows × 132 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               (Cocoyam, Spinach, etc)  Agricultural eggs  \\\n",
       "                                                                            \n",
       "Alanine                                            0.0              0.714   \n",
       "Alcohol, ethyl                                     0.0              0.000   \n",
       "Amino acids                                        0.0              0.000   \n",
       "Arginine                                           0.0              0.691   \n",
       "Ash                                                0.0              0.650   \n",
       "...                                                ...                ...   \n",
       "Vitamin K (Menaquinone-4)                          0.0              0.000   \n",
       "Vitamin K (phylloquinone)                          0.0              0.000   \n",
       "Vitamins and Other Components                      0.0              0.000   \n",
       "Water                                              0.0             86.300   \n",
       "Zinc, Zn                                           0.0              0.000   \n",
       "\n",
       "                               Animal fat  Apples  Avocado pear  \\\n",
       "                                                                  \n",
       "Alanine                               0.0     0.0          0.00   \n",
       "Alcohol, ethyl                        0.0     0.0          0.00   \n",
       "Amino acids                           0.0     0.0          0.00   \n",
       "Arginine                              0.0     0.0          0.00   \n",
       "Ash                                   0.0     0.0          0.00   \n",
       "...                                   ...     ...           ...   \n",
       "Vitamin K (Menaquinone-4)             0.0     0.0          0.00   \n",
       "Vitamin K (phylloquinone)             0.0     0.0         21.00   \n",
       "Vitamins and Other Components         0.0     0.0          0.00   \n",
       "Water                                 0.0     0.0         73.23   \n",
       "Zinc, Zn                              0.0     0.0          0.64   \n",
       "\n",
       "                               Baby milk powder  Bananas   Beef  \\\n",
       "                                                                  \n",
       "Alanine                                    0.00     0.00   0.00   \n",
       "Alcohol, ethyl                             0.00     0.00   0.00   \n",
       "Amino acids                                0.00     0.00   0.00   \n",
       "Arginine                                   0.00     0.00   0.00   \n",
       "Ash                                        0.00     0.00   0.00   \n",
       "...                                         ...      ...    ...   \n",
       "Vitamin K (Menaquinone-4)                  0.00     0.00   0.00   \n",
       "Vitamin K (phylloquinone)                  5.80     0.50   1.70   \n",
       "Vitamins and Other Components              0.00     0.00   0.00   \n",
       "Water                                     87.26    74.91  62.58   \n",
       "Zinc, Zn                                   0.66     0.15   4.23   \n",
       "\n",
       "                               Beer (local and imported)  Biscuits  ...  Tea  \\\n",
       "                                                                    ...        \n",
       "Alanine                                             0.00       0.0  ...  0.0   \n",
       "Alcohol, ethyl                                      3.90       0.0  ...  0.0   \n",
       "Amino acids                                         0.00       0.0  ...  0.0   \n",
       "Arginine                                            0.00       0.0  ...  0.0   \n",
       "Ash                                                 0.00       0.0  ...  0.0   \n",
       "...                                                  ...       ...  ...  ...   \n",
       "Vitamin K (Menaquinone-4)                           0.00       0.0  ...  0.0   \n",
       "Vitamin K (phylloquinone)                           0.00       0.0  ...  0.0   \n",
       "Vitamins and Other Components                       0.00       0.0  ...  0.0   \n",
       "Water                                              91.96       0.0  ...  0.0   \n",
       "Zinc, Zn                                            0.01       0.0  ...  0.0   \n",
       "\n",
       "                               Tomato puree(canned)  Tomatoes  \\\n",
       "                                                                \n",
       "Alanine                                       0.052      0.00   \n",
       "Alcohol, ethyl                                0.000      0.00   \n",
       "Amino acids                                   0.000      0.00   \n",
       "Arginine                                      0.032      0.00   \n",
       "Ash                                           1.280      0.00   \n",
       "...                                             ...       ...   \n",
       "Vitamin K (Menaquinone-4)                     0.000      0.00   \n",
       "Vitamin K (phylloquinone)                     3.400      7.90   \n",
       "Vitamins and Other Components                 0.000      0.00   \n",
       "Water                                        87.880     94.52   \n",
       "Zinc, Zn                                      0.360      0.17   \n",
       "\n",
       "                               Unground Ogbono  Watermelon  Wheat flour  \\\n",
       "                                                                          \n",
       "Alanine                                   0.00         0.0          0.0   \n",
       "Alcohol, ethyl                            0.00         0.0          0.0   \n",
       "Amino acids                               0.00         0.0          0.0   \n",
       "Arginine                                  0.00         0.0          0.0   \n",
       "Ash                                       0.00         0.0          0.0   \n",
       "...                                        ...         ...          ...   \n",
       "Vitamin K (Menaquinone-4)                 0.00         0.0          0.0   \n",
       "Vitamin K (phylloquinone)                 4.20         0.0          0.0   \n",
       "Vitamins and Other Components             0.00         0.0          0.0   \n",
       "Water                                    83.46         0.0          0.0   \n",
       "Zinc, Zn                                  0.09         0.0          0.0   \n",
       "\n",
       "                               White beans  Wild game meat  Yam flour  \\\n",
       "                                                                        \n",
       "Alanine                               0.00           1.273        0.0   \n",
       "Alcohol, ethyl                        0.00           0.000        0.0   \n",
       "Amino acids                           0.00           0.000        0.0   \n",
       "Arginine                              0.00           1.493        0.0   \n",
       "Ash                                   0.00           0.970        0.0   \n",
       "...                                    ...             ...        ...   \n",
       "Vitamin K (Menaquinone-4)             0.00           0.000        0.0   \n",
       "Vitamin K (phylloquinone)             0.00           0.000        0.0   \n",
       "Vitamins and Other Components         0.00           0.000        0.0   \n",
       "Water                                 0.00          72.540        0.0   \n",
       "Zinc, Zn                              3.54           0.000        0.0   \n",
       "\n",
       "                               Yam-roots  \n",
       "                                          \n",
       "Alanine                            0.063  \n",
       "Alcohol, ethyl                     0.000  \n",
       "Amino acids                        0.000  \n",
       "Arginine                           0.127  \n",
       "Ash                                0.820  \n",
       "...                                  ...  \n",
       "Vitamin K (Menaquinone-4)          0.000  \n",
       "Vitamin K (phylloquinone)          2.300  \n",
       "Vitamins and Other Components      0.000  \n",
       "Water                             69.600  \n",
       "Zinc, Zn                           0.240  \n",
       "\n",
       "[173 rows x 132 columns]"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import fooddatacentral as fdc\n",
    "\n",
    "apikey = 'MfcTfizjo11bsqJeJCn9Tb7RdKPQxJRjJSvTKElr'\n",
    "\n",
    "#fdc_food_items = fdc_codes['Food description'].tolist()\n",
    "#fdc_food_items\n",
    "\n",
    "#food_nutrients = {}\n",
    "#for f in fdc_codes['Food description'].to_list():\n",
    "    #fdc_id = fdc_codes[fdc_codes['Food description'] == f]['USDA FDC ID'].values[0]\n",
    "    #if not np.isnan(fdc_id):\n",
    "        #try:\n",
    "            #fdc_id = int(fdc_id)\n",
    "            #food_nutrients[f] = fdc.nutrients(apikey, fdc_id).Quantity\n",
    "        #except AttributeError:\n",
    "            #warnings.warn(\"Couldn't find FDC Code %s for food %s.\" % (f, fdc_id))\n",
    "            \n",
    "#nutritional_df = pd.DataFrame(food_nutrients,dtype=float)\n",
    "\n",
    "nutritional_df = pd.read_csv('my_nutrients.csv').reset_index(drop=True)\n",
    "nutritional_df[''] = nutritional_df['Unnamed: 0']\n",
    "nutritional_df = nutritional_df.drop(columns=['Unnamed: 0']).set_index('')\n",
    "nutritional_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read in the minimum daily intake requirements for different age groups."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key available for students@eep153.iam.gserviceaccount.com.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C 1-3</th>\n",
       "      <th>F 4-8</th>\n",
       "      <th>M 4-8</th>\n",
       "      <th>F 9-13</th>\n",
       "      <th>M 9-13</th>\n",
       "      <th>F 14-18</th>\n",
       "      <th>M 14-18</th>\n",
       "      <th>F 19-30</th>\n",
       "      <th>M 19-30</th>\n",
       "      <th>F 31-50</th>\n",
       "      <th>M 31-50</th>\n",
       "      <th>F 51+</th>\n",
       "      <th>M 51+</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nutrition</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>1400.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>2200.0</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>2200.0</td>\n",
       "      <td>1600.0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>13.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>14.0</td>\n",
       "      <td>16.8</td>\n",
       "      <td>19.6</td>\n",
       "      <td>22.4</td>\n",
       "      <td>25.2</td>\n",
       "      <td>25.2</td>\n",
       "      <td>30.8</td>\n",
       "      <td>28.0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>25.2</td>\n",
       "      <td>30.8</td>\n",
       "      <td>22.4</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>150.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>300.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>700.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>1300.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>80.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>410.0</td>\n",
       "      <td>310.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>320.0</td>\n",
       "      <td>420.0</td>\n",
       "      <td>320.0</td>\n",
       "      <td>420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>6.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>460.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>700.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>3000.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>4500.0</td>\n",
       "      <td>4500.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "      <td>4700.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>0.5</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>0.5</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>300.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>0.9</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>0.5</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>15.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>30.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 C 1-3   F 4-8   M 4-8  F 9-13  M 9-13  \\\n",
       "Nutrition                                                                \n",
       "Energy                          1000.0  1200.0  1400.0  1600.0  1800.0   \n",
       "Protein                           13.0    19.0    19.0    34.0    34.0   \n",
       "Fiber, total dietary              14.0    16.8    19.6    22.4    25.2   \n",
       "Folate, DFE                      150.0   200.0   200.0   300.0   300.0   \n",
       "Calcium, Ca                      700.0  1000.0  1000.0  1300.0  1300.0   \n",
       "Carbohydrate, by difference      130.0   130.0   130.0   130.0   130.0   \n",
       "Iron, Fe                           7.0    10.0    10.0     8.0     8.0   \n",
       "Magnesium, Mg                     80.0   130.0   130.0   240.0   240.0   \n",
       "Niacin                             6.0     8.0     8.0    12.0    12.0   \n",
       "Phosphorus, P                    460.0   500.0   500.0  1250.0  1250.0   \n",
       "Potassium, K                    3000.0  3800.0  3800.0  4500.0  4500.0   \n",
       "Riboflavin                         0.5     0.6     0.6     0.9     0.9   \n",
       "Thiamin                            0.5     0.6     0.6     0.9     0.9   \n",
       "Vitamin A, RAE                   300.0   400.0   400.0   600.0   600.0   \n",
       "Vitamin B-12                       0.9     1.2     1.2     1.8     1.8   \n",
       "Vitamin B-6                        0.5     0.6     0.6     1.0     1.0   \n",
       "Vitamin C, total ascorbic acid    15.0    25.0    25.0    45.0    45.0   \n",
       "Vitamin E (alpha-tocopherol)       6.0     7.0     7.0    11.0    11.0   \n",
       "Vitamin K (phylloquinone)         30.0    55.0    55.0    60.0    60.0   \n",
       "Zinc, Zn                           3.0     5.0     5.0     8.0     8.0   \n",
       "\n",
       "                                F 14-18  M 14-18  F 19-30  M 19-30  F 31-50  \\\n",
       "Nutrition                                                                     \n",
       "Energy                           1800.0   2200.0   2000.0   2400.0   1800.0   \n",
       "Protein                            46.0     52.0     46.0     56.0     46.0   \n",
       "Fiber, total dietary               25.2     30.8     28.0     33.6     25.2   \n",
       "Folate, DFE                       400.0    400.0    400.0    400.0    400.0   \n",
       "Calcium, Ca                      1300.0   1300.0   1000.0   1000.0   1000.0   \n",
       "Carbohydrate, by difference       130.0    130.0    130.0    130.0    130.0   \n",
       "Iron, Fe                           15.0     11.0     18.0      8.0     18.0   \n",
       "Magnesium, Mg                     360.0    410.0    310.0    400.0    320.0   \n",
       "Niacin                             14.0     16.0     14.0     16.0     14.0   \n",
       "Phosphorus, P                    1250.0   1250.0    700.0    700.0    700.0   \n",
       "Potassium, K                     4700.0   4700.0   4700.0   4700.0   4700.0   \n",
       "Riboflavin                          1.0      1.3      1.1      1.3      1.1   \n",
       "Thiamin                             1.0      1.2      1.1      1.2      1.1   \n",
       "Vitamin A, RAE                    700.0    900.0    700.0    900.0    700.0   \n",
       "Vitamin B-12                        2.4      2.4      2.4      2.4      2.4   \n",
       "Vitamin B-6                         1.2      1.3      1.3      1.3      1.3   \n",
       "Vitamin C, total ascorbic acid     65.0     75.0     75.0     90.0     75.0   \n",
       "Vitamin E (alpha-tocopherol)       15.0     15.0     15.0     15.0     15.0   \n",
       "Vitamin K (phylloquinone)          75.0     75.0     90.0    120.0     90.0   \n",
       "Zinc, Zn                            9.0     11.0      8.0     11.0      8.0   \n",
       "\n",
       "                                M 31-50   F 51+   M 51+  \n",
       "Nutrition                                                \n",
       "Energy                           2200.0  1600.0  2000.0  \n",
       "Protein                            56.0    46.0    56.0  \n",
       "Fiber, total dietary               30.8    22.4    28.0  \n",
       "Folate, DFE                       400.0   400.0   400.0  \n",
       "Calcium, Ca                      1000.0  1200.0  1000.0  \n",
       "Carbohydrate, by difference       130.0   130.0   130.0  \n",
       "Iron, Fe                            8.0     8.0     8.0  \n",
       "Magnesium, Mg                     420.0   320.0   420.0  \n",
       "Niacin                             16.0    14.0    16.0  \n",
       "Phosphorus, P                     700.0   700.0   700.0  \n",
       "Potassium, K                     4700.0  4700.0  4700.0  \n",
       "Riboflavin                          1.3     1.1     1.3  \n",
       "Thiamin                             1.2     1.1     1.2  \n",
       "Vitamin A, RAE                    900.0   700.0   900.0  \n",
       "Vitamin B-12                        2.4     2.4     2.4  \n",
       "Vitamin B-6                         1.3     1.5     1.7  \n",
       "Vitamin C, total ascorbic acid     90.0    75.0    90.0  \n",
       "Vitamin E (alpha-tocopherol)       15.0    15.0    15.0  \n",
       "Vitamin K (phylloquinone)         120.0    90.0   120.0  \n",
       "Zinc, Zn                           11.0     8.0    11.0  "
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dri_mins_sheet = '1XJRHTnxNJwrUXperIhwrwDp1HcVxPEVoQobYDmjg9Qw'\n",
    "\n",
    "dri_mins = read_sheets(dri_mins_sheet,sheet='diet_minimums')\n",
    "dri_mins = dri_mins.reset_index(drop=True).set_index('Nutrition').drop('Source', axis=1)\n",
    "dri_mins"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sort the nutritional facts data frame to only include the nutrients in the DRI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>(Cocoyam, Spinach, etc)</th>\n",
       "      <th>Agricultural eggs</th>\n",
       "      <th>Animal fat</th>\n",
       "      <th>Apples</th>\n",
       "      <th>Avocado pear</th>\n",
       "      <th>Baby milk powder</th>\n",
       "      <th>Bananas</th>\n",
       "      <th>Beef</th>\n",
       "      <th>Beer (local and imported)</th>\n",
       "      <th>Biscuits</th>\n",
       "      <th>...</th>\n",
       "      <th>Tea</th>\n",
       "      <th>Tomato puree(canned)</th>\n",
       "      <th>Tomatoes</th>\n",
       "      <th>Unground Ogbono</th>\n",
       "      <th>Watermelon</th>\n",
       "      <th>Wheat flour</th>\n",
       "      <th>White beans</th>\n",
       "      <th>Wild game meat</th>\n",
       "      <th>Yam flour</th>\n",
       "      <th>Yam-roots</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>94.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.00</td>\n",
       "      <td>12.000</td>\n",
       "      <td>50.000</td>\n",
       "      <td>5.000</td>\n",
       "      <td>17.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>400.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.000</td>\n",
       "      <td>10.000</td>\n",
       "      <td>11.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>236.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>17.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>3.53</td>\n",
       "      <td>2.360</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.05</td>\n",
       "      <td>8.530</td>\n",
       "      <td>7.430</td>\n",
       "      <td>22.840</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.550</td>\n",
       "      <td>33.33</td>\n",
       "      <td>...</td>\n",
       "      <td>8.46</td>\n",
       "      <td>8.980</td>\n",
       "      <td>3.890</td>\n",
       "      <td>14.980</td>\n",
       "      <td>7.45</td>\n",
       "      <td>70.7</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>84.00</td>\n",
       "      <td>27.880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>24.00</td>\n",
       "      <td>231.000</td>\n",
       "      <td>867.0</td>\n",
       "      <td>54.00</td>\n",
       "      <td>160.000</td>\n",
       "      <td>65.000</td>\n",
       "      <td>89.000</td>\n",
       "      <td>247.000</td>\n",
       "      <td>43.000</td>\n",
       "      <td>347.00</td>\n",
       "      <td>...</td>\n",
       "      <td>34.00</td>\n",
       "      <td>158.000</td>\n",
       "      <td>18.000</td>\n",
       "      <td>60.000</td>\n",
       "      <td>31.00</td>\n",
       "      <td>345.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>510.00</td>\n",
       "      <td>267.00</td>\n",
       "      <td>494.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>1.20</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.10</td>\n",
       "      <td>6.700</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.600</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.30</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.900</td>\n",
       "      <td>1.200</td>\n",
       "      <td>1.600</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.6</td>\n",
       "      <td>4.30</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>4.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>81.000</td>\n",
       "      <td>18.000</td>\n",
       "      <td>20.000</td>\n",
       "      <td>7.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11.000</td>\n",
       "      <td>15.000</td>\n",
       "      <td>43.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>23.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>2.12</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.550</td>\n",
       "      <td>1.180</td>\n",
       "      <td>0.260</td>\n",
       "      <td>1.970</td>\n",
       "      <td>0.020</td>\n",
       "      <td>2.40</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.780</td>\n",
       "      <td>0.270</td>\n",
       "      <td>0.160</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>29.000</td>\n",
       "      <td>5.000</td>\n",
       "      <td>27.000</td>\n",
       "      <td>17.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>23.000</td>\n",
       "      <td>11.000</td>\n",
       "      <td>10.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>182.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.738</td>\n",
       "      <td>0.658</td>\n",
       "      <td>0.665</td>\n",
       "      <td>4.305</td>\n",
       "      <td>0.513</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.466</td>\n",
       "      <td>0.594</td>\n",
       "      <td>0.669</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>52.000</td>\n",
       "      <td>34.000</td>\n",
       "      <td>22.000</td>\n",
       "      <td>160.000</td>\n",
       "      <td>14.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>40.000</td>\n",
       "      <td>24.000</td>\n",
       "      <td>14.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>533.00</td>\n",
       "      <td>120.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>55.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>107.00</td>\n",
       "      <td>485.000</td>\n",
       "      <td>70.000</td>\n",
       "      <td>358.000</td>\n",
       "      <td>274.000</td>\n",
       "      <td>27.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>439.000</td>\n",
       "      <td>237.000</td>\n",
       "      <td>168.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1540.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>816.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>2.35</td>\n",
       "      <td>10.700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.41</td>\n",
       "      <td>2.000</td>\n",
       "      <td>1.600</td>\n",
       "      <td>1.090</td>\n",
       "      <td>17.440</td>\n",
       "      <td>0.460</td>\n",
       "      <td>8.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.650</td>\n",
       "      <td>0.880</td>\n",
       "      <td>0.820</td>\n",
       "      <td>0.78</td>\n",
       "      <td>11.8</td>\n",
       "      <td>24.50</td>\n",
       "      <td>21.51</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.391</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.130</td>\n",
       "      <td>0.092</td>\n",
       "      <td>0.073</td>\n",
       "      <td>0.151</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.080</td>\n",
       "      <td>0.019</td>\n",
       "      <td>0.038</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.067</td>\n",
       "      <td>0.053</td>\n",
       "      <td>0.031</td>\n",
       "      <td>0.043</td>\n",
       "      <td>0.005</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.037</td>\n",
       "      <td>0.028</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.000</td>\n",
       "      <td>58.000</td>\n",
       "      <td>3.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>26.000</td>\n",
       "      <td>42.000</td>\n",
       "      <td>54.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.200</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.150</td>\n",
       "      <td>0.020</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.257</td>\n",
       "      <td>0.040</td>\n",
       "      <td>0.367</td>\n",
       "      <td>0.328</td>\n",
       "      <td>0.046</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.126</td>\n",
       "      <td>0.080</td>\n",
       "      <td>0.119</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>21.20</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.00</td>\n",
       "      <td>10.000</td>\n",
       "      <td>7.800</td>\n",
       "      <td>8.700</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.600</td>\n",
       "      <td>13.700</td>\n",
       "      <td>36.400</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.20</td>\n",
       "      <td>17.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.070</td>\n",
       "      <td>0.580</td>\n",
       "      <td>0.100</td>\n",
       "      <td>0.170</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.970</td>\n",
       "      <td>0.540</td>\n",
       "      <td>0.900</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21.000</td>\n",
       "      <td>5.800</td>\n",
       "      <td>0.500</td>\n",
       "      <td>1.700</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.400</td>\n",
       "      <td>7.900</td>\n",
       "      <td>4.200</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.640</td>\n",
       "      <td>0.660</td>\n",
       "      <td>0.150</td>\n",
       "      <td>4.230</td>\n",
       "      <td>0.010</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.360</td>\n",
       "      <td>0.170</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.54</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.240</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 132 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                (Cocoyam, Spinach, etc)  Agricultural eggs  \\\n",
       "                                                                             \n",
       "Calcium, Ca                                       94.00              0.000   \n",
       "Carbohydrate, by difference                        3.53              2.360   \n",
       "Energy                                            24.00            231.000   \n",
       "Fiber, total dietary                               1.20              0.000   \n",
       "Folate, DFE                                        0.00              0.000   \n",
       "Iron, Fe                                           2.12              0.000   \n",
       "Magnesium, Mg                                      0.00              0.000   \n",
       "Niacin                                             0.00              0.000   \n",
       "Phosphorus, P                                      0.00              0.000   \n",
       "Potassium, K                                       0.00              0.000   \n",
       "Protein                                            2.35             10.700   \n",
       "Riboflavin                                         0.00              0.391   \n",
       "Thiamin                                            0.00              0.000   \n",
       "Vitamin A, RAE                                     0.00              0.000   \n",
       "Vitamin B-12                                       0.00              0.000   \n",
       "Vitamin B-6                                        0.00              0.000   \n",
       "Vitamin C, total ascorbic acid                    21.20              0.000   \n",
       "Vitamin E (alpha-tocopherol)                       0.00              0.000   \n",
       "Vitamin K (phylloquinone)                          0.00              0.000   \n",
       "Zinc, Zn                                           0.00              0.000   \n",
       "\n",
       "                                Animal fat  Apples  Avocado pear  \\\n",
       "                                                                   \n",
       "Calcium, Ca                            0.0    8.00        12.000   \n",
       "Carbohydrate, by difference            0.0   14.05         8.530   \n",
       "Energy                               867.0   54.00       160.000   \n",
       "Fiber, total dietary                   0.0    2.10         6.700   \n",
       "Folate, DFE                            0.0    0.00        81.000   \n",
       "Iron, Fe                               0.0    0.15         0.550   \n",
       "Magnesium, Mg                          0.0    0.00        29.000   \n",
       "Niacin                                 0.0    0.00         1.738   \n",
       "Phosphorus, P                          0.0    0.00        52.000   \n",
       "Potassium, K                           0.0  107.00       485.000   \n",
       "Protein                                0.0    0.41         2.000   \n",
       "Riboflavin                             0.0    0.00         0.130   \n",
       "Thiamin                                0.0    0.00         0.067   \n",
       "Vitamin A, RAE                         0.0    0.00         7.000   \n",
       "Vitamin B-12                           0.0    0.00         0.000   \n",
       "Vitamin B-6                            0.0    0.00         0.257   \n",
       "Vitamin C, total ascorbic acid         0.0    2.00        10.000   \n",
       "Vitamin E (alpha-tocopherol)           0.0    0.00         2.070   \n",
       "Vitamin K (phylloquinone)              0.0    0.00        21.000   \n",
       "Zinc, Zn                               0.0    0.00         0.640   \n",
       "\n",
       "                                Baby milk powder  Bananas     Beef  \\\n",
       "                                                                     \n",
       "Calcium, Ca                               50.000    5.000   17.000   \n",
       "Carbohydrate, by difference                7.430   22.840    0.000   \n",
       "Energy                                    65.000   89.000  247.000   \n",
       "Fiber, total dietary                       0.000    2.600    0.000   \n",
       "Folate, DFE                               18.000   20.000    7.000   \n",
       "Iron, Fe                                   1.180    0.260    1.970   \n",
       "Magnesium, Mg                              5.000   27.000   17.000   \n",
       "Niacin                                     0.658    0.665    4.305   \n",
       "Phosphorus, P                             34.000   22.000  160.000   \n",
       "Potassium, K                              70.000  358.000  274.000   \n",
       "Protein                                    1.600    1.090   17.440   \n",
       "Riboflavin                                 0.092    0.073    0.151   \n",
       "Thiamin                                    0.053    0.031    0.043   \n",
       "Vitamin A, RAE                            58.000    3.000    4.000   \n",
       "Vitamin B-12                               0.200    0.000    2.150   \n",
       "Vitamin B-6                                0.040    0.367    0.328   \n",
       "Vitamin C, total ascorbic acid             7.800    8.700    0.000   \n",
       "Vitamin E (alpha-tocopherol)               0.580    0.100    0.170   \n",
       "Vitamin K (phylloquinone)                  5.800    0.500    1.700   \n",
       "Zinc, Zn                                   0.660    0.150    4.230   \n",
       "\n",
       "                                Beer (local and imported)  Biscuits  ...  \\\n",
       "                                                                     ...   \n",
       "Calcium, Ca                                         4.000    400.00  ...   \n",
       "Carbohydrate, by difference                         3.550     33.33  ...   \n",
       "Energy                                             43.000    347.00  ...   \n",
       "Fiber, total dietary                                0.000      1.30  ...   \n",
       "Folate, DFE                                         6.000      0.00  ...   \n",
       "Iron, Fe                                            0.020      2.40  ...   \n",
       "Magnesium, Mg                                       6.000      0.00  ...   \n",
       "Niacin                                              0.513      0.00  ...   \n",
       "Phosphorus, P                                      14.000      0.00  ...   \n",
       "Potassium, K                                       27.000      0.00  ...   \n",
       "Protein                                             0.460      8.00  ...   \n",
       "Riboflavin                                          0.025      0.00  ...   \n",
       "Thiamin                                             0.005      0.00  ...   \n",
       "Vitamin A, RAE                                      0.000      0.00  ...   \n",
       "Vitamin B-12                                        0.020      0.00  ...   \n",
       "Vitamin B-6                                         0.046      0.00  ...   \n",
       "Vitamin C, total ascorbic acid                      0.000      0.00  ...   \n",
       "Vitamin E (alpha-tocopherol)                        0.000      0.00  ...   \n",
       "Vitamin K (phylloquinone)                           0.000      0.00  ...   \n",
       "Zinc, Zn                                            0.010      0.00  ...   \n",
       "\n",
       "                                  Tea  Tomato puree(canned)  Tomatoes  \\\n",
       "                                                                        \n",
       "Calcium, Ca                      0.00                18.000    10.000   \n",
       "Carbohydrate, by difference      8.46                 8.980     3.890   \n",
       "Energy                          34.00               158.000    18.000   \n",
       "Fiber, total dietary             0.00                 1.900     1.200   \n",
       "Folate, DFE                      0.00                11.000    15.000   \n",
       "Iron, Fe                         0.00                 1.780     0.270   \n",
       "Magnesium, Mg                    0.00                23.000    11.000   \n",
       "Niacin                           0.00                 1.466     0.594   \n",
       "Phosphorus, P                    0.00                40.000    24.000   \n",
       "Potassium, K                     0.00               439.000   237.000   \n",
       "Protein                          0.00                 1.650     0.880   \n",
       "Riboflavin                       0.00                 0.080     0.019   \n",
       "Thiamin                          0.00                 0.025     0.037   \n",
       "Vitamin A, RAE                   0.00                26.000    42.000   \n",
       "Vitamin B-12                     0.00                 0.000     0.000   \n",
       "Vitamin B-6                      0.00                 0.126     0.080   \n",
       "Vitamin C, total ascorbic acid   0.00                10.600    13.700   \n",
       "Vitamin E (alpha-tocopherol)     0.00                 1.970     0.540   \n",
       "Vitamin K (phylloquinone)        0.00                 3.400     7.900   \n",
       "Zinc, Zn                         0.00                 0.360     0.170   \n",
       "\n",
       "                                Unground Ogbono  Watermelon  Wheat flour  \\\n",
       "                                                                           \n",
       "Calcium, Ca                              11.000        0.00          0.0   \n",
       "Carbohydrate, by difference              14.980        7.45         70.7   \n",
       "Energy                                   60.000       31.00        345.0   \n",
       "Fiber, total dietary                      1.600        0.40          2.6   \n",
       "Folate, DFE                              43.000        0.00          0.0   \n",
       "Iron, Fe                                  0.160        0.00          0.0   \n",
       "Magnesium, Mg                            10.000        0.00          0.0   \n",
       "Niacin                                    0.669        0.00          0.0   \n",
       "Phosphorus, P                            14.000        0.00          0.0   \n",
       "Potassium, K                            168.000        0.00          0.0   \n",
       "Protein                                   0.820        0.78         11.8   \n",
       "Riboflavin                                0.038        0.00          0.0   \n",
       "Thiamin                                   0.028        0.00          0.0   \n",
       "Vitamin A, RAE                           54.000        0.00          0.0   \n",
       "Vitamin B-12                              0.000        0.00          0.0   \n",
       "Vitamin B-6                               0.119        0.00          0.0   \n",
       "Vitamin C, total ascorbic acid           36.400        0.00          0.0   \n",
       "Vitamin E (alpha-tocopherol)              0.900        0.00          0.0   \n",
       "Vitamin K (phylloquinone)                 4.200        0.00          0.0   \n",
       "Zinc, Zn                                  0.090        0.00          0.0   \n",
       "\n",
       "                                White beans  Wild game meat  Yam flour  \\\n",
       "                                                                         \n",
       "Calcium, Ca                          236.00           12.00      20.00   \n",
       "Carbohydrate, by difference            0.00            0.00      84.00   \n",
       "Energy                                 0.00          510.00     267.00   \n",
       "Fiber, total dietary                   4.30            0.00       1.00   \n",
       "Folate, DFE                            0.00            0.00       0.00   \n",
       "Iron, Fe                               4.93            0.00       0.72   \n",
       "Magnesium, Mg                        182.00            0.00       0.00   \n",
       "Niacin                                 0.00            4.00       0.00   \n",
       "Phosphorus, P                        533.00          120.00       0.00   \n",
       "Potassium, K                        1540.00            0.00       0.00   \n",
       "Protein                               24.50           21.51       2.00   \n",
       "Riboflavin                             0.00            0.11       0.00   \n",
       "Thiamin                                0.00            0.39       0.00   \n",
       "Vitamin A, RAE                         0.00            0.00       0.00   \n",
       "Vitamin B-12                           0.00            0.00       0.00   \n",
       "Vitamin B-6                            0.00            0.00       0.00   \n",
       "Vitamin C, total ascorbic acid         0.00            0.00       1.20   \n",
       "Vitamin E (alpha-tocopherol)           0.00            0.00       0.00   \n",
       "Vitamin K (phylloquinone)              0.00            0.00       0.00   \n",
       "Zinc, Zn                               3.54            0.00       0.00   \n",
       "\n",
       "                                Yam-roots  \n",
       "                                           \n",
       "Calcium, Ca                        17.000  \n",
       "Carbohydrate, by difference        27.880  \n",
       "Energy                            494.000  \n",
       "Fiber, total dietary                4.100  \n",
       "Folate, DFE                        23.000  \n",
       "Iron, Fe                            0.540  \n",
       "Magnesium, Mg                      21.000  \n",
       "Niacin                              0.552  \n",
       "Phosphorus, P                      55.000  \n",
       "Potassium, K                      816.000  \n",
       "Protein                             1.530  \n",
       "Riboflavin                          0.032  \n",
       "Thiamin                             0.112  \n",
       "Vitamin A, RAE                      7.000  \n",
       "Vitamin B-12                        0.000  \n",
       "Vitamin B-6                         0.293  \n",
       "Vitamin C, total ascorbic acid     17.100  \n",
       "Vitamin E (alpha-tocopherol)        0.350  \n",
       "Vitamin K (phylloquinone)           2.300  \n",
       "Zinc, Zn                            0.240  \n",
       "\n",
       "[20 rows x 132 columns]"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dri_nutrients = dri_mins.index.tolist()\n",
    "nutritional_dri_df = nutritional_df[nutritional_df.index.isin(dri_nutrients)]\n",
    "nutritional_dri_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find the total amount of nutrients consumed by these households per day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Change indices in already made household characteristics data frames to be the same as those of the consumption data frames."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "HH_charQ1 = hh_charQ1.reset_index().set_index(['t', 'j', 'm'])\n",
    "HH_charQ4 = hh_charQ4.reset_index().set_index(['t', 'j', 'm'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a function to get the household characteristics of a single household of either of the quartiles. Then, use that to find the total amount of each nutrient that would be needed in order to meet the minimums for each person in the household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "def HH_char_df(quartile_HH_char_df, index):\n",
    "    df = quartile_HH_char_df.drop(columns=['log Hsize'])\n",
    "    df = df.loc[index]\n",
    "    return df\n",
    "\n",
    "def get_HH_dri_requirements(quartile_HH_char_df, index):\n",
    "    HH = HH_char_df(quartile_HH_char_df, index)\n",
    "    total = 0\n",
    "    for age_group in HH.index:\n",
    "        if age_group == 'M 0-3' or age_group == 'F 0-3':\n",
    "            total += dri_mins['C 1-3'] * HH[age_group]\n",
    "        else:\n",
    "            total += dri_mins[age_group] * HH[age_group]\n",
    "    total = total.rename('Total Dietary Reqs for HH: ' + str(index))\n",
    "    return pd.DataFrame(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Dietary Reqs for HH: (2010, 50059, 1)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nutrition</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>29000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>653.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>406.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>5450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>18400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>2210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>170.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>4810.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>14630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>72600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>15.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>11100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>32.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>18.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>960.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>204.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>1235.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>135.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Total Dietary Reqs for HH: (2010, 50059, 1)\n",
       "Nutrition                                                                  \n",
       "Energy                                                              29000.0\n",
       "Protein                                                               653.0\n",
       "Fiber, total dietary                                                  406.0\n",
       "Folate, DFE                                                          5450.0\n",
       "Calcium, Ca                                                         18400.0\n",
       "Carbohydrate, by difference                                          2210.0\n",
       "Iron, Fe                                                              170.0\n",
       "Magnesium, Mg                                                        4810.0\n",
       "Niacin                                                                210.0\n",
       "Phosphorus, P                                                       14630.0\n",
       "Potassium, K                                                        72600.0\n",
       "Riboflavin                                                             16.5\n",
       "Thiamin                                                                15.9\n",
       "Vitamin A, RAE                                                      11100.0\n",
       "Vitamin B-12                                                           32.7\n",
       "Vitamin B-6                                                            18.1\n",
       "Vitamin C, total ascorbic acid                                        960.0\n",
       "Vitamin E (alpha-tocopherol)                                          204.0\n",
       "Vitamin K (phylloquinone)                                            1235.0\n",
       "Zinc, Zn                                                              135.0"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_HH_dri_requirements(HH_charQ1, HH_charQ1.index[129])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a function to get the consumption of an individual household in either quartile. Also, define a function to get the nutritional facts of an individual food. These functions are then used to create a function that will determine the total amount of each nutrient consumed in an iindividual household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "def HH_consumption_df(quartile_consumption_df, index):\n",
    "    df = quartile_consumption_df.loc[[index]]\n",
    "    df = df.groupby(by=df.index, as_index=True).sum()\n",
    "    return df\n",
    "\n",
    "def get_nutrition(food_name):\n",
    "    return nutritional_dri_df[food_name]\n",
    "\n",
    "def get_total_HH_nutrition_df(quartile_consumption_df, index):\n",
    "    HH_hecto_df = HH_consumption_df(quartile_consumption_df, index)\n",
    "    total = 0\n",
    "    for col in HH_hecto_df.columns:\n",
    "        amount = HH_hecto_df[col][0]\n",
    "        nutrition = amount * get_nutrition(col)\n",
    "        total += nutrition\n",
    "    total = total.rename('Total Nutritional Data for Household: ' + str(index))\n",
    "    return pd.DataFrame(total)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Nutritional Data for Household: (2010, 20034, 1)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>1446.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>508.782857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>20482.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>49.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>182.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>17.351429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>299.328571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>24.763714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>913.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>2656.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>70.680000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>1.305857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>2.467429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>167.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>2.193286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>143.928571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>83.940000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>52.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>7.878571</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Total Nutritional Data for Household: (2010, 20034, 1)\n",
       "                                                                                      \n",
       "Calcium, Ca                                                           1446.000000     \n",
       "Carbohydrate, by difference                                            508.782857     \n",
       "Energy                                                               20482.571429     \n",
       "Fiber, total dietary                                                    49.428571     \n",
       "Folate, DFE                                                            182.142857     \n",
       "Iron, Fe                                                                17.351429     \n",
       "Magnesium, Mg                                                          299.328571     \n",
       "Niacin                                                                  24.763714     \n",
       "Phosphorus, P                                                          913.857143     \n",
       "Potassium, K                                                          2656.142857     \n",
       "Protein                                                                 70.680000     \n",
       "Riboflavin                                                               1.305857     \n",
       "Thiamin                                                                  2.467429     \n",
       "Vitamin A, RAE                                                         167.714286     \n",
       "Vitamin B-12                                                             0.000000     \n",
       "Vitamin B-6                                                              2.193286     \n",
       "Vitamin C, total ascorbic acid                                         143.928571     \n",
       "Vitamin E (alpha-tocopherol)                                            83.940000     \n",
       "Vitamin K (phylloquinone)                                               52.300000     \n",
       "Zinc, Zn                                                                 7.878571     "
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_total_HH_nutrition_df(Q1_consumption_daily, Q1_consumption_daily.index[23])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare the daily nutrients required for the households against what they actually consume"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare_nutrients(quartile_consumption_df, quartile_HH_char_df, index):\n",
    "    nutri = get_total_HH_nutrition_df(quartile_consumption_df, index)\n",
    "    HH = get_HH_dri_requirements(quartile_HH_char_df, index)\n",
    "    df = pd.concat([nutri, HH], axis=1)\n",
    "    df['Needed'] = df.iloc[:, 1] - df.iloc[:, 0]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Nutritional Data for Household: (2010, 10001, 1)</th>\n",
       "      <th>Total Dietary Reqs for HH: (2010, 10001, 1)</th>\n",
       "      <th>Needed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>4283.885714</td>\n",
       "      <td>6700.0</td>\n",
       "      <td>2416.114286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>4597.473143</td>\n",
       "      <td>910.0</td>\n",
       "      <td>-3687.473143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>74399.228571</td>\n",
       "      <td>13400.0</td>\n",
       "      <td>-60999.228571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>188.472857</td>\n",
       "      <td>187.6</td>\n",
       "      <td>-0.872857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>1165.700000</td>\n",
       "      <td>2550.0</td>\n",
       "      <td>1384.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>81.464000</td>\n",
       "      <td>85.0</td>\n",
       "      <td>3.536000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>3297.100000</td>\n",
       "      <td>2270.0</td>\n",
       "      <td>-1027.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>102.906614</td>\n",
       "      <td>96.0</td>\n",
       "      <td>-6.906614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>9625.057143</td>\n",
       "      <td>4660.0</td>\n",
       "      <td>-4965.057143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>39602.600000</td>\n",
       "      <td>31200.0</td>\n",
       "      <td>-8402.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>604.914429</td>\n",
       "      <td>319.0</td>\n",
       "      <td>-285.914429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>5.634414</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2.065586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>7.585586</td>\n",
       "      <td>7.4</td>\n",
       "      <td>-0.185586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>2325.600000</td>\n",
       "      <td>5100.0</td>\n",
       "      <td>2774.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>14.340286</td>\n",
       "      <td>15.3</td>\n",
       "      <td>0.959714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>20.479200</td>\n",
       "      <td>8.3</td>\n",
       "      <td>-12.179200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>744.188571</td>\n",
       "      <td>510.0</td>\n",
       "      <td>-234.188571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>108.864857</td>\n",
       "      <td>96.0</td>\n",
       "      <td>-12.864857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>315.071429</td>\n",
       "      <td>660.0</td>\n",
       "      <td>344.928571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>75.921286</td>\n",
       "      <td>60.0</td>\n",
       "      <td>-15.921286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Total Nutritional Data for Household: (2010, 10001, 1)  \\\n",
       "Calcium, Ca                                                           4283.885714        \n",
       "Carbohydrate, by difference                                           4597.473143        \n",
       "Energy                                                               74399.228571        \n",
       "Fiber, total dietary                                                   188.472857        \n",
       "Folate, DFE                                                           1165.700000        \n",
       "Iron, Fe                                                                81.464000        \n",
       "Magnesium, Mg                                                         3297.100000        \n",
       "Niacin                                                                 102.906614        \n",
       "Phosphorus, P                                                         9625.057143        \n",
       "Potassium, K                                                         39602.600000        \n",
       "Protein                                                                604.914429        \n",
       "Riboflavin                                                               5.634414        \n",
       "Thiamin                                                                  7.585586        \n",
       "Vitamin A, RAE                                                        2325.600000        \n",
       "Vitamin B-12                                                            14.340286        \n",
       "Vitamin B-6                                                             20.479200        \n",
       "Vitamin C, total ascorbic acid                                         744.188571        \n",
       "Vitamin E (alpha-tocopherol)                                           108.864857        \n",
       "Vitamin K (phylloquinone)                                              315.071429        \n",
       "Zinc, Zn                                                                75.921286        \n",
       "\n",
       "                                Total Dietary Reqs for HH: (2010, 10001, 1)  \\\n",
       "Calcium, Ca                                                          6700.0   \n",
       "Carbohydrate, by difference                                           910.0   \n",
       "Energy                                                              13400.0   \n",
       "Fiber, total dietary                                                  187.6   \n",
       "Folate, DFE                                                          2550.0   \n",
       "Iron, Fe                                                               85.0   \n",
       "Magnesium, Mg                                                        2270.0   \n",
       "Niacin                                                                 96.0   \n",
       "Phosphorus, P                                                        4660.0   \n",
       "Potassium, K                                                        31200.0   \n",
       "Protein                                                               319.0   \n",
       "Riboflavin                                                              7.7   \n",
       "Thiamin                                                                 7.4   \n",
       "Vitamin A, RAE                                                       5100.0   \n",
       "Vitamin B-12                                                           15.3   \n",
       "Vitamin B-6                                                             8.3   \n",
       "Vitamin C, total ascorbic acid                                        510.0   \n",
       "Vitamin E (alpha-tocopherol)                                           96.0   \n",
       "Vitamin K (phylloquinone)                                             660.0   \n",
       "Zinc, Zn                                                               60.0   \n",
       "\n",
       "                                      Needed  \n",
       "Calcium, Ca                      2416.114286  \n",
       "Carbohydrate, by difference     -3687.473143  \n",
       "Energy                         -60999.228571  \n",
       "Fiber, total dietary               -0.872857  \n",
       "Folate, DFE                      1384.300000  \n",
       "Iron, Fe                            3.536000  \n",
       "Magnesium, Mg                   -1027.100000  \n",
       "Niacin                             -6.906614  \n",
       "Phosphorus, P                   -4965.057143  \n",
       "Potassium, K                    -8402.600000  \n",
       "Protein                          -285.914429  \n",
       "Riboflavin                          2.065586  \n",
       "Thiamin                            -0.185586  \n",
       "Vitamin A, RAE                   2774.400000  \n",
       "Vitamin B-12                        0.959714  \n",
       "Vitamin B-6                       -12.179200  \n",
       "Vitamin C, total ascorbic acid   -234.188571  \n",
       "Vitamin E (alpha-tocopherol)      -12.864857  \n",
       "Vitamin K (phylloquinone)         344.928571  \n",
       "Zinc, Zn                          -15.921286  "
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare_nutrients(Q4_consumption_daily, HH_charQ4, Q4_consumption_daily.index[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Determine if these households are meeting all of their minimum requirements "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define 3 functions that returns True if the household meets the specified minimum requirements, and False if not. 1 that checks if all minimum requirements are met, 1 for a given percentage of the minimum requirements, and 1 for the energy requirement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "def meet_requirements(quartile_consumption_df, quartile_HH_char_df, index):\n",
    "    df = compare_nutrients(quartile_consumption_df, quartile_HH_char_df, index)\n",
    "    return (df['Needed'].values < 0).all()\n",
    "\n",
    "def meet_energy_requirement(quartile_consumption_df, quartile_HH_char_df, index):\n",
    "    df = compare_nutrients(quartile_consumption_df, quartile_HH_char_df, index)\n",
    "    energy_col = df.iloc[2]\n",
    "    return energy_col[0] > energy_col[1]\n",
    "\n",
    "def meet_percent_requirements(percent, quartile_consumption_df, quartile_HH_char_df, index):\n",
    "    df = compare_nutrients(quartile_consumption_df, quartile_HH_char_df, index)\n",
    "    return (sum(df['Needed'].values < 0) / len(df['Needed'].values < 0)) > percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meet_requirements(Q1_consumption_daily, HH_charQ1, Q1_consumption_daily.index[777])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meet_energy_requirement(Q4_consumption_daily, HH_charQ4, Q4_consumption_daily.index[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Determine which of the households are meeting their minimum requirements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a list of which households in each quartile meet all of the minimum daily requirements, 80% of the minimum daily requirements, 50% of the daily requirements, and the minimum energy requirement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the indices for all hhs in Q1 and Q4\n",
    "Q1_indices = list(Q1_consumption_daily.index)\n",
    "Q4_indices = list(Q4_consumption_daily.index)\n",
    "\n",
    "# Creates a list of 0/1 values for all of these quartiles and requirements\n",
    "\n",
    "#meet_mins_Q1 = []\n",
    "#for i in Q1_indices:\n",
    "    #if meet_requirements(Q1_consumption_daily, HH_charQ1, i):\n",
    "        #meet_mins_Q1.append(1)\n",
    "    #else:\n",
    "        #meet_mins_Q1.append(0)\n",
    "\n",
    "#meet_mins_Q4 = []\n",
    "#for i in Q4_indices:\n",
    "    #if meet_requirements(Q4_consumption_daily, HH_charQ4, i):\n",
    "        #meet_mins_Q4.append(1)\n",
    "    #else:\n",
    "        #meet_mins_Q4.append(0)\n",
    "        \n",
    "#meet_80_mins_Q1 = []\n",
    "#for i in Q1_indices:\n",
    "    #if meet_percent_requirements(0.8, Q1_consumption_daily, HH_charQ1, i):\n",
    "        #meet_80_mins_Q1.append(1)\n",
    "    #else:\n",
    "        #meet_80_mins_Q1.append(0)\n",
    "\n",
    "#meet_80_mins_Q4 = []\n",
    "#for i in Q4_indices:\n",
    "    #if meet_percent_requirements(0.8, Q4_consumption_daily, HH_charQ4, i):\n",
    "        #meet_80_mins_Q4.append(1)\n",
    "    #else:\n",
    "        #meet_80_mins_Q4.append(0)\n",
    "                \n",
    "#meet_50_mins_Q1 = []\n",
    "#for i in Q1_indices:\n",
    "    #if meet_percent_requirements(0.5, Q1_consumption_daily, HH_charQ1, i):\n",
    "        #meet_50_mins_Q1.append(1)\n",
    "    #else:\n",
    "        #meet_50_mins_Q1.append(0)\n",
    "\n",
    "#meet_50_mins_Q4 = []\n",
    "#for i in Q4_indices:\n",
    "    #if meet_percent_requirements(0.5, Q4_consumption_daily, HH_charQ4, i):\n",
    "        #meet_50_mins_Q4.append(1)\n",
    "    #else:\n",
    "        #meet_50_mins_Q4.append(0)\n",
    "        \n",
    "#meet_energy_min_Q1 = []\n",
    "#for i in Q1_indices:\n",
    "    #if meet_energy_requirement(Q1_consumption_daily, HH_charQ1, i):\n",
    "        #meet_energy_min_Q1.append(1)\n",
    "    #else:\n",
    "        #meet_energy_min_Q1.append(0)\n",
    "        \n",
    "#meet_energy_min_Q4 = []\n",
    "#for i in Q4_indices:\n",
    "    #if meet_energy_requirement(Q4_consumption_daily, HH_charQ4, i):\n",
    "        #meet_energy_min_Q4.append(1)\n",
    "    #else:\n",
    "        #meet_energy_min_Q4.append(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This code takes a very long time to run, so we saved the information as dataframes to pull from later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pd.DataFrame(meet_mins_Q1).to_csv('meet_mins_Q1.csv')\n",
    "#pd.DataFrame(meet_mins_Q4).to_csv('meet_mins_Q4.csv')\n",
    "#pd.DataFrame(meet_80_mins_Q1).to_csv('meet_80_mins_Q1.csv')\n",
    "#pd.DataFrame(meet_80_mins_Q4).to_csv('meet_80_mins_Q4.csv')\n",
    "#pd.DataFrame(meet_50_mins_Q1).to_csv('meet_50_mins_Q1.csv')\n",
    "#pd.DataFrame(meet_50_mins_Q4).to_csv('meet_50_mins_Q4.csv')\n",
    "#pd.DataFrame(meet_energy_min_Q1).to_csv('meet_energy_min_Q1.csv')\n",
    "#pd.DataFrame(meet_energy_min_Q4).to_csv('meet_energy_min_Q4.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using that data we were able to create a table that has all of this information in it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1_adequacy = Q1_consumption_daily.copy()\n",
    "#Q1_adequacy['All Reqs Met'] = meet_mins_Q1\n",
    "#Q1_adequacy['80% Reqs Met'] = meet_80_mins_Q1\n",
    "#Q1_adequacy['50% Reqs Met'] = meet_50_mins_Q1\n",
    "#Q1_adequacy['Energy Req Met'] = meet_energy_min_Q1\n",
    "#Q1_adequacy = Q1_adequacy.drop(columns=Q1_adequacy.columns[:-4])\n",
    "\n",
    "#Q4_adequacy = Q4_consumption_daily.copy()\n",
    "#Q4_adequacy['All Reqs Met'] = meet_mins_Q4\n",
    "#Q4_adequacy['80% Reqs Met'] = meet_80_mins_Q4\n",
    "#Q4_adequacy['50% Reqs Met'] = meet_50_mins_Q4\n",
    "#Q4_adequacy['Energy Req Met'] = meet_energy_min_Q4\n",
    "#Q4_adequacy = Q4_adequacy.drop(columns=Q4_adequacy.columns[:-4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead of reading in the individual columns, we saved these dataframes as csv files as well so we could read them in easily later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1_adequacy.to_csv('Q1_adequacy.csv')\n",
    "#Q4_adequacy.to_csv('Q4_adequacy.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we have to read in the csv files with the nutritional adequacy data and reset their indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_adequacy = pd.read_csv('Q1_adequacy.csv').reset_index(drop=True).set_index(['t', 'j', 'm'])\n",
    "Q4_adequacy = pd.read_csv('Q4_adequacy.csv').reset_index(drop=True).set_index(['t', 'j', 'm'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>All Reqs Met</th>\n",
       "      <th>80% Reqs Met</th>\n",
       "      <th>50% Reqs Met</th>\n",
       "      <th>Energy Req Met</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10013</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10022</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10063</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10066</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10069</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379075</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379083</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379084</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379085</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379090</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3874 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               All Reqs Met  80% Reqs Met  50% Reqs Met  Energy Req Met\n",
       "t    j      m                                                          \n",
       "2010 10013  1             0             0             0               0\n",
       "     10022  1             0             0             0               0\n",
       "     10063  1             0             0             0               0\n",
       "     10066  1             0             0             0               0\n",
       "     10069  1             0             0             0               0\n",
       "...                     ...           ...           ...             ...\n",
       "2018 379075 1             0             0             0               1\n",
       "     379083 1             0             0             0               0\n",
       "     379084 1             0             0             0               0\n",
       "     379085 1             0             0             0               0\n",
       "     379090 1             0             0             0               0\n",
       "\n",
       "[3874 rows x 4 columns]"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q1_adequacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>All Reqs Met</th>\n",
       "      <th>80% Reqs Met</th>\n",
       "      <th>50% Reqs Met</th>\n",
       "      <th>Energy Req Met</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th>j</th>\n",
       "      <th>m</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2010</th>\n",
       "      <th>10001</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10002</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10004</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10006</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10009</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2018</th>\n",
       "      <th>379144</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379146</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379148</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379151</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379154</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4502 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               All Reqs Met  80% Reqs Met  50% Reqs Met  Energy Req Met\n",
       "t    j      m                                                          \n",
       "2010 10001  1             0             0             1               1\n",
       "     10002  1             0             0             0               1\n",
       "     10004  1             0             0             0               1\n",
       "     10006  1             0             0             0               1\n",
       "     10009  1             0             0             0               1\n",
       "...                     ...           ...           ...             ...\n",
       "2018 379144 1             0             0             0               0\n",
       "     379146 1             0             0             0               0\n",
       "     379148 1             0             0             0               0\n",
       "     379151 1             0             0             0               1\n",
       "     379154 1             0             0             0               1\n",
       "\n",
       "[4502 rows x 4 columns]"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q4_adequacy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Determine what percentage of households in these quartiles are meeting any of the requirements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the total number of households in the upper and lower quartiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3874 4502\n"
     ]
    }
   ],
   "source": [
    "num_hhs_Q1 = len(Q1_consumption_daily.index)\n",
    "num_hhs_Q4 = len(Q4_consumption_daily.index)\n",
    "print(num_hhs_Q1, num_hhs_Q4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a function to find the proportion of households that meet the given requirement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "def percentage_met(adequacy_df, requirement):\n",
    "    # Takes in one of the adequacy dataframes defined above and the requirement to be tested as a string\n",
    "    \n",
    "    values = adequacy_df[requirement].tolist()\n",
    "    num_hhs = len(values)\n",
    "    return print(str(round((sum(values) / num_hhs * 100), 3)) + \"% of households met the '\" + requirement + \"' requirement\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion of Lower Quartile that met the following requirements:\n",
      "0.026% of households met the 'All Reqs Met' requirement\n",
      "0.181% of households met the '80% Reqs Met' requirement\n",
      "0.878% of households met the '50% Reqs Met' requirement\n",
      "11.848% of households met the 'Energy Req Met' requirement\n"
     ]
    }
   ],
   "source": [
    "print('Proportion of Lower Quartile that met the following requirements:')\n",
    "\n",
    "percentage_met(Q1_adequacy, 'All Reqs Met')\n",
    "percentage_met(Q1_adequacy, '80% Reqs Met')\n",
    "percentage_met(Q1_adequacy, '50% Reqs Met')\n",
    "percentage_met(Q1_adequacy, 'Energy Req Met')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion of Upper Quartile that met the following requirements:\n",
      "0.289% of households met the 'All Reqs Met' requirement\n",
      "3.199% of households met the '80% Reqs Met' requirement\n",
      "15.571% of households met the '50% Reqs Met' requirement\n",
      "58.441% of households met the 'Energy Req Met' requirement\n"
     ]
    }
   ],
   "source": [
    "print('Proportion of Upper Quartile that met the following requirements:')\n",
    "\n",
    "percentage_met(Q4_adequacy, 'All Reqs Met')\n",
    "percentage_met(Q4_adequacy, '80% Reqs Met')\n",
    "percentage_met(Q4_adequacy, '50% Reqs Met')\n",
    "percentage_met(Q4_adequacy, 'Energy Req Met')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a function that will find the percentages for each category. Then, define a function to put those values into a dataframe for easy access."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "def all_percentages_met(adequacy_df):\n",
    "    # Takes in one of the adequacy dataframes defined above and the requirement to be tested as a string\n",
    "    num_hhs = len(adequacy_df)\n",
    "    percentages = []\n",
    "    for requirement in adequacy_df.columns:\n",
    "        values = adequacy_df[requirement].tolist()\n",
    "        perc = round((sum(values) / num_hhs * 100), 3)\n",
    "        percentages.append(perc)\n",
    "    return percentages\n",
    "\n",
    "def percentages_df(adequacy_dfs, quartiles):\n",
    "    # quartile as a string i.e. Q1\n",
    "    df = pd.DataFrame()\n",
    "    df['All Reqs Met'] = []\n",
    "    df['80% Reqs Met'] = []\n",
    "    df['50% Reqs Met'] = []\n",
    "    df['Energy Req Met'] = []\n",
    "    for data in range(len(adequacy_dfs)):\n",
    "        percs = all_percentages_met(adequacy_dfs[data])\n",
    "        df.loc[quartiles[data]] = percs\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.026, 0.181, 0.878, 11.848]"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_percentages_met(Q1_adequacy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "i = [Q1_adequacy, Q4_adequacy]\n",
    "q = ['Q1', 'Q4']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All Reqs Met</th>\n",
       "      <th>80% Reqs Met</th>\n",
       "      <th>50% Reqs Met</th>\n",
       "      <th>Energy Req Met</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Q1</th>\n",
       "      <td>0.026</td>\n",
       "      <td>0.181</td>\n",
       "      <td>0.878</td>\n",
       "      <td>11.848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q4</th>\n",
       "      <td>0.289</td>\n",
       "      <td>3.199</td>\n",
       "      <td>15.571</td>\n",
       "      <td>58.441</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    All Reqs Met  80% Reqs Met  50% Reqs Met  Energy Req Met\n",
       "Q1         0.026         0.181         0.878          11.848\n",
       "Q4         0.289         3.199        15.571          58.441"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perc_df = percentages_df(i, q)\n",
    "perc_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Put all of the percentages in a bar chart to easily see the differences between requirements and quartiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "   \n",
    "Q1_xaxis = perc_df.columns.tolist()\n",
    "Q1_yaxis = all_percentages_met(Q1_adequacy)\n",
    "\n",
    "plt.bar(Q1_xaxis, Q1_yaxis)\n",
    "plt.title('Nutritional Adequacy for Q1')\n",
    "plt.xlabel('Requirements')\n",
    "plt.ylabel('% of households that meet the requirement')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "   \n",
    "Q4_xaxis = perc_df.columns.tolist()\n",
    "Q4_yaxis = all_percentages_met(Q4_adequacy)\n",
    "\n",
    "plt.bar(Q4_xaxis, Q4_yaxis)\n",
    "plt.title('Nutritional Adequacy for Q4')\n",
    "plt.xlabel('Requirements')\n",
    "plt.ylabel('% of households that meet the requirement')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEWCAYAAABhffzLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAoaklEQVR4nO3deZwcVbn/8c+XEJgQApgQEAjJBAUUUCLEBcNVMKiACIgsoihwueSK7IsQQSWKcHFFEUUQhSCooGxhU2IgIuKSRBIIi8YfBIiEEMISdkJ4fn+c06QzTPdUz0zNTDPf9+vVr669nqqZPl196tRzFBGYmVn/sUpvB2BmZj3LBb+ZWT/jgt/MrJ9xwW9m1s+44Dcz62dc8JuZ9TMu+K2pSPqJpK/UmX+ypAt6II7pkv6nm7a1g6QF3bEtsyJc8Fu3kDRf0iJJg6um/Y+k6QXXP0jSbR0tFxGfj4jT8jqvKzAj4oyI6JYCuavyMYWkfXs7FrNqLvitO60KHF3WxiUNKGvbJTkQeCK/m/UZLvitO30bOEHSOm1nSGrNV7+rVk2bnn8VvB34CbCdpGclPZXnXyTpXEk3SHoO2DFP+0b+ZXEjsGFe51lJG0qaJOmSqn3sLuluSU/l/b29at58SSdIulPS05Iuk9SS571J0nWSFkt6Mg+PKHoiJI0CPghMAD4qaf2qeYPycTwp6R7g3W3W3VDSFXnfD0g6qta6kr5Y/asnn+O3Vo1fJOkbRY5J0lBJF0p6JM+/Ok+fK+njVcsNlPS4pDFFz4f1LS74rTvNBKYDJzSyUkTcC3we+EtErBkR61TN/jRwOjAEuK1qneeAXYBH8jprRsQj1duVtBnwK+AYYDhwA3CtpNWqFtsX2BkYDbwTOChPXwW4EBgFjAReAM5p4LA+B8yMiCuAe4HPVM07FXhLfn2Uql8EklYBrgXmABsB44FjJH20o3UL6OiYfgGsAWwJrAecladfDBxQtdyuwMKImN3Avq0PccFv3e2rwJGShnfT9q6JiD9HxKsR8WKD6+4HXB8RUyNiGfAdYBDw/qplzo6IRyLiCVKBOwYgIpZExBUR8XxEPEP68vlgA/v+HPDLPPxLVi6g9wVOj4gnIuJh4Oyqee8GhkfE1yPi5Yi4H/gp8KkC69ZV75gkbUD6Iv18RDwZEcsi4o951UuAXSWtlcc/S/qSsCblgt+6VUTMBa4DJnbTJh/uwrobAg9WRiLi1by9jaqWebRq+HlgTQBJa0g6T9KDkpYCtwLrFLnPIGkc6RfEr/OkXwLvqKoa2ZCVj+vBquFRpOqrpyov4GRg/QLrdhRXvWPaGHgiIp5su17+JfVn4JO5Gm8X4NKi+7W+xwW/leFU4FBWLmCfy+9rVE17c9VwrTSx9dLHdpRa9hFSQQqAJJEKuP90sB7A8cDmwHsjYi3gA5XNFFj3wLzcbEmPAn/L0z+X3xfmOCpGVg0/DDwQEetUvYZExK4F1oX05VXrHNc7poeBoe3dn8kmk6p79iFVyRU5h9ZHueC3bhcR/wYuA46qmraYVOAeIGmApP8m1VNXLAJGtKl/78giYJiktWvMvxz4mKTxkgaSCr6XgNsLbHsIqQ78KUlDSV9mHco3h/cl3dQdU/U6EvhMvrl9OfClfLN1RJ5X8XdgqaST8o3cAZK2klS5AVxvXYDZwKfzejuzcvVUzWOKiIWkm+U/ztseKOkDVeteDWxDarV1cZFzYX2XC34ry9eBwW2mHQp8EVhCuoFYXQDfDNwNPCrp8SI7iIj7SDdv78/VIhu2mf9P0lXqD4HHgY8DH4+Ilwts/vuk+wGPA38FflckJmBPUuF6cUQ8WnkBPwMGkG4kf41URfMAcBNV9eURsTzHOSbPfxy4AKh8udVcNzs6r/8U6Yby1Q0c02eBZcB9wGOkm+KVuF4AriBVYV1Z6ExYnyV3xGLWvCTtAFwSEYWbmnZhX18FNouIAzpc2Pq0VTtexMz6u1w1dAjpV4E1OVf1mFldkg4l3fy9MSJu7e14rOtc1WNm1s/4it/MrJ9pijr+ddddN1pbW3s7DDOzpjJr1qzHI+J1T9F3WPBLOjoiftDRtDK1trYyc+bMntqdmdkbgqR2n+wuUtXTXhKogwrudB1Jv5V0n6R7JW2XMwBOlTQvv7+pyLbMzKx71Cz4Je0v6VpgtKQpVa9bSA/gFPED4HcR8TZga1KWwonAtIjYFJhG9+V0MTOzAupV9dxOyguyLvDdqunPAHd2tOGcye8D5F8H+WnJlyXtAeyQF5tMSuN7UmNhm5lZZ9Us+CPiQdKj4dt1ctubAIuBCyVtDcwiPU6+fs4LQkQslLReeytLmkDKd8LIkW3zUMGyZctYsGABL77YaKbevqOlpYURI0YwcODA3g7FzPqRIjd39wK+SeqYQfkVObtfR9veBjgyIv4m6Qc0UK0TEecD5wOMHTv2dQ8bLFiwgCFDhtDa2kpKuthcIoIlS5awYMECRo8e3dvhmFk/UuTm7reA3SNi7YhYK6eI7ajQB1gALIiISkra35K+CBblTh8qnT881pnAX3zxRYYNG9aUhT6AJIYNG9bUv1jMrDkVKfgX5a7xGpIzEj4safM8aTxwDzCFFS2FDgSuaXTbFc1a6Fc0e/xm1pyKPMA1U9JlpPSuL1UmRkSR1KxHApfmHOv3AweTvmwul3QI8BCpYwczM+shRQr+tUi9+nykalpQICd37ox5bDuzxhcJrhGtE6/v1u3NP/NjHS6zYMECDj/8cO655x6WL1/Orrvuyne/+12effZZ9t57b2bMmMFBBx3EOec00ke3mVm5Oiz4I+Lgngik2UQEe+21F4cddhjXXHMNy5cvZ8KECZx44omcccYZnHbaacydO5e5c+f2dqhm1lmTanXu1pMxPN3tm+ywjl/SZpKmSZqbx98p6cvdHkmTufnmm2lpaeHgg9P34oABAzjrrLO4+OKLiQi23357WlpaejlKM7PXK3Jz96fAl0hdshERdwKfKjOoZnD33Xez7bbbrjRtrbXWorW1lX//+9+9FJWZWceKFPxrRMTf20x7pYxgmklEtNsqx/0bmFlfV6Tgf1zSW0g3dJG0NymVQ7+25ZZbvi5j6NKlS1m0aBGbb755jbXMzHpfkYL/cOA84G2S/gMcAxxWZlDNYPz48Tz//PNcfPHFACxfvpzjjz+eI444gkGDBvVydGZmtRVp1XM/sJOkwcAqEfFM+WE1rkjzy+4kiauuuorDDz+c0047jcWLF7PffvtxyimnAKkPgaVLl/Lyyy9z9dVXc9NNN7HFFlv0aIxmZu0pkqtnHeBzQCuwaqVeOyKOKjOwZrDxxhszZcoUAG6//Xb2339/Zs2axbbbbsv8+fN7NzgzsxqKPMB1A/BX4C7g1XLDaV7vf//7efDBdju7MTPrU4oU/C0RcVzpkZiZWY8ocnP3F5IOlbRB7jZxqKShpUdmZmalKHLF/zLwbeAUcpPO/L5JWUGZmVl5ihT8xwFvjYjHyw7GzMzKV6Sq525Sdk4zM3sDKHLFvxyYLekWVs7H37eac3Z3Fr0CGfFqpWVeffXVAXjooYfYYostmDRpEieccEL3xmdm1klFrvivBk4Hbid1mF559WuVtMx77rkn8+bNY968ebzwwguceOKJry1z7LHHsssuu/RilGZmr1fkyd3JkgYBIyPinz0QU1OolZZ51KhRnH766fzhD39gk002YfDgwb0cqZnZyork4/84MBv4XR4fI2lKyXH1efXSMs+ZM4dvfvObnHrqqb0UnZlZbUWqeiYB7wGegte6UxxdWkRNol5a5lNPPZVjjz2WNddcsxciMzOrr8jN3Vci4uk2hVy/Tzq/5ZZbcsUVV6w0rZKWeeDAgZx44omceOKJPPXUU6yyyiq0tLRwxBFH9FK0ZmYrFLninyvp08AASZtK+iHpRm+/Vi8t84wZM5g/fz7z58/nmGOO4eSTT3ahb2Z9RpEr/iNJT+2+BPwS+D3wjTKD6pQSOiSup6O0zGZmfVXdgl/SAGBKROxEKvytSr20zBWTJk3qpejMzNpXt+CPiOWSnpe0dkT07CV1k3FaZjNrFkWqel4E7pI0FXiuMrHPPblrZmaFFCn4r8+vPqdWk8pmEdHvG0eZWS8o9ORuZzcuaT7wDCnfzysRMTbn8r+M1JXjfGDfiHiy0W23tLSwZMkShg0b1pSFf0SwZMkSWlpaejsUM+tnahb8ki6PiH0l3UU77fYj4p0F97Fjm5TOE4FpEXGmpIl5/KRGggYYMWIECxYsYPHixY2u2me0tLQwYsSI3g7DzPqZelf8R+f33bp5n3sAO+ThycB0OlHwDxw4kNGj+/0DxGZmDatZ8EfEwvzelaYqAdwkKYDzIuJ8YP2qbS+UtF4Xtm9mZg3qsI5f0jOsqOpZDRgIPBcRaxXY/riIeCQX7lMl3Vc0MEkTgAkAI0eOLLqamZl1oMOUDRExJCLWyq8W4JPAOUU2HhGP5PfHgKtIyd4WSdoAIL8/VmPd8yNibESMHT58eLGjMTOzDhXJ1bOSiLga+FBHy0kaLGlIZRj4CDAXmAIcmBc7ELim0RjMzKzzilT17FU1ugowlmLZOdcHrspNLVcFfhkRv5M0A7hc0iHAQ8A+DUdtZmadVuQBro9XDb9Canu/R0crRcT9wNbtTF8CjC8Yn5mZdbMiD3Ad3BOBmJlZzyhS1XN2vfnO2WNm1lyK3NxtAbYB5uXXGFIKhln5ZWZmTaRIHf+mpLQLywAk/QS4KSKOLTUyMzMrRZEr/g2BIVXja+ZpZmbWhIpc8Z8J3CHpljz+QWBSaRGZmVmpirTquVDSjcB786SJEfFouWGZmVlZOqzqUXoCaydg64i4BlhN0ntKj8zMzEpRpI7/x8B2wP55/BngR6VFZGZmpSpSx//eiNhG0h0AEfGkpNVKjsvMzEpS5Ip/maQB5Pw8koYDr5YalZmZlaZIwX82KaXyepJOB24Dzig1KjMzK03dqh5JqwAPACeSEqsJ2DMi7u2B2MzMrAR1C/6IeFXSdyNiO6Bw71lmZtZ3FanquUnSJ3OzTjMza3JFWvUcBwwGXpH0Iqm6Jwr2uWtmZn1MkSd3h3S0jJmZNY+G+9w1M7Pm5oLfzKyfccFvZtbPFCr4JW0v6eA8PFzS6HLDMjOzshTJznkqcBLwpTxpIHBJmUGZmVl5ilzxfwLYHXgOICIeYeUeuczMrIkUKfhfjohgRZK2weWGZGZmZSpS8F8u6TxgHUmHAn8AflpuWGZmVpYiD3B9R9KHgaXA5sBXI2Jq6ZGZmVkpiqRsIBf0LuzNzN4AirTq2UvSPElPS1oq6RlJS4vuQNIASXdIui6PD5U0NW9zqqQ3deUAzMysMUXq+L8F7B4Ra0fEWhExpMEEbUcD1fn7JwLTImJTYFoeNzOzHlKk4F/U2Y5XJI0APgZcUDV5D2ByHp4M7NmZbZuZWefUrOOXtFcenCnpMuBq4KXK/Ii4ssD2v0/qvau63f/6EbEwb2OhpPVq7H8CMAFg5MiRBXZlZmZF1Lu5+/Gq4eeBj1SNB1C34Je0G/BYRMyStEOjgUXE+cD5AGPHjo1G1zczs/bVLPgjopKbZ1xE/Ll6nqRxBbY9Dthd0q5AC7CWpEuARZI2yFf7GwCPdT58MzNrVJE6/h8WnLaSiPhSRIyIiFbgU8DNEXEAMAU4MC92IHBNwVjNzKwb1Kvj3w54PzBc0nFVs9YCBnRhn2eSngY+BHgI2KcL2zIzswbVq+NfDVgzL1N9c3YpsHcjO4mI6cD0PLwEGN/I+mZm1n3q1fH/EfijpIsi4sEejMnMzErUYR2/C30zszcWd71oZtbPFMnV87qmmwWbc5qZWR9UWnNOMzPrm3qjOaeZmfWiHmnOaWZmfUfh5pySBkfEcz0Ym5mZlaBIHf+Gku4h59SXtLWkH5cblpmZlaVIwf994KPAEoCImAN8oMSYzMysRIXa8UfEw20mLS8hFjMz6wFFOlt/WNL7gZC0GnAUK3elaGZmTaTIFf/ngcOBjYAFwJg8bmZmTajDK/6IeBz4TA/EYmZmPaBIyobNJE2TNDePv1PSl8sPzczMylCkquenwJeAZQARcSepRy0zM2tCRQr+NSLi722mvVJGMGZmVr4iBf/jkt4CBICkvYGFpUZlZmalKdKc83DgfOBtkv4DPAAcUGpUZmZWmiKteu4HdpI0GFglIp4pPywzMytLhwW/pHWAzwGtwKqSAIiIo8oMzMzMylGkqucG4K/AXcCr5YZjZmZlK1Lwt0TEcR0vZmZmzaBIq55fSDpU0gaShlZepUdmZmalKHLF/zLwbeAUcpPO/L5JWUGZmVl5ihT8xwFvzTl7zMysyRWp6rkbeL7RDUtqkfR3SXMk3S3pa3n6UElTJc3L729qdNtmZtZ5Ra74lwOzJd0CvFSZWKA550vAhyLiWUkDgdsk3QjsBUyLiDMlTQQmAid1LnwzM2tUkYL/6vxqSEQE8GweHZhfAewB7JCnTwam44LfzKzHFHlyd3JnNy5pADALeCvwo4j4m6T1I2Jh3vZCSevVWHcCMAFg5MiRnQ3BzMzaKNTnbmdFxPKIGAOMAN4jaasG1j0/IsZGxNjhw4eXFqOZWX9TasFfERFPkap0dgYWSdoAIL8/1hMxmJlZUqQHrn2KTGtnmeE5zw+SBgE7AfcBU4AD82IHAtc0EK+ZmXVRkSv+LxWc1tYGwC2S7gRmAFMj4jrgTODDkuYBH87jZmbWQ2re3JW0C7ArsJGks6tmrUWBHrhyF43vamf6EmB846GamVl3qNeq5xFgJrA7qWVOxTPAsWUGZWZm5alZ8EfEHGCOpF9GxLIejMnMzEpU5AGuVkn/B2wBtFQmRoSTtJmZNaEiN3cvBM4l1evvCFwM/KLMoMzMrDxFCv5BETENUEQ8GBGTgA+VG5aZmZWlSFXPi5JWAeZJOgL4D9BumgUzM+v7ilzxHwOsARwFbAt8lhUPYJmZWZMpkqRtRh58Fji43HDMzKxsHRb8kjYDvgiMql4+IlzPb2bWhIrU8f8G+AnwU1KnLGZm1sSKFPyvRMS5pUdiZmY9ol6unqF58FpJXwCuYuWuF58oOTYzMytBvSv+WaSuEpXHv1g1LwA/uWtm1oTq5eoZDSCpJSJerJ4nqaX9tczMrK8r0o7/9oLTzMysCdSr438zsBEwSNK7WFHlsxbpgS4zM2tC9er4PwocROoo/busKPiXAieXG5aZmZWlXh3/ZGCypE9GxBU9GJOZmZWowzp+F/pmZm8sRW7umpnZG4gLfjOzfqbDgl/SPpKG5OEvS7pS0jblh2ZmZmUocsX/lYh4RtL2pJY+k0ldMZqZWRMqUvBXMnJ+DDg3Iq4BVisvJDMzK1ORgv8/ks4D9gVukLR6wfXMzKwPKlKA7wv8Htg5Ip4ChrJywjYzM2siRdIyA0yvmvYSMLPcsMzMrCxF0zKPBJ7Mw+sADwGj621Y0sbAxcCbgVeB8yPiB/nL4zKgFZgP7BsRT3blIMzMrLiaVT0RMToiNiFV83w8ItaNiGHAbsCVBbb9CnB8RLwdeB9wuKQtgInAtIjYFJiWx83MrIcUqeN/d0TcUBmJiBuBD3a0UkQsjIh/5OFngHtJ2T73IDUJJb/v2WDMZmbWBUUK/sfzg1utkkZJOgVY0shOJLUC7wL+BqwfEQshfTkA69VYZ4KkmZJmLl68uJHdmZlZHUUK/v2B4aQ+d68mFdT7F92BpDWBK4BjImJp0fUi4vyIGBsRY4cPH150NTMz60C9m7vAa52qH92ZjUsaSCr0L42Iyn2BRZI2iIiFkjYAHuvMts3MrHPqNee8ltSqp10RsXu9DUsS8DPg3oj4XtWsKcCBwJn5/ZpGAjYzs66pd8X/nS5uexzwWeAuSbPztJNJBf7lkg4hNQvdp4v7MTOzBtTrgeuPlWFJqwGb5dF/RsSyjjYcEbexorvGtsY3EqSZmXWfDuv4Je1AanY5n1SQbyzpwIi4tdTIzMysFB0W/KSO1j8SEf8EkLQZ8Ctg2zIDMzOzchRpzjmwUugDRMS/gIHlhWRmZmUqcsU/U9LPgF/k8c+Q8viYmVkTKlLwHwYcDhxFquO/FfhxmUGZmVl5ijzA9RLwvfwyM7MmV6RVzzhgEjCqevmcudPMzJpMkaqenwHHkur1l3ewrJmZ9XFFCv6ncypmMzN7A6iXq2ebPHiLpG+TOl95qTK/kmvfzMyaS70r/u+2GR9bNRzAh7o/HDPrVpPW7uX9P927+7d21cvVs2NPBmJmZj2jwyd3Ja0v6WeSbszjW+TMmmZm1oSKpGy4iNTh+oZ5/F/AMSXFY2ZmJStS8K8bEZcDrwJExCu4WaeZWdMqUvA/J2kYuTcuSe8DfMfGzKxJFWnHfxypu8S3SPozqeP1vUuNyszMSlMkV88/JH0Q2JyUpK1QD1xmZtY3FWnVsw8wKCLuBvYELqt6uMvMzJpMkTr+r0TEM5K2Bz5K6obx3HLDMjOzshQp+CsteD4GnBsR1wCrlReSmZmVqUjB/x9J5wH7AjdIWr3gemZm1gcVKcD3JT3AtXNEPAUMBb5YZlBmZlaeIs051wVmAkgamafdV1pEZmZZ68Tre3X/81t6dfelKVLwX096eEtACzAa+CewZYlxmZlZSYq0439H9Xhuyvm/pUVkZmalavgmbe6A5d0dLSfp55IekzS3atpQSVMlzcvvb2p0/2Zm1jVFOls/rmp0FWAbYHGBbV8EnANcXDVtIjAtIs6UNDGPn1Q4WjMz67IiV/xDql6rk+r89+hopYi4FXiizeQ9SA+Akd/3LBqomZl1jyJ1/F8DkDQkjcazXdjf+hGxMG93oaT1ai0oaQIwAWDkyJG1FjMzswYVydWzlaQ7gLnA3ZJmSdqq7MAi4vyIGBsRY4cPH1727szM+o0iVT3nA8dFxKiIGAUcn6d1xiJJGwDk98c6uR0zM+ukIgX/4Ii4pTISEdOBwZ3c3xTgwDx8IHBNJ7djZmadVKTgv1/SVyS15teXgQc6WknSr4C/AJtLWpA7aD8T+LCkecCH87iZmfWgIk/u/jfwNeBK0tO7twIHd7RSROxfY9b4wtGZmVm3K9Kq50ngqB6IxczMekCRB7g2A04AWquXj4gPlReWmZmVpUhVz2+AnwAXsKJTFjMza1JFCv5XIsJdLZqZvUHULPglDc2D10r6AnAV8FJlfkS0TcdgZmZNoN4V/yxW5OGHlXvdCmCTsoIyM7Py1Cz4I2J0TwZiZmY9w52mm5n1My74zcz6mZoFv6Rx+X31ngvHzMzKVu+K/+z8/peeCMTMzHpGvVY9yyRdCGwk6ey2MyPCaRzMzJpQvYJ/N2An4EOkpp1mZvYGUK855+PAryXdGxFzejAmMzMrUZFWPUskXSXpMUmLJF0haUTpkZmZWSmKFPwXknrO2hDYCLg2TzMzsyZUpOBfLyIujIhX8usiwL2fm5k1qSIF/2JJB0gakF8HAEvKDszMzMpRtOvFc4CzSMnZbs/TzMo3ae1e3v/Tvbt/sxIU6XrxIWD3HojFzMx6gHP1mJn1My74zcz6GRf8Zmb9TOGCX9L7JN0s6c+S9iwxJjMzK1G9PnffHBGPVk06jnSTV6SWPVeXG5qZmZWhXquen0iaBXw7Il4EngI+DbwKLO2B2MzMrAQ1q3oiYk9gNnCdpM8Cx5AK/TWAPcsPzczMylC3HX9EXCvpBuALwJXA6RHxp67uVNLOwA+AAcAFEXFmV7dp1he1Try+V/c/v6VXd299VL2uF3eXdBtwMzAX+BTwCUm/kvSWzu5Q0gDgR8AuwBbA/pK26Oz2zMysMfWu+L8BbAcMAm6IiPcAx0naFDid9EXQGe8B/h0R9wNI+jWwB3BPJ7fXtzV5ygFfsZq98Sgi2p8h/Qm4iFTw7xwRu3XLDqW98/b+J49/FnhvRBzRZrkJwIQ8ujnwz+7Yfy9YF3i8t4NoYj5/XePz1zXNfv5GRcTrsinXu+L/BLA/sIzUmqe7qJ1pr/v2iYjzgfO7cb+9QtLMiBjb23E0K5+/rvH565o36vnrqOvFH5awzwXAxlXjI4BHStiPmZm1ozdSNswANpU0WtJqpHsFU3ohDjOzfqlIPv5uFRGvSDoC+D2pOefPI+Luno6jBzV9dVUv8/nrGp+/rnlDnr+aN3fNzOyNydk5zcz6GRf8Zmb9TL8q+CV9QlJIelvVtFZJc/PwDpKua2e9HSQ9LekOSfdJ+k7JcYakX1SNryppcXuxtVlvjKRduymGYyXdLWluflq7JU8fKmmqpHn5/U15+jhJd0qaIemtedo6kn4vqb0mvEiaLumfkubk9cZ0R+w19jUpn9e3tjnGkFS3uZ6kYySt0eD+5ku6S9JsSTOrpvv8tb/M8nyuKq+J3RV7V1T9He+U9EdJo7pxu39qM212pSyqs16rpC43r+9XBT/puYTb6NxTx3+KiHcB7wJ2kzSuWyNb2XPAVpIG5fEPA/8psN4YoMsFv6SNgKOAsRGxFekmfOWcTQSmRcSmwLQ8DnA88EngZOCwPO0rwBlR/0bSZyJia+DHwLe7GnsH7mLlv/3eFHti/BhScsJG7RgRY9q0A/f5a98L+VxVXl3O3yWpuxqv7BgR7wSmA1/upm0CDJG0MYCktxdcp5VueK6q3xT8ktYExgGH0Pl0E0TEC6SspRvl7X5E0l8k/UPSb/J+kLRz/nVwm6SzK1frkj5YdVVzh6QhNXZ1I/CxPLw/8KuqYxks6ef5Ku8OSXsoNY39OrBf3vZ+nT3GbFVgUP7wrMGKZy32ACbn4cmsyNS6jPSU9xrAMqV8ThtFxB8L7u8vrDinrzu+PH2QpF/nq6/LJP1N0lhJAyRdlH+d3CXp2Br7uDrHj6RNgKeBxZWZ7f0tJR0FbAjcIumWgsdSj89fA/KV8dfyNu9S/rVe5xgPyvu+FrhJ0hqSLm/nmA+RdFbVfg6V9L0GzvFwSVfk/c+oXAhKGibpphzTeZIelLRuje1dDlQ+p20/4wMkfTtv+05J/5tnnQn8V/6M1/o7dSwi+sULOAD4WR6+HdgmD7cCc/PwDsB17az72nTgTcAs4M2kx7lvBQbneScBXwVagIeBTUlPKl9etf61wLg8vCawajv7exZ4J/DbvK3ZbWI4AzggD68D/AsYDBwEnNNN5+voHMdi4NKq6U+1We7J/D4G+CtwC+mhvF8Dm3awj+mkXxWQrgrP6OD4jiM1/yWfn1eAscC2wNSq7a7Tzr4mASeQssxuBZwCHFiJodbfMg/PB9Zt8Pw9APwj/69M8Pmrf/6A5aT/88prv6p1j8zDXyBl8613jAeRHhIdmuedAJyXh7eqOubBwP8DBlaVCe9oJ67XYge+X/lbAr8Ets/DI4F78/DZVcf9MVJWgtcde97uZsDtefwOUtLKSlk0AfhyHl4dmAmMpkYZ1eirx9vx96L9SX84SB+q/UkfzKL+S9KdpLxBZ0bEo5J2I/2x/qxUDbsa6argbcADETEPQNIlrMg79Gfge5IuBa6MiAXt7Swi7pTUmuO8oc3sjwC7Szohj7eQ/vm6hVK98x6kf7SngN9IOiAiLqm1TkTMBt6X1/8A6ReCJF1Gupo9PiIWtbPqpZIGk6qTtsnTah3fB0gfrMr5uTPPvx/YRNIPgeuBm+oc3q9Jv/g+CowHDs7T30f7f8vOGhcRj0haD5gq6b6IuLXWwj5/qaqnxrwr8/ssYK88XO8zMDUinsjD25NSwBMRcyvHHBHPSbqZVG17L+kL4K4a+79F0vrAY6yo6tkJ2EIrbr+spfTr/QOVGCPieklP1jnmJ4AnJX0KuBd4vmreR4B3KuU2A1ibdCH5cp3tFdYvCn5Jw4APkerNg/QhCUknNrCZP0XEbpI2A26TdBXpan5qROzfZn9jaCf/EEBEnCnpelJd/F8l7RQR99XY5xTgO6Rv+WHVuwA+GRErJa6T9N4GjqeenUhfXIvzdq8E3g9cAiyStEFELJS0AenDUB2DSB+O/YBzgFNJv6qOIl0ltvUZYA7pJ+yPSB+aWscH7ed1elLS1qTC6HBgX+C/axzbtaS68JkRsbTqg9vu37KzIuKR/P5Y/l95D+mK2OevcS/l9+WsKLPqfQaeq55UZ7sXkO6p3AdcWGe5HfM2LyJVpx5HqibfLlLVb/X+ocZnv4bLSH+3g9pMF+mXzu/bbH+HBrZdU3+p498buDgiRkVEa0RsTPopvn2jG4qIfwH/R/op+1dgnFa0wlgjfzHcB4zWin4LXvswSHpLRNwVEd8k/Xx7G7X9HPh6O1civweOzIUEkt6Vpz8D1Lpn0IiHgPfl4xHpyu7ePG8K6Sc++f2aNuseCFwfEU+S6qtfZUXPbe2KiGWkwu59Sje5ah3fraSCDklbkaoryHWoq0TEFaQbottQQ/6gnkRKLV6t1t8SGjyvuf55SGWYdPVWaa3h89c9ah1jW7eRvshQ6vfjHZUZEfE3Ut6wT1NVv96efNzHAJ+TNJT0q+i1jMJa0aKq+hzvQqoarucq4Fv5eNoe32GSBuZtbZb/l7rnXHa1rqgZXqR6yJ3bTDsKOJcG6/jz+CBSK5vRpF8SM4A782v3vMzOpC+A20hXY5X6+R+SCoE5pH+21dvZ37P1Ysj7P4/UymJu1fShOZbZ5DrSLpyzr+X45wK/qMRJ+uUxDZiX34dWrbMGqY66Um/6XznGWcBmNf4uY6vGjwd+Vuf4BpGqGu4ELibVy44FtiZV283Or13a2dck4IR6MdT5Wx6Zz8UtBc/dJvnvOwe4Gzilap7PX/vnrG0d/5l5+nxW1LGPBaZ38Bk4iKr7XKS6/N/meCbnc7lp1fyJwK/rxPXa/qs+v18h3dO4LG/3HuAnVX/fm/L5PAt4kNp1/Ou2mdbKirJoFdJ9jMrx3UKq7hmY/2/mAMd29vPtlA09IP88OyG6qU8DSyRNJ53XmR0ta6/XH86fUo9/AyPixfwLfBrpS/TlPP864KyImFbS/ueTvhj7VE7/flHHb2b91hqkm7MDSfXmh0XEy5LWAf4OzCmr0O/LfMVvZtbP9Jebu2ZmlrngNzPrZ1zwm5n1My74rWlpRUbHuZKuzTfsunsfF+T2371OncgSatYe39y1piXp2YioJMWbDPwrIto+WFTWvgdExPKe2FfVPufTB5sGWvPxFb+9UVRnTnyLpN9JmiXpT1qR0XG0UvbIGZJOk/Rsnr6Dqvo6kHSOpIPy8HTlfPOSnpX0dUl/A7aTdICkv+dfHeflNuOV5b6Z9/8HSe/J27lf0u55mXazL+ZYpkv6rVJ210uVrJTlUsUzapq9jgt+a3q5wB1PSocAqYPsIyNiW1J2xh/n6T8Azo2IdwOPdmJXg0lPVr4XWELKpzMuUnKx5eRH9fNy0/P+nwG+QepT4ROkXC+Q0oM/nWN5N3CopNF53rtI6QG2ID0FPC4iziYlbtsxInYkZfPcKCK2ioh3UD/XjNlK/ACXNbNBkmaTHnWfRcqCuSYpodxvqhKIrZ7fx5E6O4GUhuKbDe5vOXBFHh5PSmc8I+9nECsSrr0M/C4P3wW8FBHLJN2VY4X62Rf/Hjlra9Xx3dYmlkYyapqtxAW/NbMXImKMpLWB60iZJS8i5bwfU2Od9m5qvcLKv35baqz7YlW9voDJEfGldpZbFitunr1Kzi4ZEa9qRa9Q9bIvvlQ1qToj5YqDaCyjptlKXNVjTS8iniYl3TsBeAF4QNI+kNIc5wISUl8Ild7XPlO1iQdJudVXz18i4wvsdhqwt1K+fZT60h3VQNi1si/W81pmxkYyapq15YLf3hAi4g5SxsJPkQr1QyRVsmPukRc7Gjhc0gxS1Upl3YdJvaTdCVxK6g2po/3dQ0qFfJNS5x5TgQ0aCPkCUlbHfyh1sH0eHf8CPx+4UakLw42A6bkq6CKgvV8eZu1yc07rt6qbg5r1J77iNzPrZ3zFb2bWz/iK38ysn3HBb2bWz7jgNzPrZ1zwm5n1My74zcz6mf8PSBzCHp04jfkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "  \n",
    "X = perc_df.columns.tolist()\n",
    "Ygirls = all_percentages_met(Q1_adequacy)\n",
    "Zboys = all_percentages_met(Q4_adequacy)\n",
    "  \n",
    "X_axis = np.arange(len(X))\n",
    "  \n",
    "plt.bar(X_axis - 0.2, Ygirls, 0.4, label = 'Q1')\n",
    "plt.bar(X_axis + 0.2, Zboys, 0.4, label = 'Q4')\n",
    "  \n",
    "plt.xticks(X_axis, X)\n",
    "plt.xlabel(\"Requirements\")\n",
    "plt.ylabel(\"% of households that meet the requirement\")\n",
    "plt.title(\"Nutritional Adequacy\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Determine which nutrient requirements are being met by the households in the different quartiles"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a function to make a dataframe that contains the surplus or deficit of each nutrient consumed on a daily basis by these households with positive numbers being a deficit (that household needs more of that nutrient) and negative numbers being a surplue (that household has more than the necessary amount)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nutrients_needed(quartile_consumption_df, quartile_HH_char_df):\n",
    "    first_df = compare_nutrients(quartile_consumption_df, quartile_HH_char_df, quartile_consumption_df.index[0])\n",
    "    df = pd.DataFrame(first_df['Needed'])\n",
    "    first_row = list(first_df['Needed'])\n",
    "    df[str(quartile_consumption_df.index[0])] = first_row\n",
    "    df = df.drop(columns='Needed').T\n",
    "    for i in range(1, len(quartile_consumption_df)):\n",
    "        next_df = compare_nutrients(quartile_consumption_df, quartile_HH_char_df, quartile_consumption_df.index[i])\n",
    "        next_row = list(next_df['Needed'])\n",
    "        df.loc[str(quartile_consumption_df.index[i])] = next_row\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create dataframes for both quartiles holding the surplus and deficit information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nutrients_needed_df = nutrients_needed(Q1_consumption_daily, HH_charQ1)\n",
    "#nutrients_needed_Q4_df = nutrients_needed(Q4_consumption_daily, HH_charQ4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convert these dataframes to csv files for easy retieval later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nutrients_needed_df.to_csv('nutrients_needed_Q1_df.csv')\n",
    "#nutrients_needed_Q4_df.to_csv('nutrients_needed_Q4_df.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read in the csv files and reformat them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "nutrients_needed_Q1 = pd.read_csv('nutrients_needed_Q1_df.csv').reset_index(drop=True)\n",
    "nutrients_needed_Q1[''] = nutrients_needed_Q1['Unnamed: 0']\n",
    "nutrients_needed_Q1 = nutrients_needed_Q1.drop(columns=['Unnamed: 0']).set_index('')\n",
    "\n",
    "nutrients_needed_Q4 = pd.read_csv('nutrients_needed_Q4_df.csv').reset_index(drop=True)\n",
    "nutrients_needed_Q4[''] = nutrients_needed_Q4['Unnamed: 0']\n",
    "nutrients_needed_Q4 = nutrients_needed_Q4.drop(columns=['Unnamed: 0']).set_index('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a dataframe that says whether each household received enough of each nutrient. Then sum these to determine how many households received enough of each nutrient. Use that data to also determine what percent of the households in each quartile received enough of each nutrient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q1 (# HH Met)</th>\n",
       "      <th>Q1 (% Met)</th>\n",
       "      <th>Q4 (# HH Met)</th>\n",
       "      <th>Q4 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>459</td>\n",
       "      <td>11.848219</td>\n",
       "      <td>2631</td>\n",
       "      <td>58.440693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>142</td>\n",
       "      <td>3.665462</td>\n",
       "      <td>1608</td>\n",
       "      <td>35.717459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>129</td>\n",
       "      <td>3.329892</td>\n",
       "      <td>1320</td>\n",
       "      <td>29.320302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>106</td>\n",
       "      <td>2.736190</td>\n",
       "      <td>1341</td>\n",
       "      <td>29.786761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>92</td>\n",
       "      <td>2.374806</td>\n",
       "      <td>868</td>\n",
       "      <td>19.280320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>90</td>\n",
       "      <td>2.323180</td>\n",
       "      <td>1143</td>\n",
       "      <td>25.388716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>76</td>\n",
       "      <td>1.961797</td>\n",
       "      <td>1228</td>\n",
       "      <td>27.276766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>73</td>\n",
       "      <td>1.884357</td>\n",
       "      <td>839</td>\n",
       "      <td>18.636162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>67</td>\n",
       "      <td>1.729479</td>\n",
       "      <td>913</td>\n",
       "      <td>20.279876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>58</td>\n",
       "      <td>1.497161</td>\n",
       "      <td>472</td>\n",
       "      <td>10.484229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>58</td>\n",
       "      <td>1.497161</td>\n",
       "      <td>1126</td>\n",
       "      <td>25.011106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>44</td>\n",
       "      <td>1.135777</td>\n",
       "      <td>544</td>\n",
       "      <td>12.083518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>44</td>\n",
       "      <td>1.135777</td>\n",
       "      <td>753</td>\n",
       "      <td>16.725900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>42</td>\n",
       "      <td>1.084151</td>\n",
       "      <td>906</td>\n",
       "      <td>20.124389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>42</td>\n",
       "      <td>1.084151</td>\n",
       "      <td>651</td>\n",
       "      <td>14.460240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>29</td>\n",
       "      <td>0.748580</td>\n",
       "      <td>762</td>\n",
       "      <td>16.925811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>29</td>\n",
       "      <td>0.748580</td>\n",
       "      <td>301</td>\n",
       "      <td>6.685917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>21</td>\n",
       "      <td>0.542075</td>\n",
       "      <td>113</td>\n",
       "      <td>2.509996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>20</td>\n",
       "      <td>0.516262</td>\n",
       "      <td>314</td>\n",
       "      <td>6.974678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>13</td>\n",
       "      <td>0.335570</td>\n",
       "      <td>144</td>\n",
       "      <td>3.198578</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q1 (# HH Met)  Q1 (% Met)  Q4 (# HH Met)  \\\n",
       "Energy                                    459   11.848219           2631   \n",
       "Carbohydrate, by difference               142    3.665462           1608   \n",
       "Vitamin B-12                              129    3.329892           1320   \n",
       "Protein                                   106    2.736190           1341   \n",
       "Magnesium, Mg                              92    2.374806            868   \n",
       "Phosphorus, P                              90    2.323180           1143   \n",
       "Vitamin B-6                                76    1.961797           1228   \n",
       "Fiber, total dietary                       73    1.884357            839   \n",
       "Iron, Fe                                   67    1.729479            913   \n",
       "Vitamin K (phylloquinone)                  58    1.497161            472   \n",
       "Vitamin E (alpha-tocopherol)               58    1.497161           1126   \n",
       "Thiamin                                    44    1.135777            544   \n",
       "Zinc, Zn                                   44    1.135777            753   \n",
       "Vitamin C, total ascorbic acid             42    1.084151            906   \n",
       "Niacin                                     42    1.084151            651   \n",
       "Potassium, K                               29    0.748580            762   \n",
       "Calcium, Ca                                29    0.748580            301   \n",
       "Vitamin A, RAE                             21    0.542075            113   \n",
       "Riboflavin                                 20    0.516262            314   \n",
       "Folate, DFE                                13    0.335570            144   \n",
       "\n",
       "                                Q4 (% Met)  \n",
       "Energy                           58.440693  \n",
       "Carbohydrate, by difference      35.717459  \n",
       "Vitamin B-12                     29.320302  \n",
       "Protein                          29.786761  \n",
       "Magnesium, Mg                    19.280320  \n",
       "Phosphorus, P                    25.388716  \n",
       "Vitamin B-6                      27.276766  \n",
       "Fiber, total dietary             18.636162  \n",
       "Iron, Fe                         20.279876  \n",
       "Vitamin K (phylloquinone)        10.484229  \n",
       "Vitamin E (alpha-tocopherol)     25.011106  \n",
       "Thiamin                          12.083518  \n",
       "Zinc, Zn                         16.725900  \n",
       "Vitamin C, total ascorbic acid   20.124389  \n",
       "Niacin                           14.460240  \n",
       "Potassium, K                     16.925811  \n",
       "Calcium, Ca                       6.685917  \n",
       "Vitamin A, RAE                    2.509996  \n",
       "Riboflavin                        6.974678  \n",
       "Folate, DFE                       3.198578  "
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nutrient_surplus_vs_deficitQ1 = nutrients_needed_Q1.apply(lambda x: x < 0)\n",
    "nutrient_surplus_vs_deficitQ4 = nutrients_needed_Q4.apply(lambda x: x < 0)\n",
    "summed_nutrientsQ1 = pd.DataFrame(nutrient_surplus_vs_deficitQ1.sum())\n",
    "summed_nutrientsQ1['Q1 (# HH Met)'] = summed_nutrientsQ1[0]\n",
    "summed_nutrientsQ1 = summed_nutrientsQ1.drop(columns=0)\n",
    "summed_nutrientsQ1['Q1 (% Met)'] = summed_nutrientsQ1['Q1 (# HH Met)'] / len(nutrient_surplus_vs_deficitQ1) * 100\n",
    "summed_nutrientsQ4 = pd.DataFrame(nutrient_surplus_vs_deficitQ4.sum())\n",
    "summed_nutrientsQ4['Q4 (# HH Met)'] = summed_nutrientsQ4[0]\n",
    "summed_nutrientsQ4 = summed_nutrientsQ4.drop(columns=0)\n",
    "summed_nutrientsQ4['Q4 (% Met)'] = summed_nutrientsQ4['Q4 (# HH Met)'] / len(nutrient_surplus_vs_deficitQ4) * 100\n",
    "all_summed_nutrients = pd.concat([summed_nutrientsQ1, summed_nutrientsQ4], axis=1)\n",
    "all_summed_nutrients.sort_values(['Q1 (% Met)'], axis=0, ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sort the individual dataframes in descending order to see which of the nutrient minimums are satisfied most often in the upper quartile versus the lower quartile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q1 (# HH Met)</th>\n",
       "      <th>Q1 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>459</td>\n",
       "      <td>11.848219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>142</td>\n",
       "      <td>3.665462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>129</td>\n",
       "      <td>3.329892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>106</td>\n",
       "      <td>2.736190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>92</td>\n",
       "      <td>2.374806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>90</td>\n",
       "      <td>2.323180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>76</td>\n",
       "      <td>1.961797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>73</td>\n",
       "      <td>1.884357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>67</td>\n",
       "      <td>1.729479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>58</td>\n",
       "      <td>1.497161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>58</td>\n",
       "      <td>1.497161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>44</td>\n",
       "      <td>1.135777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>44</td>\n",
       "      <td>1.135777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>42</td>\n",
       "      <td>1.084151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>42</td>\n",
       "      <td>1.084151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>29</td>\n",
       "      <td>0.748580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>29</td>\n",
       "      <td>0.748580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>21</td>\n",
       "      <td>0.542075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>20</td>\n",
       "      <td>0.516262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>13</td>\n",
       "      <td>0.335570</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q1 (# HH Met)  Q1 (% Met)\n",
       "Energy                                    459   11.848219\n",
       "Carbohydrate, by difference               142    3.665462\n",
       "Vitamin B-12                              129    3.329892\n",
       "Protein                                   106    2.736190\n",
       "Magnesium, Mg                              92    2.374806\n",
       "Phosphorus, P                              90    2.323180\n",
       "Vitamin B-6                                76    1.961797\n",
       "Fiber, total dietary                       73    1.884357\n",
       "Iron, Fe                                   67    1.729479\n",
       "Vitamin K (phylloquinone)                  58    1.497161\n",
       "Vitamin E (alpha-tocopherol)               58    1.497161\n",
       "Thiamin                                    44    1.135777\n",
       "Zinc, Zn                                   44    1.135777\n",
       "Vitamin C, total ascorbic acid             42    1.084151\n",
       "Niacin                                     42    1.084151\n",
       "Potassium, K                               29    0.748580\n",
       "Calcium, Ca                                29    0.748580\n",
       "Vitamin A, RAE                             21    0.542075\n",
       "Riboflavin                                 20    0.516262\n",
       "Folate, DFE                                13    0.335570"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sumsQ1 = summed_nutrientsQ1.sort_values(['Q1 (% Met)'], axis=0, ascending=False)\n",
    "sorted_sumsQ1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q4 (# HH Met)</th>\n",
       "      <th>Q4 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>2631</td>\n",
       "      <td>58.440693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>1608</td>\n",
       "      <td>35.717459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>1341</td>\n",
       "      <td>29.786761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>1320</td>\n",
       "      <td>29.320302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>1228</td>\n",
       "      <td>27.276766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>1143</td>\n",
       "      <td>25.388716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>1126</td>\n",
       "      <td>25.011106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>913</td>\n",
       "      <td>20.279876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>906</td>\n",
       "      <td>20.124389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>868</td>\n",
       "      <td>19.280320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>839</td>\n",
       "      <td>18.636162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>762</td>\n",
       "      <td>16.925811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>753</td>\n",
       "      <td>16.725900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>651</td>\n",
       "      <td>14.460240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>544</td>\n",
       "      <td>12.083518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>472</td>\n",
       "      <td>10.484229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>314</td>\n",
       "      <td>6.974678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>301</td>\n",
       "      <td>6.685917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>144</td>\n",
       "      <td>3.198578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>113</td>\n",
       "      <td>2.509996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q4 (# HH Met)  Q4 (% Met)\n",
       "Energy                                   2631   58.440693\n",
       "Carbohydrate, by difference              1608   35.717459\n",
       "Protein                                  1341   29.786761\n",
       "Vitamin B-12                             1320   29.320302\n",
       "Vitamin B-6                              1228   27.276766\n",
       "Phosphorus, P                            1143   25.388716\n",
       "Vitamin E (alpha-tocopherol)             1126   25.011106\n",
       "Iron, Fe                                  913   20.279876\n",
       "Vitamin C, total ascorbic acid            906   20.124389\n",
       "Magnesium, Mg                             868   19.280320\n",
       "Fiber, total dietary                      839   18.636162\n",
       "Potassium, K                              762   16.925811\n",
       "Zinc, Zn                                  753   16.725900\n",
       "Niacin                                    651   14.460240\n",
       "Thiamin                                   544   12.083518\n",
       "Vitamin K (phylloquinone)                 472   10.484229\n",
       "Riboflavin                                314    6.974678\n",
       "Calcium, Ca                               301    6.685917\n",
       "Folate, DFE                               144    3.198578\n",
       "Vitamin A, RAE                            113    2.509996"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sumsQ4 = summed_nutrientsQ4.sort_values(['Q4 (% Met)'], axis=0, ascending=False)\n",
    "sorted_sumsQ4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What if we were to double the consumption?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Double the values of consumption per day."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_dbl_consumption_daily = Q1_consumption_daily * 2\n",
    "Q4_dbl_consumption_daily = Q4_consumption_daily * 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rerun the above functions but with the doubled data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nutrients_needed_Q1_dbl = nutrients_needed(Q1_dbl_consumption_daily, HH_charQ1)\n",
    "#nutrients_needed_Q4_dbl = nutrients_needed(Q4_dbl_consumption_daily, HH_charQ4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nutrients_needed_Q1_dbl.to_csv('nutrients_needed_Q1_dbl.csv')\n",
    "#nutrients_needed_Q4_dbl.to_csv('nutrients_needed_Q4_dbl.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "nutrients_needed_Q1_dbl = pd.read_csv('nutrients_needed_Q1_dbl.csv').reset_index(drop=True)\n",
    "nutrients_needed_Q1_dbl[''] = nutrients_needed_Q1_dbl['Unnamed: 0']\n",
    "nutrients_needed_Q1_dbl = nutrients_needed_Q1_dbl.drop(columns=['Unnamed: 0']).set_index('')\n",
    "\n",
    "nutrients_needed_Q4_dbl = pd.read_csv('nutrients_needed_Q4_dbl.csv').reset_index(drop=True)\n",
    "nutrients_needed_Q4_dbl[''] = nutrients_needed_Q4_dbl['Unnamed: 0']\n",
    "nutrients_needed_Q4_dbl = nutrients_needed_Q4_dbl.drop(columns=['Unnamed: 0']).set_index('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q1 (# HH Met)</th>\n",
       "      <th>Q1 (% Met)</th>\n",
       "      <th>Q4 (# HH Met)</th>\n",
       "      <th>Q4 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>1255</td>\n",
       "      <td>32.395457</td>\n",
       "      <td>3322</td>\n",
       "      <td>73.789427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>423</td>\n",
       "      <td>10.918947</td>\n",
       "      <td>2132</td>\n",
       "      <td>47.356730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>369</td>\n",
       "      <td>9.525039</td>\n",
       "      <td>2275</td>\n",
       "      <td>50.533096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>350</td>\n",
       "      <td>9.034590</td>\n",
       "      <td>2557</td>\n",
       "      <td>56.796979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>325</td>\n",
       "      <td>8.389262</td>\n",
       "      <td>2246</td>\n",
       "      <td>49.888938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>252</td>\n",
       "      <td>6.504904</td>\n",
       "      <td>1858</td>\n",
       "      <td>41.270546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>241</td>\n",
       "      <td>6.220960</td>\n",
       "      <td>1473</td>\n",
       "      <td>32.718792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>206</td>\n",
       "      <td>5.317501</td>\n",
       "      <td>1547</td>\n",
       "      <td>34.362506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>198</td>\n",
       "      <td>5.110996</td>\n",
       "      <td>2002</td>\n",
       "      <td>44.469125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>194</td>\n",
       "      <td>5.007744</td>\n",
       "      <td>1073</td>\n",
       "      <td>23.833852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>183</td>\n",
       "      <td>4.723800</td>\n",
       "      <td>1632</td>\n",
       "      <td>36.250555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>144</td>\n",
       "      <td>3.717088</td>\n",
       "      <td>1518</td>\n",
       "      <td>33.718347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>132</td>\n",
       "      <td>3.407331</td>\n",
       "      <td>1568</td>\n",
       "      <td>34.828965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>109</td>\n",
       "      <td>2.813629</td>\n",
       "      <td>217</td>\n",
       "      <td>4.820080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>107</td>\n",
       "      <td>2.762003</td>\n",
       "      <td>1606</td>\n",
       "      <td>35.673034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>94</td>\n",
       "      <td>2.426433</td>\n",
       "      <td>1350</td>\n",
       "      <td>29.986673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>85</td>\n",
       "      <td>2.194115</td>\n",
       "      <td>1450</td>\n",
       "      <td>32.207908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>56</td>\n",
       "      <td>1.445534</td>\n",
       "      <td>889</td>\n",
       "      <td>19.746779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>54</td>\n",
       "      <td>1.393908</td>\n",
       "      <td>978</td>\n",
       "      <td>21.723678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>27</td>\n",
       "      <td>0.696954</td>\n",
       "      <td>519</td>\n",
       "      <td>11.528210</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q1 (# HH Met)  Q1 (% Met)  Q4 (# HH Met)  \\\n",
       "Energy                                   1255   32.395457           3322   \n",
       "Carbohydrate, by difference               423   10.918947           2132   \n",
       "Vitamin E (alpha-tocopherol)              369    9.525039           2275   \n",
       "Vitamin B-12                              350    9.034590           2557   \n",
       "Protein                                   325    8.389262           2246   \n",
       "Phosphorus, P                             252    6.504904           1858   \n",
       "Magnesium, Mg                             241    6.220960           1473   \n",
       "Fiber, total dietary                      206    5.317501           1547   \n",
       "Vitamin B-6                               198    5.110996           2002   \n",
       "Vitamin K (phylloquinone)                 194    5.007744           1073   \n",
       "Iron, Fe                                  183    4.723800           1632   \n",
       "Vitamin C, total ascorbic acid            144    3.717088           1518   \n",
       "Zinc, Zn                                  132    3.407331           1568   \n",
       "Vitamin A, RAE                            109    2.813629            217   \n",
       "Niacin                                    107    2.762003           1606   \n",
       "Thiamin                                    94    2.426433           1350   \n",
       "Potassium, K                               85    2.194115           1450   \n",
       "Calcium, Ca                                56    1.445534            889   \n",
       "Riboflavin                                 54    1.393908            978   \n",
       "Folate, DFE                                27    0.696954            519   \n",
       "\n",
       "                                Q4 (% Met)  \n",
       "Energy                           73.789427  \n",
       "Carbohydrate, by difference      47.356730  \n",
       "Vitamin E (alpha-tocopherol)     50.533096  \n",
       "Vitamin B-12                     56.796979  \n",
       "Protein                          49.888938  \n",
       "Phosphorus, P                    41.270546  \n",
       "Magnesium, Mg                    32.718792  \n",
       "Fiber, total dietary             34.362506  \n",
       "Vitamin B-6                      44.469125  \n",
       "Vitamin K (phylloquinone)        23.833852  \n",
       "Iron, Fe                         36.250555  \n",
       "Vitamin C, total ascorbic acid   33.718347  \n",
       "Zinc, Zn                         34.828965  \n",
       "Vitamin A, RAE                    4.820080  \n",
       "Niacin                           35.673034  \n",
       "Thiamin                          29.986673  \n",
       "Potassium, K                     32.207908  \n",
       "Calcium, Ca                      19.746779  \n",
       "Riboflavin                       21.723678  \n",
       "Folate, DFE                      11.528210  "
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nutrient_surplus_vs_deficitQ1_dbl = nutrients_needed_Q1_dbl.apply(lambda x: x < 0)\n",
    "nutrient_surplus_vs_deficitQ4_dbl = nutrients_needed_Q4_dbl.apply(lambda x: x < 0)\n",
    "summed_nutrientsQ1_dbl = pd.DataFrame(nutrient_surplus_vs_deficitQ1_dbl.sum())\n",
    "summed_nutrientsQ1_dbl['Q1 (# HH Met)'] = summed_nutrientsQ1_dbl[0]\n",
    "summed_nutrientsQ1_dbl = summed_nutrientsQ1_dbl.drop(columns=0)\n",
    "summed_nutrientsQ1_dbl['Q1 (% Met)'] = summed_nutrientsQ1_dbl['Q1 (# HH Met)'] / len(nutrient_surplus_vs_deficitQ1_dbl) * 100\n",
    "summed_nutrientsQ4_dbl = pd.DataFrame(nutrient_surplus_vs_deficitQ4_dbl.sum())\n",
    "summed_nutrientsQ4_dbl['Q4 (# HH Met)'] = summed_nutrientsQ4_dbl[0]\n",
    "summed_nutrientsQ4_dbl = summed_nutrientsQ4_dbl.drop(columns=0)\n",
    "summed_nutrientsQ4_dbl['Q4 (% Met)'] = summed_nutrientsQ4_dbl['Q4 (# HH Met)'] / len(nutrient_surplus_vs_deficitQ4_dbl) * 100\n",
    "all_summed_nutrients_dbl = pd.concat([summed_nutrientsQ1_dbl, summed_nutrientsQ4_dbl], axis=1)\n",
    "all_summed_nutrients_dbl.sort_values(['Q1 (% Met)'], axis=0, ascending=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q1 (# HH Met)</th>\n",
       "      <th>Q1 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>1255</td>\n",
       "      <td>32.395457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>423</td>\n",
       "      <td>10.918947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>369</td>\n",
       "      <td>9.525039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>350</td>\n",
       "      <td>9.034590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>325</td>\n",
       "      <td>8.389262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>252</td>\n",
       "      <td>6.504904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>241</td>\n",
       "      <td>6.220960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>206</td>\n",
       "      <td>5.317501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>198</td>\n",
       "      <td>5.110996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>194</td>\n",
       "      <td>5.007744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>183</td>\n",
       "      <td>4.723800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>144</td>\n",
       "      <td>3.717088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>132</td>\n",
       "      <td>3.407331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>109</td>\n",
       "      <td>2.813629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>107</td>\n",
       "      <td>2.762003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>94</td>\n",
       "      <td>2.426433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>85</td>\n",
       "      <td>2.194115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>56</td>\n",
       "      <td>1.445534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>54</td>\n",
       "      <td>1.393908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>27</td>\n",
       "      <td>0.696954</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q1 (# HH Met)  Q1 (% Met)\n",
       "Energy                                   1255   32.395457\n",
       "Carbohydrate, by difference               423   10.918947\n",
       "Vitamin E (alpha-tocopherol)              369    9.525039\n",
       "Vitamin B-12                              350    9.034590\n",
       "Protein                                   325    8.389262\n",
       "Phosphorus, P                             252    6.504904\n",
       "Magnesium, Mg                             241    6.220960\n",
       "Fiber, total dietary                      206    5.317501\n",
       "Vitamin B-6                               198    5.110996\n",
       "Vitamin K (phylloquinone)                 194    5.007744\n",
       "Iron, Fe                                  183    4.723800\n",
       "Vitamin C, total ascorbic acid            144    3.717088\n",
       "Zinc, Zn                                  132    3.407331\n",
       "Vitamin A, RAE                            109    2.813629\n",
       "Niacin                                    107    2.762003\n",
       "Thiamin                                    94    2.426433\n",
       "Potassium, K                               85    2.194115\n",
       "Calcium, Ca                                56    1.445534\n",
       "Riboflavin                                 54    1.393908\n",
       "Folate, DFE                                27    0.696954"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sumsQ1_dbl = summed_nutrientsQ1_dbl.sort_values(['Q1 (% Met)'], axis=0, ascending=False)\n",
    "sorted_sumsQ1_dbl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q4 (# HH Met)</th>\n",
       "      <th>Q4 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>3322</td>\n",
       "      <td>73.789427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>2557</td>\n",
       "      <td>56.796979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>2275</td>\n",
       "      <td>50.533096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>2246</td>\n",
       "      <td>49.888938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>2132</td>\n",
       "      <td>47.356730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>2002</td>\n",
       "      <td>44.469125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>1858</td>\n",
       "      <td>41.270546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>1632</td>\n",
       "      <td>36.250555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>1606</td>\n",
       "      <td>35.673034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>1568</td>\n",
       "      <td>34.828965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>1547</td>\n",
       "      <td>34.362506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>1518</td>\n",
       "      <td>33.718347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>1473</td>\n",
       "      <td>32.718792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>1450</td>\n",
       "      <td>32.207908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>1350</td>\n",
       "      <td>29.986673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>1073</td>\n",
       "      <td>23.833852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>978</td>\n",
       "      <td>21.723678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>889</td>\n",
       "      <td>19.746779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>519</td>\n",
       "      <td>11.528210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>217</td>\n",
       "      <td>4.820080</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q4 (# HH Met)  Q4 (% Met)\n",
       "Energy                                   3322   73.789427\n",
       "Vitamin B-12                             2557   56.796979\n",
       "Vitamin E (alpha-tocopherol)             2275   50.533096\n",
       "Protein                                  2246   49.888938\n",
       "Carbohydrate, by difference              2132   47.356730\n",
       "Vitamin B-6                              2002   44.469125\n",
       "Phosphorus, P                            1858   41.270546\n",
       "Iron, Fe                                 1632   36.250555\n",
       "Niacin                                   1606   35.673034\n",
       "Zinc, Zn                                 1568   34.828965\n",
       "Fiber, total dietary                     1547   34.362506\n",
       "Vitamin C, total ascorbic acid           1518   33.718347\n",
       "Magnesium, Mg                            1473   32.718792\n",
       "Potassium, K                             1450   32.207908\n",
       "Thiamin                                  1350   29.986673\n",
       "Vitamin K (phylloquinone)                1073   23.833852\n",
       "Riboflavin                                978   21.723678\n",
       "Calcium, Ca                               889   19.746779\n",
       "Folate, DFE                               519   11.528210\n",
       "Vitamin A, RAE                            217    4.820080"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sumsQ4_dbl = summed_nutrientsQ4_dbl.sort_values(['Q4 (% Met)'], axis=0, ascending=False)\n",
    "sorted_sumsQ4_dbl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ... quadruple the consumption?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quadruple the daily consumption data, then run the above analysis on the quadrupled data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_quad_consumption_daily = Q1_consumption_daily * 4\n",
    "Q4_quad_consumption_daily = Q4_consumption_daily * 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nutrients_needed_Q1_quad = nutrients_needed(Q1_quad_consumption_daily, HH_charQ1)\n",
    "#nutrients_needed_Q4_quad = nutrients_needed(Q4_quad_consumption_daily, HH_charQ4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "#nutrients_needed_Q1_quad.to_csv('nutrients_needed_Q1_quad.csv')\n",
    "#nutrients_needed_Q4_quad.to_csv('nutrients_needed_Q4_quad.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "nutrients_needed_Q1_quad = pd.read_csv('nutrients_needed_Q1_quad.csv').reset_index(drop=True)\n",
    "nutrients_needed_Q1_quad[''] = nutrients_needed_Q1_quad['Unnamed: 0']\n",
    "nutrients_needed_Q1_quad = nutrients_needed_Q1_quad.drop(columns=['Unnamed: 0']).set_index('')\n",
    "\n",
    "nutrients_needed_Q4_quad = pd.read_csv('nutrients_needed_Q4_quad.csv').reset_index(drop=True)\n",
    "nutrients_needed_Q4_quad[''] = nutrients_needed_Q4_quad['Unnamed: 0']\n",
    "nutrients_needed_Q4_quad = nutrients_needed_Q4_quad.drop(columns=['Unnamed: 0']).set_index('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q1 (# HH Met)</th>\n",
       "      <th>Q1 (% Met)</th>\n",
       "      <th>Q4 (# HH Met)</th>\n",
       "      <th>Q4 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>2308</td>\n",
       "      <td>59.576665</td>\n",
       "      <td>3618</td>\n",
       "      <td>80.364283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>1378</td>\n",
       "      <td>35.570470</td>\n",
       "      <td>2972</td>\n",
       "      <td>66.015104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>887</td>\n",
       "      <td>22.896231</td>\n",
       "      <td>3540</td>\n",
       "      <td>78.631719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>814</td>\n",
       "      <td>21.011874</td>\n",
       "      <td>2506</td>\n",
       "      <td>55.664149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>805</td>\n",
       "      <td>20.779556</td>\n",
       "      <td>3122</td>\n",
       "      <td>69.346957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>578</td>\n",
       "      <td>14.919979</td>\n",
       "      <td>2577</td>\n",
       "      <td>57.241226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>557</td>\n",
       "      <td>14.377904</td>\n",
       "      <td>2070</td>\n",
       "      <td>45.979565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>499</td>\n",
       "      <td>12.880743</td>\n",
       "      <td>2626</td>\n",
       "      <td>58.329631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>496</td>\n",
       "      <td>12.803304</td>\n",
       "      <td>2391</td>\n",
       "      <td>53.109729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>488</td>\n",
       "      <td>12.596799</td>\n",
       "      <td>2082</td>\n",
       "      <td>46.246113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>396</td>\n",
       "      <td>10.221993</td>\n",
       "      <td>1697</td>\n",
       "      <td>37.694358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>374</td>\n",
       "      <td>9.654104</td>\n",
       "      <td>2688</td>\n",
       "      <td>59.706797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>364</td>\n",
       "      <td>9.395973</td>\n",
       "      <td>1895</td>\n",
       "      <td>42.092403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>293</td>\n",
       "      <td>7.563242</td>\n",
       "      <td>2673</td>\n",
       "      <td>59.373612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>291</td>\n",
       "      <td>7.511616</td>\n",
       "      <td>2019</td>\n",
       "      <td>44.846735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>246</td>\n",
       "      <td>6.350026</td>\n",
       "      <td>2087</td>\n",
       "      <td>46.357175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>185</td>\n",
       "      <td>4.775426</td>\n",
       "      <td>442</td>\n",
       "      <td>9.817859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>170</td>\n",
       "      <td>4.388229</td>\n",
       "      <td>1633</td>\n",
       "      <td>36.272768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>144</td>\n",
       "      <td>3.717088</td>\n",
       "      <td>2030</td>\n",
       "      <td>45.091071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>75</td>\n",
       "      <td>1.935983</td>\n",
       "      <td>1202</td>\n",
       "      <td>26.699245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q1 (# HH Met)  Q1 (% Met)  Q4 (# HH Met)  \\\n",
       "Energy                                   2308   59.576665           3618   \n",
       "Vitamin E (alpha-tocopherol)             1378   35.570470           2972   \n",
       "Vitamin B-12                              887   22.896231           3540   \n",
       "Carbohydrate, by difference               814   21.011874           2506   \n",
       "Protein                                   805   20.779556           3122   \n",
       "Phosphorus, P                             578   14.919979           2577   \n",
       "Magnesium, Mg                             557   14.377904           2070   \n",
       "Vitamin B-6                               499   12.880743           2626   \n",
       "Iron, Fe                                  496   12.803304           2391   \n",
       "Fiber, total dietary                      488   12.596799           2082   \n",
       "Vitamin K (phylloquinone)                 396   10.221993           1697   \n",
       "Zinc, Zn                                  374    9.654104           2688   \n",
       "Vitamin C, total ascorbic acid            364    9.395973           1895   \n",
       "Niacin                                    293    7.563242           2673   \n",
       "Potassium, K                              291    7.511616           2019   \n",
       "Thiamin                                   246    6.350026           2087   \n",
       "Vitamin A, RAE                            185    4.775426            442   \n",
       "Calcium, Ca                               170    4.388229           1633   \n",
       "Riboflavin                                144    3.717088           2030   \n",
       "Folate, DFE                                75    1.935983           1202   \n",
       "\n",
       "                                Q4 (% Met)  \n",
       "Energy                           80.364283  \n",
       "Vitamin E (alpha-tocopherol)     66.015104  \n",
       "Vitamin B-12                     78.631719  \n",
       "Carbohydrate, by difference      55.664149  \n",
       "Protein                          69.346957  \n",
       "Phosphorus, P                    57.241226  \n",
       "Magnesium, Mg                    45.979565  \n",
       "Vitamin B-6                      58.329631  \n",
       "Iron, Fe                         53.109729  \n",
       "Fiber, total dietary             46.246113  \n",
       "Vitamin K (phylloquinone)        37.694358  \n",
       "Zinc, Zn                         59.706797  \n",
       "Vitamin C, total ascorbic acid   42.092403  \n",
       "Niacin                           59.373612  \n",
       "Potassium, K                     44.846735  \n",
       "Thiamin                          46.357175  \n",
       "Vitamin A, RAE                    9.817859  \n",
       "Calcium, Ca                      36.272768  \n",
       "Riboflavin                       45.091071  \n",
       "Folate, DFE                      26.699245  "
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nutrient_surplus_vs_deficitQ1_quad = nutrients_needed_Q1_quad.apply(lambda x: x < 0)\n",
    "nutrient_surplus_vs_deficitQ4_quad = nutrients_needed_Q4_quad.apply(lambda x: x < 0)\n",
    "summed_nutrientsQ1_quad = pd.DataFrame(nutrient_surplus_vs_deficitQ1_quad.sum())\n",
    "summed_nutrientsQ1_quad['Q1 (# HH Met)'] = summed_nutrientsQ1_quad[0]\n",
    "summed_nutrientsQ1_quad = summed_nutrientsQ1_quad.drop(columns=0)\n",
    "summed_nutrientsQ1_quad['Q1 (% Met)'] = summed_nutrientsQ1_quad['Q1 (# HH Met)'] / len(nutrient_surplus_vs_deficitQ1_quad) * 100\n",
    "summed_nutrientsQ4_quad = pd.DataFrame(nutrient_surplus_vs_deficitQ4_quad.sum())\n",
    "summed_nutrientsQ4_quad['Q4 (# HH Met)'] = summed_nutrientsQ4_quad[0]\n",
    "summed_nutrientsQ4_quad = summed_nutrientsQ4_quad.drop(columns=0)\n",
    "summed_nutrientsQ4_quad['Q4 (% Met)'] = summed_nutrientsQ4_quad['Q4 (# HH Met)'] / len(nutrient_surplus_vs_deficitQ4_quad) * 100\n",
    "all_summed_nutrients_quad = pd.concat([summed_nutrientsQ1_quad, summed_nutrientsQ4_quad], axis=1)\n",
    "all_summed_nutrients_quad.sort_values(['Q1 (% Met)'], axis=0, ascending=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q1 (# HH Met)</th>\n",
       "      <th>Q1 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>2308</td>\n",
       "      <td>59.576665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>1378</td>\n",
       "      <td>35.570470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>887</td>\n",
       "      <td>22.896231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>814</td>\n",
       "      <td>21.011874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>805</td>\n",
       "      <td>20.779556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>578</td>\n",
       "      <td>14.919979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>557</td>\n",
       "      <td>14.377904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>499</td>\n",
       "      <td>12.880743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>496</td>\n",
       "      <td>12.803304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>488</td>\n",
       "      <td>12.596799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>396</td>\n",
       "      <td>10.221993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>374</td>\n",
       "      <td>9.654104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>364</td>\n",
       "      <td>9.395973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>293</td>\n",
       "      <td>7.563242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>291</td>\n",
       "      <td>7.511616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>246</td>\n",
       "      <td>6.350026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>185</td>\n",
       "      <td>4.775426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>170</td>\n",
       "      <td>4.388229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>144</td>\n",
       "      <td>3.717088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>75</td>\n",
       "      <td>1.935983</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q1 (# HH Met)  Q1 (% Met)\n",
       "Energy                                   2308   59.576665\n",
       "Vitamin E (alpha-tocopherol)             1378   35.570470\n",
       "Vitamin B-12                              887   22.896231\n",
       "Carbohydrate, by difference               814   21.011874\n",
       "Protein                                   805   20.779556\n",
       "Phosphorus, P                             578   14.919979\n",
       "Magnesium, Mg                             557   14.377904\n",
       "Vitamin B-6                               499   12.880743\n",
       "Iron, Fe                                  496   12.803304\n",
       "Fiber, total dietary                      488   12.596799\n",
       "Vitamin K (phylloquinone)                 396   10.221993\n",
       "Zinc, Zn                                  374    9.654104\n",
       "Vitamin C, total ascorbic acid            364    9.395973\n",
       "Niacin                                    293    7.563242\n",
       "Potassium, K                              291    7.511616\n",
       "Thiamin                                   246    6.350026\n",
       "Vitamin A, RAE                            185    4.775426\n",
       "Calcium, Ca                               170    4.388229\n",
       "Riboflavin                                144    3.717088\n",
       "Folate, DFE                                75    1.935983"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sumsQ1_quad = summed_nutrientsQ1_quad.sort_values(['Q1 (% Met)'], axis=0, ascending=False)\n",
    "sorted_sumsQ1_quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Q4 (# HH Met)</th>\n",
       "      <th>Q4 (% Met)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Energy</th>\n",
       "      <td>3618</td>\n",
       "      <td>80.364283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-12</th>\n",
       "      <td>3540</td>\n",
       "      <td>78.631719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Protein</th>\n",
       "      <td>3122</td>\n",
       "      <td>69.346957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin E (alpha-tocopherol)</th>\n",
       "      <td>2972</td>\n",
       "      <td>66.015104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zinc, Zn</th>\n",
       "      <td>2688</td>\n",
       "      <td>59.706797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Niacin</th>\n",
       "      <td>2673</td>\n",
       "      <td>59.373612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin B-6</th>\n",
       "      <td>2626</td>\n",
       "      <td>58.329631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phosphorus, P</th>\n",
       "      <td>2577</td>\n",
       "      <td>57.241226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carbohydrate, by difference</th>\n",
       "      <td>2506</td>\n",
       "      <td>55.664149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iron, Fe</th>\n",
       "      <td>2391</td>\n",
       "      <td>53.109729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thiamin</th>\n",
       "      <td>2087</td>\n",
       "      <td>46.357175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fiber, total dietary</th>\n",
       "      <td>2082</td>\n",
       "      <td>46.246113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magnesium, Mg</th>\n",
       "      <td>2070</td>\n",
       "      <td>45.979565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Riboflavin</th>\n",
       "      <td>2030</td>\n",
       "      <td>45.091071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Potassium, K</th>\n",
       "      <td>2019</td>\n",
       "      <td>44.846735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin C, total ascorbic acid</th>\n",
       "      <td>1895</td>\n",
       "      <td>42.092403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin K (phylloquinone)</th>\n",
       "      <td>1697</td>\n",
       "      <td>37.694358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calcium, Ca</th>\n",
       "      <td>1633</td>\n",
       "      <td>36.272768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Folate, DFE</th>\n",
       "      <td>1202</td>\n",
       "      <td>26.699245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vitamin A, RAE</th>\n",
       "      <td>442</td>\n",
       "      <td>9.817859</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Q4 (# HH Met)  Q4 (% Met)\n",
       "Energy                                   3618   80.364283\n",
       "Vitamin B-12                             3540   78.631719\n",
       "Protein                                  3122   69.346957\n",
       "Vitamin E (alpha-tocopherol)             2972   66.015104\n",
       "Zinc, Zn                                 2688   59.706797\n",
       "Niacin                                   2673   59.373612\n",
       "Vitamin B-6                              2626   58.329631\n",
       "Phosphorus, P                            2577   57.241226\n",
       "Carbohydrate, by difference              2506   55.664149\n",
       "Iron, Fe                                 2391   53.109729\n",
       "Thiamin                                  2087   46.357175\n",
       "Fiber, total dietary                     2082   46.246113\n",
       "Magnesium, Mg                            2070   45.979565\n",
       "Riboflavin                               2030   45.091071\n",
       "Potassium, K                             2019   44.846735\n",
       "Vitamin C, total ascorbic acid           1895   42.092403\n",
       "Vitamin K (phylloquinone)                1697   37.694358\n",
       "Calcium, Ca                              1633   36.272768\n",
       "Folate, DFE                              1202   26.699245\n",
       "Vitamin A, RAE                            442    9.817859"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_sumsQ4_quad = summed_nutrientsQ4_quad.sort_values(['Q4 (% Met)'], axis=0, ascending=False)\n",
    "sorted_sumsQ4_quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "org": null
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
